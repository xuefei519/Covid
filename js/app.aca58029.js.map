{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/views/components/DoughnutChart.vue?a75c","webpack:///./src/views/components/Flot.vue?ec41","webpack:///./src/components/Modal.vue?ccae","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.vue?d532","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue","webpack:///./src/views/Landing.vue?afa1","webpack:///./src/views/components/TopStat.vue?cc02","webpack:///./src/base.js","webpack:///src/views/components/TopStat.vue","webpack:///./src/views/components/TopStat.vue?94d6","webpack:///./src/views/components/TopStat.vue","webpack:///./src/views/components/Map.vue?eb27","webpack:///src/views/components/Map.vue","webpack:///./src/views/components/Map.vue?faa6","webpack:///./src/views/components/Map.vue","webpack:///./src/views/components/RegionTable.vue?eb1e","webpack:///./src/const.js","webpack:///src/views/components/RegionTable.vue","webpack:///./src/views/components/RegionTable.vue?f694","webpack:///./src/views/components/RegionTable.vue?f247","webpack:///./src/views/components/ProgressChart.vue?39ed","webpack:///src/views/components/ProgressChart.vue","webpack:///./src/views/components/ProgressChart.vue?28ba","webpack:///./src/views/components/ProgressChart.vue?dd59","webpack:///./src/views/components/Flot.vue?86ea","webpack:///src/views/components/Flot.vue","webpack:///./src/views/components/Flot.vue?552a","webpack:///./src/views/components/Flot.vue?2cd6","webpack:///./src/views/components/DatePickers.vue?6c37","webpack:///src/views/components/DatePickers.vue","webpack:///./src/views/components/DatePickers.vue?21f7","webpack:///./src/views/components/DatePickers.vue?611f","webpack:///./src/views/components/DoughnutChart.vue?e95a","webpack:///src/views/components/DoughnutChart.vue","webpack:///./src/views/components/DoughnutChart.vue?1b4a","webpack:///./src/views/components/DoughnutChart.vue?f1e1","webpack:///./src/views/components/PieChart.vue?dbbe","webpack:///src/views/components/PieChart.vue","webpack:///./src/views/components/PieChart.vue?88ca","webpack:///./src/views/components/PieChart.vue","webpack:///src/views/Landing.vue","webpack:///./src/views/Landing.vue?337b","webpack:///./src/views/Landing.vue","webpack:///./src/layout/AppHeader.vue?3f09","webpack:///./src/components/BaseNav.vue?fdc7","webpack:///./src/components/NavbarToggleButton.vue?f4d6","webpack:///src/components/NavbarToggleButton.vue","webpack:///./src/components/NavbarToggleButton.vue?ee50","webpack:///./src/components/NavbarToggleButton.vue","webpack:///src/components/BaseNav.vue","webpack:///./src/components/BaseNav.vue?4fc9","webpack:///./src/components/BaseNav.vue","webpack:///./src/components/BaseDropdown.vue?39a5","webpack:///src/components/BaseDropdown.vue","webpack:///./src/components/BaseDropdown.vue?6ccd","webpack:///./src/components/BaseDropdown.vue?5121","webpack:///./src/components/CloseButton.vue?75a1","webpack:///src/components/CloseButton.vue","webpack:///./src/components/CloseButton.vue?c63b","webpack:///./src/components/CloseButton.vue","webpack:///src/layout/AppHeader.vue","webpack:///./src/layout/AppHeader.vue?9f63","webpack:///./src/layout/AppHeader.vue","webpack:///./src/layout/AppFooter.vue?971c","webpack:///src/layout/AppFooter.vue","webpack:///./src/layout/AppFooter.vue?11cd","webpack:///./src/layout/AppFooter.vue","webpack:///./src/router.js","webpack:///./src/components/Badge.vue?df26","webpack:///src/components/Badge.vue","webpack:///./src/components/Badge.vue?d32e","webpack:///./src/components/Badge.vue","webpack:///./src/components/BaseAlert.vue?43d7","webpack:///src/components/BaseAlert.vue","webpack:///./src/components/BaseAlert.vue?a779","webpack:///./src/components/BaseAlert.vue","webpack:///./src/components/BaseButton.vue?4783","webpack:///src/components/BaseButton.vue","webpack:///./src/components/BaseButton.vue?4502","webpack:///./src/components/BaseButton.vue","webpack:///./src/components/BaseCheckbox.vue?980a","webpack:///./src/components/stringUtils.js","webpack:///src/components/BaseCheckbox.vue","webpack:///./src/components/BaseCheckbox.vue?d15d","webpack:///./src/components/BaseCheckbox.vue","webpack:///./src/components/BaseInput.vue?5678","webpack:///src/components/BaseInput.vue","webpack:///./src/components/BaseInput.vue?f9c3","webpack:///./src/components/BaseInput.vue","webpack:///./src/components/Modal.vue?123e","webpack:///src/components/Modal.vue","webpack:///./src/components/Modal.vue?cf53","webpack:///./src/components/Modal.vue?ea02","webpack:///./src/components/BasePagination.vue?9d36","webpack:///src/components/BasePagination.vue","webpack:///./src/components/BasePagination.vue?ffdc","webpack:///./src/components/BasePagination.vue","webpack:///./src/components/BaseProgress.vue?07a5","webpack:///src/components/BaseProgress.vue","webpack:///./src/components/BaseProgress.vue?e3dc","webpack:///./src/components/BaseProgress.vue","webpack:///./src/components/BaseRadio.vue?20a2","webpack:///src/components/BaseRadio.vue","webpack:///./src/components/BaseRadio.vue?14a3","webpack:///./src/components/BaseRadio.vue","webpack:///./src/components/BaseSlider.vue?1a63","webpack:///src/components/BaseSlider.vue","webpack:///./src/components/BaseSlider.vue?c7a0","webpack:///./src/components/BaseSlider.vue","webpack:///./src/components/BaseSwitch.vue?ee89","webpack:///src/components/BaseSwitch.vue","webpack:///./src/components/BaseSwitch.vue?a3be","webpack:///./src/components/BaseSwitch.vue","webpack:///./src/components/Card.vue?f321","webpack:///src/components/Card.vue","webpack:///./src/components/Card.vue?7cd0","webpack:///./src/components/Card.vue","webpack:///./src/components/Icon.vue?9ff3","webpack:///src/components/Icon.vue","webpack:///./src/components/Icon.vue?cf51","webpack:///./src/components/Icon.vue","webpack:///./src/plugins/globalComponents.js","webpack:///./src/directives/click-ouside.js","webpack:///./src/plugins/globalDirectives.js","webpack:///./src/plugins/argon-kit.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/lib/Flot/jquery.flot.js","webpack:///./src/lib/Flot/jquery.flot.time.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/views/components/ProgressChart.vue?e3e8","webpack:///./src/views/components/DatePickers.vue?5d08","webpack:///./src/views/components/RegionTable.vue?19fc","webpack:///./src/lib/Flot/jquery.flot.dashes.js","webpack:///./src/lib/Flot/jquery.flot.resize.js","webpack:///./src/components/BaseDropdown.vue?2c62","webpack:///./src/lib/jquery.vmap.rss.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","map","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","resolve","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","components","FadeTransition","component","staticClass","_l","category","x","isCategoryToShow","getValue","getLable","getNumber","parseFloat","diff","_e","getPercent","categories","ICU","ICU_bed_cap","hospitalized","hospital_bed_cap","_v","on","togglePanel","staticStyle","_m","regionData","case","regions","dateRange","gender","_s","label","numberFormat","number","class","getArrowClass","getClass","gradient","radius","padding","width","lineCap","gradientDirection","fill","type","autoLineWidth","num","Intl","NumberFormat","format","sort","region","$event","mouseOver","mouseOut","regionList","death","total","categoryStatsToShow","labels","categoryFlotToShow","population","population_65_plus","__maximum_bed_capacity","__maximum_UCI_capacity","title","subtitle","directives","rawName","expression","domProps","Array","isArray","checkedCategories","_i","$$a","$$el","target","$$c","checked","$$v","$$i","concat","getLabel","locale","opens","ranges","update","model","callback","polar","slot","_obj","_obj$1","expand","effect","transparent","round","_t","preventDefault","onTitleClick","toggled","contentId","nativeOn","stopPropagation","show","closeMenu","props","String","Number","description","Boolean","default","NavbarToggleButton","Math","random","toString","methods","$emit","evt","tag","isOpen","direction","toggleDropDown","hideArrow","icon","position","menuClasses","closeDropDown","expanded","handleClick","Vue","use","Router","linkExactActiveClass","routes","path","meta","header","AppHeader","Landing","footer","AppFooter","scrollBehavior","to","hash","selector","y","rounded","circle","dismissible","$slots","dismissAlert","visible","classes","text","size","textColor","nativeType","outline","iconOnly","block","computed","btnClasses","disabled","inlineClass","cbId","randomString","possibleChars","charAt","floor","prop","inline","touched","set","check","mounted","hasIcon","error","focused","alternative","valid","labelClasses","addonLeftIcon","addonLeft","_g","_b","inputClasses","required","$attrs","listeners","slotData","addonRightIcon","addonRight","inheritAttrs","undefined","input","updateValue","focus","onFocus","blur","onBlur","animationDuration","currentTarget","closeModal","modalClasses","modalContentClasses","headerClasses","bodyClasses","footerClasses","SlideYUpTransition","showClose","validator","acceptedValues","indexOf","watch","val","documentClasses","add","remove","align","prevPage","range","minPage","maxPage","item","active","changePage","totalPages","nextPage","pageCount","perPage","ceil","pagesToDisplay","defaultPagesToDisplay","newMaxPage","pagesToAdd","arr","style","height","computedClasses","striped","animated","_q","ref","min","max","options","connect","slider","createSlider","start","newValue","oldValue","sliderValue","$listeners","_obj$2","hover","shadow","shadowSize","noBody","color","install","Badge","BaseAlert","BaseButton","BaseInput","Modal","BaseCheckbox","BasePagination","BaseProgress","BaseRadio","BaseSlider","BaseSwitch","Card","Icon","el","binding","vnode","clickOutsideEvent","event","contains","context","document","body","addEventListener","unbind","removeEventListener","GlobalDirectives","directive","clickOutside","globalComponents","globalDirectives","VueLazyload","register","process","ready","console","log","registered","cached","updatefound","updated","offline","$","make","g","b","a","normalize","scale","f","join","clamp","parseInt","clone","extract","elem","css","toLowerCase","parent","nodeName","parse","str","res","exec","trim","lookupColors","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","jQuery","Canvas","cls","container","element","children","createElement","className","left","top","appendTo","getContext","G_vmlCanvasManager","initElement","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","resize","textContainer","_textCache","Plot","placeholder","data_","options_","plugins","series","colors","legend","noColumns","labelFormatter","labelBoxBorderColor","margin","backgroundColor","backgroundOpacity","sorted","xaxis","font","tickColor","transform","inverseTransform","autoscaleMargin","ticks","tickFormatter","labelWidth","labelHeight","reserveSpace","tickLength","alignTicksWithAxis","tickDecimals","tickSize","minTickSize","yaxis","xaxes","yaxes","points","lineWidth","fillColor","symbol","lines","steps","bars","barWidth","horizontal","zero","highlightColor","grid","aboveData","borderColor","labelMargin","axisMargin","borderWidth","minBorderMargin","markings","markingsColor","markingsLineWidth","clickable","hoverable","autoHighlight","mouseActiveRadius","interaction","redrawOverlayInterval","hooks","surface","overlay","eventHolder","ctx","octx","plotOffset","right","bottom","plotWidth","plotHeight","processOptions","processRawData","processDatapoints","processOffset","drawBackground","drawSeries","draw","bindEvents","drawOverlay","shutdown","plot","executeHooks","hook","args","initPlugins","init","extend","parseOptions","opts","axisOptions","axisCount","fontSize","fontSizeDefault","replace","fontDefaults","variant","weight","family","lineHeight","noTicks","x2axis","y2axis","coloredAreas","coloredAreasColor","getOrCreateAxis","setData","parseData","fillInSeriesOptions","processData","axisNumber","obj","coord","allAxes","grep","canvasToAxisCoords","pos","axis","used","c2p","x1","y1","axisToCanvasCoords","p2c","axes","neededColors","maxIndex","sc","colorPool","colorPoolSize","variation","colori","v","k","ps","topSentry","POSITIVE_INFINITY","bottomSentry","NEGATIVE_INFINITY","fakeInfinity","MAX_VALUE","updateAxis","datamin","datamax","each","_","datapoints","autoscale","defaultValue","pointsize","insertSteps","nullify","isNaN","Infinity","xmin","ymin","xmax","ymax","delta","setupCanvases","filter","hasClass","existing","clear","mousemove","onMouseMove","onMouseLeave","click","onClick","redrawTimeout","clearTimeout","setTransformationHelpers","identity","it","abs","measureTickLabels","maxWidth","legacyStyles","layer","info","getTextInfo","allocateAxisBoxFirstPhase","lw","lh","isXAxis","innermost","outermost","first","found","box","allocateAxisBoxSecondPhase","adjustLayoutForThingsStickingOut","minMargin","margins","setupGrid","showGrid","axisOpts","setRange","allocatedAxes","setupTickGeneration","setTicks","snapRangeToTicks","drawAxisLabels","insertLegend","widen","sqrt","dec","LN10","maxDec","magn","pow","norm","tickGenerator","prev","floorInBase","NaN","factor","formatted","decimal","precision","substr","isFunction","otherAxis","niceTicks","extraDec","ts","test","toFixed","oticks","drawGrid","render","triggerRedrawOverlay","extractRange","from","tmp","save","translate","fillStyle","getColorOrGradient","fillRect","restore","bw","bc","getAxes","xrange","yrange","xequal","yequal","subPixel","beginPath","strokeStyle","moveTo","lineTo","stroke","xoff","yoff","strokeRect","tick","halign","valign","removeText","addText","drawSeriesLines","drawSeriesBars","drawSeriesPoints","plotLine","xoffset","yoffset","axisx","axisy","prevx","prevy","x2","y2","plotLineArea","areaOpen","ypos","segmentStart","segmentEnd","x1old","x2old","lineJoin","sw","angle","PI","sin","cos","getFillStyle","plotPoints","offset","arc","closePath","w","drawBar","barLeft","barRight","fillStyleCallback","drawLeft","drawRight","drawTop","drawBottom","plotBars","filloptions","seriesColor","html","find","fragments","entries","rowStarted","lf","reverse","ascending","entry","table","div","prependTo","getPlaceholder","getCanvas","getPlotOffset","getData","getXAxes","getYAxes","getOptions","highlight","unhighlight","pointOffset","point","destroy","removeData","empty","highlights","findNearbyItem","mouseX","mouseY","seriesFilter","maxDistance","smallestDistance","mx","my","maxx","maxy","dx","dy","dist","datapoint","dataIndex","seriesIndex","triggerClickHoverEvent","eventname","canvasX","pageX","canvasY","pageY","h","auto","trigger","setTimeout","hi","drawBarHighlight","drawPointHighlight","indexOfHighlight","pointRadius","spec","defaultColor","createLinearGradient","co","brightness","opacity","addColorStop","base","fn","detach","parentNode","removeChild","clearRect","cache","layerKey","getTextLayer","layerCache","styleKey","hide","styleCache","positions","rendered","append","insertAfter","addClass","textStyle","outerWidth","outerHeight","version","timezone","timeformat","twelveHourClock","monthNames","formatDate","fmt","dayNames","strftime","hours12","leftPad","pad","escape","hours","getHours","isAM","getDay","getMonth","getDate","getMinutes","getSeconds","getFullYear","makeUtcWrapper","addProxyMethod","sourceObj","sourceMethod","targetObj","targetMethod","arguments","utc","date","dateGenerator","Date","timezoneJS","setTimezone","setTime","timeUnitSize","baseSpec","specMonths","specQuarters","axisName","minSize","unit","year","step","setSeconds","setMinutes","setHours","setMonth","setFullYear","setMilliseconds","minute","hour","day","setDate","month","quarter","carry","getTime","end","useQuarters","span","suffix","hourCode","rt","Vuetify","require","moment","updateLocale","months","monthsShort","localeData","longDateFormat","config","productionTip","Argon","VueAxios","axios","jvectormap","$axios","bus","router","vuetify","App","$mount","dashes","plotDashes","dashOnLength","dashOffLength","dashRemainder","dashOn","dashLength","lineSegmentOffset","segmentLength","ax2","ax1","ay2","ay1","deltaX","deltaY","distance","remainder","xsign","ysign","dashOffset","u","is","requestAnimationFrame","special","setup","teardown","cancelAnimationFrame","handler","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","webkitCancelRequestAnimationFrame","mozCancelRequestAnimationFrame","oCancelRequestAnimationFrame","msCancelRequestAnimationFrame","onResize","vectorMap"],"mappings":"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","file":"js/app.aca58029.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DoughnutChart.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DoughnutChart.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Flot.vue?vue&type=style&index=0&id=044935a2&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Flot.vue?vue&type=style&index=0&id=044935a2&scoped=true&lang=css&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Modal.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Modal.vue?vue&type=style&index=0&lang=css&\"","var map = {\n\t\"./af\": \"2bfb\",\n\t\"./af.js\": \"2bfb\",\n\t\"./ar\": \"8e73\",\n\t\"./ar-dz\": \"a356\",\n\t\"./ar-dz.js\": \"a356\",\n\t\"./ar-kw\": \"423e\",\n\t\"./ar-kw.js\": \"423e\",\n\t\"./ar-ly\": \"1cfd\",\n\t\"./ar-ly.js\": \"1cfd\",\n\t\"./ar-ma\": \"0a844\",\n\t\"./ar-ma.js\": \"0a844\",\n\t\"./ar-sa\": \"8230\",\n\t\"./ar-sa.js\": \"8230\",\n\t\"./ar-tn\": \"6d83\",\n\t\"./ar-tn.js\": \"6d83\",\n\t\"./ar.js\": \"8e73\",\n\t\"./az\": \"485c\",\n\t\"./az.js\": \"485c\",\n\t\"./be\": \"1fc1\",\n\t\"./be.js\": \"1fc1\",\n\t\"./bg\": \"84aa\",\n\t\"./bg.js\": \"84aa\",\n\t\"./bm\": \"a7fa\",\n\t\"./bm.js\": \"a7fa\",\n\t\"./bn\": \"9043\",\n\t\"./bn.js\": \"9043\",\n\t\"./bo\": \"d26a\",\n\t\"./bo.js\": \"d26a\",\n\t\"./br\": \"6887\",\n\t\"./br.js\": \"6887\",\n\t\"./bs\": \"2554\",\n\t\"./bs.js\": \"2554\",\n\t\"./ca\": \"d716\",\n\t\"./ca.js\": \"d716\",\n\t\"./cs\": \"3c0d\",\n\t\"./cs.js\": \"3c0d\",\n\t\"./cv\": \"03ec\",\n\t\"./cv.js\": \"03ec\",\n\t\"./cy\": \"9797\",\n\t\"./cy.js\": \"9797\",\n\t\"./da\": \"0f14\",\n\t\"./da.js\": \"0f14\",\n\t\"./de\": \"b469\",\n\t\"./de-at\": \"b3eb\",\n\t\"./de-at.js\": \"b3eb\",\n\t\"./de-ch\": \"bb71\",\n\t\"./de-ch.js\": \"bb71\",\n\t\"./de.js\": \"b469\",\n\t\"./dv\": \"598a\",\n\t\"./dv.js\": \"598a\",\n\t\"./el\": \"8d47\",\n\t\"./el.js\": \"8d47\",\n\t\"./en-au\": \"0e6b\",\n\t\"./en-au.js\": \"0e6b\",\n\t\"./en-ca\": \"3886\",\n\t\"./en-ca.js\": \"3886\",\n\t\"./en-gb\": \"39a6\",\n\t\"./en-gb.js\": \"39a6\",\n\t\"./en-ie\": \"e1d3\",\n\t\"./en-ie.js\": \"e1d3\",\n\t\"./en-il\": \"7333\",\n\t\"./en-il.js\": \"7333\",\n\t\"./en-in\": \"ec2e\",\n\t\"./en-in.js\": \"ec2e\",\n\t\"./en-nz\": \"6f50\",\n\t\"./en-nz.js\": \"6f50\",\n\t\"./en-sg\": \"b7e9\",\n\t\"./en-sg.js\": \"b7e9\",\n\t\"./eo\": \"65db\",\n\t\"./eo.js\": \"65db\",\n\t\"./es\": \"898b\",\n\t\"./es-do\": \"0a3c\",\n\t\"./es-do.js\": \"0a3c\",\n\t\"./es-us\": \"55c9\",\n\t\"./es-us.js\": \"55c9\",\n\t\"./es.js\": \"898b\",\n\t\"./et\": \"ec18\",\n\t\"./et.js\": \"ec18\",\n\t\"./eu\": \"0ff2\",\n\t\"./eu.js\": \"0ff2\",\n\t\"./fa\": \"8df4\",\n\t\"./fa.js\": \"8df4\",\n\t\"./fi\": \"81e9\",\n\t\"./fi.js\": \"81e9\",\n\t\"./fil\": \"d69a\",\n\t\"./fil.js\": \"d69a\",\n\t\"./fo\": \"0721\",\n\t\"./fo.js\": \"0721\",\n\t\"./fr\": \"9f26\",\n\t\"./fr-ca\": \"d9f8\",\n\t\"./fr-ca.js\": \"d9f8\",\n\t\"./fr-ch\": \"0e49\",\n\t\"./fr-ch.js\": \"0e49\",\n\t\"./fr.js\": \"9f26\",\n\t\"./fy\": \"7118\",\n\t\"./fy.js\": \"7118\",\n\t\"./ga\": \"5120\",\n\t\"./ga.js\": \"5120\",\n\t\"./gd\": \"f6b4\",\n\t\"./gd.js\": \"f6b4\",\n\t\"./gl\": \"8840\",\n\t\"./gl.js\": \"8840\",\n\t\"./gom-deva\": \"aaf2\",\n\t\"./gom-deva.js\": \"aaf2\",\n\t\"./gom-latn\": \"0caa\",\n\t\"./gom-latn.js\": \"0caa\",\n\t\"./gu\": \"e0c5\",\n\t\"./gu.js\": \"e0c5\",\n\t\"./he\": \"c7aa\",\n\t\"./he.js\": \"c7aa\",\n\t\"./hi\": \"dc4d\",\n\t\"./hi.js\": \"dc4d\",\n\t\"./hr\": \"4ba9\",\n\t\"./hr.js\": \"4ba9\",\n\t\"./hu\": \"5b14\",\n\t\"./hu.js\": \"5b14\",\n\t\"./hy-am\": \"d6b6\",\n\t\"./hy-am.js\": \"d6b6\",\n\t\"./id\": \"5038\",\n\t\"./id.js\": \"5038\",\n\t\"./is\": \"0558\",\n\t\"./is.js\": \"0558\",\n\t\"./it\": \"6e98\",\n\t\"./it-ch\": \"6f12\",\n\t\"./it-ch.js\": \"6f12\",\n\t\"./it.js\": \"6e98\",\n\t\"./ja\": \"079e\",\n\t\"./ja.js\": \"079e\",\n\t\"./jv\": \"b540\",\n\t\"./jv.js\": \"b540\",\n\t\"./ka\": \"201b\",\n\t\"./ka.js\": \"201b\",\n\t\"./kk\": \"6d79\",\n\t\"./kk.js\": \"6d79\",\n\t\"./km\": \"e81d\",\n\t\"./km.js\": \"e81d\",\n\t\"./kn\": \"3e92\",\n\t\"./kn.js\": \"3e92\",\n\t\"./ko\": \"22f8\",\n\t\"./ko.js\": \"22f8\",\n\t\"./ku\": \"2421\",\n\t\"./ku.js\": \"2421\",\n\t\"./ky\": \"9609\",\n\t\"./ky.js\": \"9609\",\n\t\"./lb\": \"440c\",\n\t\"./lb.js\": \"440c\",\n\t\"./lo\": \"b29d\",\n\t\"./lo.js\": \"b29d\",\n\t\"./lt\": \"26f9\",\n\t\"./lt.js\": \"26f9\",\n\t\"./lv\": \"b97c\",\n\t\"./lv.js\": \"b97c\",\n\t\"./me\": \"293c\",\n\t\"./me.js\": \"293c\",\n\t\"./mi\": \"688b\",\n\t\"./mi.js\": \"688b\",\n\t\"./mk\": \"6909\",\n\t\"./mk.js\": \"6909\",\n\t\"./ml\": \"02fb\",\n\t\"./ml.js\": \"02fb\",\n\t\"./mn\": \"958b\",\n\t\"./mn.js\": \"958b\",\n\t\"./mr\": \"39bd\",\n\t\"./mr.js\": \"39bd\",\n\t\"./ms\": \"ebe4\",\n\t\"./ms-my\": \"6403\",\n\t\"./ms-my.js\": \"6403\",\n\t\"./ms.js\": \"ebe4\",\n\t\"./mt\": \"1b45\",\n\t\"./mt.js\": \"1b45\",\n\t\"./my\": \"8689\",\n\t\"./my.js\": \"8689\",\n\t\"./nb\": \"6ce3\",\n\t\"./nb.js\": \"6ce3\",\n\t\"./ne\": \"3a39\",\n\t\"./ne.js\": \"3a39\",\n\t\"./nl\": \"facd\",\n\t\"./nl-be\": \"db29\",\n\t\"./nl-be.js\": \"db29\",\n\t\"./nl.js\": \"facd\",\n\t\"./nn\": \"b84c\",\n\t\"./nn.js\": \"b84c\",\n\t\"./oc-lnc\": \"167b\",\n\t\"./oc-lnc.js\": \"167b\",\n\t\"./pa-in\": \"f3ff\",\n\t\"./pa-in.js\": \"f3ff\",\n\t\"./pl\": \"8d57\",\n\t\"./pl.js\": \"8d57\",\n\t\"./pt\": \"f260\",\n\t\"./pt-br\": \"d2d4\",\n\t\"./pt-br.js\": \"d2d4\",\n\t\"./pt.js\": \"f260\",\n\t\"./ro\": \"972c\",\n\t\"./ro.js\": \"972c\",\n\t\"./ru\": \"957c\",\n\t\"./ru.js\": \"957c\",\n\t\"./sd\": \"6784\",\n\t\"./sd.js\": \"6784\",\n\t\"./se\": \"ffff\",\n\t\"./se.js\": \"ffff\",\n\t\"./si\": \"eda5\",\n\t\"./si.js\": \"eda5\",\n\t\"./sk\": \"7be6\",\n\t\"./sk.js\": \"7be6\",\n\t\"./sl\": \"8155\",\n\t\"./sl.js\": \"8155\",\n\t\"./sq\": \"c8f3\",\n\t\"./sq.js\": \"c8f3\",\n\t\"./sr\": \"cf1e\",\n\t\"./sr-cyrl\": \"13e9\",\n\t\"./sr-cyrl.js\": \"13e9\",\n\t\"./sr.js\": \"cf1e\",\n\t\"./ss\": \"52bd\",\n\t\"./ss.js\": \"52bd\",\n\t\"./sv\": \"5fbd\",\n\t\"./sv.js\": \"5fbd\",\n\t\"./sw\": \"74dc\",\n\t\"./sw.js\": \"74dc\",\n\t\"./ta\": \"3de5\",\n\t\"./ta.js\": \"3de5\",\n\t\"./te\": \"5cbb\",\n\t\"./te.js\": \"5cbb\",\n\t\"./tet\": \"576c\",\n\t\"./tet.js\": \"576c\",\n\t\"./tg\": \"3b1b\",\n\t\"./tg.js\": \"3b1b\",\n\t\"./th\": \"10e8\",\n\t\"./th.js\": \"10e8\",\n\t\"./tl-ph\": \"0f38\",\n\t\"./tl-ph.js\": \"0f38\",\n\t\"./tlh\": \"cf75\",\n\t\"./tlh.js\": \"cf75\",\n\t\"./tr\": \"0e81\",\n\t\"./tr.js\": \"0e81\",\n\t\"./tzl\": \"cf51\",\n\t\"./tzl.js\": \"cf51\",\n\t\"./tzm\": \"c109\",\n\t\"./tzm-latn\": \"b53d\",\n\t\"./tzm-latn.js\": \"b53d\",\n\t\"./tzm.js\": \"c109\",\n\t\"./ug-cn\": \"6117\",\n\t\"./ug-cn.js\": \"6117\",\n\t\"./uk\": \"ada2\",\n\t\"./uk.js\": \"ada2\",\n\t\"./ur\": \"5294\",\n\t\"./ur.js\": \"5294\",\n\t\"./uz\": \"2e8c\",\n\t\"./uz-latn\": \"010e\",\n\t\"./uz-latn.js\": \"010e\",\n\t\"./uz.js\": \"2e8c\",\n\t\"./vi\": \"2921\",\n\t\"./vi.js\": \"2921\",\n\t\"./x-pseudo\": \"fd7e\",\n\t\"./x-pseudo.js\": \"fd7e\",\n\t\"./yo\": \"7f33\",\n\t\"./yo.js\": \"7f33\",\n\t\"./zh-cn\": \"5c3a\",\n\t\"./zh-cn.js\": \"5c3a\",\n\t\"./zh-hk\": \"49ab\",\n\t\"./zh-hk.js\": \"49ab\",\n\t\"./zh-mo\": \"3a6c\",\n\t\"./zh-mo.js\": \"3a6c\",\n\t\"./zh-tw\": \"90ea\",\n\t\"./zh-tw.js\": \"90ea\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"4678\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view',{attrs:{\"name\":\"header\"}}),_c('main',[_c('fade-transition',{attrs:{\"origin\":\"center\",\"mode\":\"out-in\",\"duration\":250}},[_c('router-view')],1)],1),_c('router-view',{attrs:{\"name\":\"footer\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div id=\"app\">\r\n        <router-view name=\"header\"></router-view>\r\n        <main>\r\n            <fade-transition origin=\"center\" mode=\"out-in\" :duration=\"250\">\r\n                <router-view/>\r\n            </fade-transition>\r\n        </main>\r\n        <router-view name=\"footer\"></router-view>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { FadeTransition } from \"vue2-transitions\";\r\n\r\nexport default {\r\n  components: {\r\n    FadeTransition\r\n  },\r\n    watch:{\r\n        '$route' (to, from) {\r\n            document.title = to.meta.title\r\n        }\r\n    }\r\n};\r\n</script>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=7144a742&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"mt-150 dashboard\"},[_c('section',[_c('div',{staticClass:\"container dashContainer\"},[_c('div',{staticClass:\"row tile_count col-md-12 \"},_vm._l((_vm.categories),function(category,x){return (_vm.isCategoryToShow(x))?_c('div',{key:x,staticClass:\"col-lg-2 col-md-4 col-sm-4 col-xs-6 top_stat\"},[_c('TopStat',{attrs:{\"value\":_vm.getValue(category.data),\"label\":_vm.getLable(x),\"number\":_vm.getNumber(category),\"diff\":parseFloat(category.diff)}})],1):_vm._e()}),0)])]),_c('section',[_c('div',{staticClass:\"container dashContainer\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-4 col-md-12 col-sm-12\"},[_c('div',{staticClass:\"x_panel\"},[_c('ProgressChart',{attrs:{\"value\":_vm.getPercent(_vm.getNumber(_vm.categories.ICU), _vm.ICU_bed_cap),\"title\":\"Lits de soins intensifs occupés\",\"subtitle\":\"pourcentage de lits actuellement occupés\",\"number\":_vm.getNumber(_vm.categories.ICU)}})],1),_c('div',{staticClass:\"x_panel\"},[_c('ProgressChart',{attrs:{\"value\":_vm.getPercent(_vm.getNumber(_vm.categories.hospitalized), _vm.hospital_bed_cap),\"title\":\"Lits d'hôpitaux occupés\",\"subtitle\":\"pourcentage de lits actuellement occupés\",\"number\":_vm.getNumber(_vm.categories.hospitalized)}})],1),_c('div',{staticClass:\"x_panel\"},[_c('div',{staticClass:\"x_title\"},[_c('h2',[_vm._v(\"Répartition par genre\")]),_c('ul',{staticClass:\"nav navbar-right panel_toolbox\"},[_c('li',[_c('a',{staticClass:\"collapse-link\",on:{\"click\":_vm.togglePanel}},[_c('i',{staticClass:\"fa fa-chevron-up\"})])])]),_c('div',{staticClass:\"clearfix\"})]),_c('div',{staticClass:\"x_content\"},[_c('DoughnutChart',{staticStyle:{\"height\":\"300px\"}})],1)])]),_c('div',{staticClass:\"col-lg-8 col-md-12 col-sm-12\"},[_c('div',{staticClass:\"x_panel\"},[_c('div',{staticClass:\"x_title\"},[_vm._m(0),_c('ul',{staticClass:\"nav navbar-right panel_toolbox\"},[_c('li',[_c('a',{staticClass:\"collapse-link\",on:{\"click\":_vm.togglePanel}},[_c('i',{staticClass:\"fa fa-chevron-up\"})])])]),_c('div',{staticClass:\"clearfix\"})]),_c('div',{staticClass:\"x_content\"},[_c('div',{staticClass:\"row\"},[_c('Map',{staticClass:\"col-md-6 col-sm-8 col-xs-12\",attrs:{\"id\":\"rss_map\",\"data\":_vm.regionData.case.regions}}),_c('div',{staticClass:\"col-md-6 col-sm-8 col-xs-12 hidden-small\"},[_c('h3',{staticClass:\"regionTable_title\"},[_vm._v(\" Régions principales\")]),_c('regionTable',{staticClass:\"regions_list\",attrs:{\"data\":_vm.regionData}}),_c('span',{attrs:{\"id\":\"total_note\"}},[_vm._v(\"Le total des cas confirmés du Québec ne correspond pas toujours à la somme des cas dans les RSS puisque la région sociosanitaire est parfois inconnue ou que certaines personnes non résidentes ont été testées au Québec.\")])],1)],1)])])])])])]),_c('section',[_c('div',{staticClass:\"container dashContainer\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-12 col-md-12 col-sm-12\"},[_c('div',{staticClass:\"x_panel\"},[_c('div',{staticClass:\"x_title row\"},[_vm._m(1),_c('div',{staticClass:\"col-md-6\",staticStyle:{\"text-align\":\"right\"}},[_c('DateRangePicker',{attrs:{\"range\":_vm.dateRange}})],1)]),_c('Flot',{attrs:{\"value\":_vm.categories}})],1)])])])]),_c('section',[_c('div',{staticClass:\"container dashContainer\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-4 col-md-6 col-sm-12\"},[_c('div',{staticClass:\"x_panel\"},[_c('div',{staticClass:\"x_title\"},[_c('h2',[_vm._v(\"Distribution of confirmed cases by age group\")]),_c('ul',{staticClass:\"nav navbar-right panel_toolbox\"},[_c('li',[_c('a',{staticClass:\"collapse-link\",on:{\"click\":_vm.togglePanel}},[_c('i',{staticClass:\"fa fa-chevron-up\"})])])]),_c('div',{staticClass:\"clearfix\"})]),_c('div',{staticClass:\"x_content\"},[_c('PieChart',{staticStyle:{\"height\":\"400px\"},attrs:{\"value\":_vm.gender}})],1)])])])])]),_c('div',{staticStyle:{\"position\":\"absolute\",\"display\":\"none\",\"border\":\"1px solid #888888\",\"padding\":\"2px\",\"background-color\":\"#ffffff\",\"opacity\":\"0.8\"},attrs:{\"id\":\"plot_tooltip\"}})])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h2',[_vm._v(\"Localisation des cas \"),_c('small',[_vm._v(\"par RSS\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"col-md-6\"},[_c('h2',[_vm._v(\"Progression des cas\")])])}]\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"tile_stats_count  x_panel\"},[_c('div',{staticClass:\"numberStats\"},[_c('span',{staticClass:\"count_top\"},[_vm._v(_vm._s(_vm.label))]),_c('div',{staticClass:\"count\"},[_vm._v(_vm._s(_vm.numberFormat(_vm.number)))]),_c('span',{staticClass:\"count_bottom\"},[_c('i',{class:_vm.getArrowClass(_vm.diff)}),_c('span',{class:_vm.getClass(_vm.diff)},[_vm._v(_vm._s(_vm.diff)+\"%\")]),_vm._v(\" Depuis hier\")])]),_c('v-sparkline',{attrs:{\"value\":_vm.value,\"gradient\":_vm.gradient,\"smooth\":_vm.radius || false,\"padding\":_vm.padding,\"line-width\":_vm.width,\"stroke-linecap\":_vm.lineCap,\"gradient-direction\":_vm.gradientDirection,\"fill\":_vm.fill,\"type\":_vm.type,\"auto-line-width\":_vm.autoLineWidth,\"auto-draw\":\"\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","const numberFormat = function(num){\r\n    if(num!==\"\")\r\n        return  new Intl.NumberFormat().format(num);\r\n    else\r\n        return \"-\";\r\n};\r\n\r\nexport default {\r\n    numberFormat: numberFormat\r\n}","<template>\r\n        <div class=\"tile_stats_count  x_panel\">\r\n            <div class=\"numberStats\">\r\n                <span class=\"count_top\">{{label}}</span>\r\n                <div class=\"count\">{{numberFormat(number)}}</div>\r\n                <span class=\"count_bottom\"><i v-bind:class=\"getArrowClass(diff)\"></i><span v-bind:class=\"getClass(diff)\">{{diff}}%</span> Depuis hier</span>\r\n            </div>\r\n            <v-sparkline\r\n                    :value=\"value\"\r\n                    :gradient=\"gradient\"\r\n                    :smooth=\"radius || false\"\r\n                    :padding=\"padding\"\r\n                    :line-width=\"width\"\r\n                    :stroke-linecap=\"lineCap\"\r\n                    :gradient-direction=\"gradientDirection\"\r\n                    :fill=\"fill\"\r\n                    :type=\"type\"\r\n                    :auto-line-width=\"autoLineWidth\"\r\n                    auto-draw\r\n            ></v-sparkline>\r\n        </div>\r\n</template>\r\n\r\n<script>\r\n    import Vuetify from \"vuetify\";\r\n    import base from '@/base.js';\r\n\r\n    const gradients = [\r\n        ['#525f7f'],\r\n        ['#42b3f4'],\r\n        ['red', 'orange', 'yellow'],\r\n        ['purple', 'violet'],\r\n        ['#00c6ff', '#F0F', '#FF0'],\r\n        ['#f72047', '#ffd200', '#1feaea'],\r\n    ];\r\n    export default {\r\n        name: \"TopStat\",\r\n        vuetify: new Vuetify(),\r\n        props:{\r\n            value:{\r\n              type: Array\r\n          },\r\n            label:{\r\n              type: String\r\n            },\r\n            diff:{\r\n                type: Number\r\n            },\r\n            number:{\r\n                type: Number\r\n            }\r\n        },\r\n        data(){\r\n            return {\r\n                numberFormat: base.numberFormat,\r\n                width: 2,\r\n                radius: 10,\r\n                padding: 8,\r\n                lineCap: 'round',\r\n                gradient: gradients[0],\r\n                gradientDirection: 'top',\r\n                fill: false,\r\n                type: 'trend',\r\n                autoLineWidth: false};\r\n        },\r\n        methods:{\r\n            getClass(num){\r\n                if(num<0){\r\n                    if(this.label === 'Tests effectués' || this.label === 'Tests effectués')\r\n                        return 'asc';\r\n                    else\r\n                        return 'desc';\r\n                }\r\n                else if(num>0){\r\n                    if(this.label === 'Tests effectués' || this.label === 'Tests effectués')\r\n                        return 'desc';\r\n                    else return 'asc';\r\n                }\r\n            },\r\n            getArrowClass(num){\r\n                if(num<0){\r\n                    if(this.label === 'Tests effectués' || this.label === 'Tests effectués')\r\n                        return 'fa fa-sort-asc asc';\r\n                    else\r\n                        return 'fa fa-sort-desc desc';\r\n                }\r\n                else if(num>0){\r\n                    if(this.label === 'Tests effectués' || this.label === 'Tests effectués')\r\n                        return 'fa fa-sort-desc desc';\r\n                    else return 'fa fa-sort-asc asc';\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TopStat.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TopStat.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TopStat.vue?vue&type=template&id=22f866ec&scoped=true&\"\nimport script from \"./TopStat.vue?vue&type=script&lang=js&\"\nexport * from \"./TopStat.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"22f866ec\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"map-container\"},[_c('div',{staticClass:\"jvmap-smart\",staticStyle:{\"height\":\"600px\"},attrs:{\"id\":\"rss-map\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"map-container\">\r\n        <div id=\"rss-map\" style=\"height:600px\" class=\"jvmap-smart\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import base from '@/base.js';\r\n\r\n    window.jQuery = require('jquery');\r\n    var $ = window.jQuery;\r\n    require('jvectormap');\r\n\r\n    export default {\r\n        name: \"Map\",\r\n        data(){\r\n          return{\r\n              numberFormat: base.numberFormat\r\n          }\r\n        },\r\n        props:{\r\n            data:{\r\n                type: Object\r\n            }\r\n        },\r\n        mounted(){\r\n            this.drawMap();\r\n        },\r\n        methods:{\r\n            drawMap(){\r\n                let _this=this;\r\n                $('#rss-map').empty();\r\n                var map;\r\n                map = $('#rss-map').vectorMap({\r\n                    map: 'rss',\r\n                    backgroundColor: null,\r\n                    regionsSelectable: true,\r\n                    regionStyle: {\r\n                        hover:{\r\n                            fill: \"#eaf651\"\r\n                        },\r\n                        selected: {\r\n                            fill: '#eaf651'\r\n                        }\r\n                    },\r\n                    series: {\r\n                        regions: [{\r\n                            values: this.data,\r\n                            scale: ['#FDEDEC ', '#CB4335'],\r\n                            normalizeFunction: 'polynomial',\r\n                            legend: {\r\n                                vertical: true\r\n                            }\r\n                        }]\r\n                    },\r\n                    onRegionClick: function(e, code){\r\n                        var map = $(\"#rss-map\").vectorMap(\"get\", \"mapObject\");\r\n                        if(map.getSelectedRegions().indexOf(code)<0)\r\n                            map.clearSelectedRegions();\r\n                    },\r\n                    onRegionSelected: function(e, code){\r\n                        var map = $(\"#rss-map\").vectorMap(\"get\", \"mapObject\");\r\n                        if(map.getSelectedRegions().indexOf(code)<0)\r\n                            $(\"#mchi_region_\"+code+\" *\").css('font-weight','').css(\"color\",\"\");\r\n                        else\r\n                            $(\"#mchi_region_\"+code+\" *\").css('font-weight','bold').css(\"color\",\"#2A3F54\");\r\n                    },\r\n                    onRegionOver: function(e, code) {\r\n                        $(\"#mchi_region_\" + code + \" *\").css('font-weight', 'bold').css(\"color\",\"#2A3F54\");\r\n                    },\r\n                    onRegionOut: function(e, code) {\r\n                        var map = $(\"#rss-map\").vectorMap(\"get\", \"mapObject\");\r\n                        if(map.getSelectedRegions().indexOf(code)<0)\r\n                            $(\"#mchi_region_\" + code + \" *\").css('font-weight', '').css(\"color\",\"\");\r\n                    },\r\n                    onRegionTipShow: function(e, el, code){\r\n                        el.html(el.html()+' ('+base.numberFormat(_this.data[code])+' cas)');\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        watch:{\r\n            data:function(){\r\n                this.drawMap()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=c9a4d5ba&\"\nimport script from \"./Map.vue?vue&type=script&lang=js&\"\nexport * from \"./Map.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('table',[_c('tbody',[_vm._m(0),_vm._l((Object.keys(_vm.data.case.regions).sort()),function(region,x){return _c('tr',{key:x,staticClass:\"region_elem\",attrs:{\"id\":'mchi_region_'+region},on:{\"mouseover\":function($event){return _vm.mouseOver(region)},\"mouseout\":function($event){return _vm.mouseOut(region)}}},[_c('td',[_vm._v(_vm._s(_vm.regionList[region].name))]),_c('td',[_vm._v(_vm._s(_vm.numberFormat(_vm.data.case.regions[region])))]),_c('td',[_vm._v(_vm._s(_vm.numberFormat(_vm.data.death.regions[region])))])])}),_c('tr',[_c('th',[_vm._v(\"Ensemble du Québec\")]),_c('th',[_vm._v(_vm._s(_vm.numberFormat(_vm.data.case.total)))]),_c('th',[_vm._v(_vm._s(_vm.numberFormat(_vm.data.death.total)))])])],2)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('tr',[_c('th',[_vm._v(\"Région\")]),_c('th',[_vm._v(\"Confirmé\")]),_c('th',[_vm._v(\"Décès\")])])}]\n\nexport { render, staticRenderFns }","const categoryStatsToShow = ['confirmed', 'death', 'recovered', 'hospitalized', 'ICU', 'tested'];\r\n\r\nconst labels = {\r\n        'confirmed': 'Nombre cas',\r\n        'active': 'Cas actif',\r\n        'new_cases': 'Nouveaux cas',\r\n        'death': 'Décès',\r\n        'new_death': 'Nouveaux décès',\r\n        'recovered': 'Rétablis',\r\n        'hospitalized': 'Hospitalisés',\r\n        'ICU': 'Soin intensif',\r\n        'tested': 'Tests effectués',\r\n        'new_tested': 'Nouveaux testé'\r\n    };\r\n\r\nconst categoryFlotToShow = ['confirmed','new_cases','active', 'death', 'new_death', 'hospitalized', 'tested', 'new_tested'];\r\n\r\nconst regionList = {\r\n    \"01\":{name:\"Bas Saint Laurent\",population:197322,population_65_plus:51121},\r\n    \"02\":{name:\"Saguenay Lac Saint Jean\",population: 277796,population_65_plus:63514},\r\n    \"03\":{name:\"Capitale Nationale\",population: 750645,population_65_plus:159777},\r\n    \"04\":{name:\"Mauricie et Centre du Québec\",population:520285,population_65_plus:68424},\r\n    \"05\":{name:\"Estrie\",population: 328998,population_65_plus:72969},\r\n    \"06\":{name:\"Montréal\",population: 2052910,population_65_plus:336632},\r\n    \"07\":{name:\"Outaouais\",population:397193,population_65_plus:65427},\r\n    \"08\":{name:\"Abitibi Témiscamingue\",population:147542,population_65_plus:28405},\r\n    \"09\":{name:\"Côte Nord\",population:90704,population_65_plus:17756},\r\n    \"10\":{name:\"Nord du Québec\",population:13633,population_65_plus:2126},\r\n    \"11\":{name:\"Gaspésie Îles de la Madeleine\",population: 90334,population_65_plus:24881},\r\n    \"12\":{name:\"Chaudière Appalaches\",population: 428618,population_65_plus:93816},\r\n    \"13\":{name:\"Laval\",population: 438973,population_65_plus:77500},\r\n    \"14\":{name:\"Lanaudière\",population:515448,population_65_plus:95572},\r\n    \"15\":{name:\"Laurentides\",population: 620294,population_65_plus:117426},\r\n    \"16\":{name:\"Montérégie\",population:1582067,population_65_plus:302536},\r\n    \"17\":{name:\"Nunavik\",population:14102,population_65_plus:625},\r\n    \"18\":{name:\"Terres Cries de la Baie James\",population: 18131,population_65_plus:1110},\r\n};\r\n\r\nconst __maximum_bed_capacity  = 15700;\r\nconst __maximum_UCI_capacity  = 1000;\r\n\r\nconst gender = {\r\n    '0-9 ans':      1629,\r\n    '10-19 ans':\t2490,\r\n    '20-29 ans':\t6967,\r\n    '30-39 ans':\t7030,\r\n    '40-49 ans':\t8308,\r\n    '50-59 ans':\t8028,\r\n    '60-69 ans':\t4930,\r\n    '70-79 ans':\t4263,\r\n    '80-89 ans':\t6552,\r\n    '90 ans et plus':\t4613\r\n};\r\n\r\nexport default {\r\n    categoryStatsToShow: categoryStatsToShow,\r\n    categoryFlotToShow: categoryFlotToShow,\r\n    labels: labels,\r\n    regionList: regionList,\r\n    hospital_bed_cap: __maximum_bed_capacity,\r\n    ICU_bed_cap: __maximum_UCI_capacity,\r\n    gender: gender\r\n}","<template>\r\n    <table>\r\n        <tbody>\r\n        <tr>\r\n            <th>Région</th>\r\n            <th>Confirmé</th>\r\n            <th>Décès</th>\r\n        </tr>\r\n        <tr class=\"region_elem\" v-for=\"(region, x) in Object.keys(data.case.regions).sort()\" v-bind:key = \"x\" v-bind:id=\"'mchi_region_'+region\" @mouseover=\"mouseOver(region)\" @mouseout=\"mouseOut(region)\">\r\n            <td>{{regionList[region].name}}</td>\r\n            <td>{{numberFormat(data.case.regions[region])}}</td>\r\n            <td>{{numberFormat(data.death.regions[region])}}</td>\r\n        </tr>\r\n        <tr>\r\n            <th>Ensemble du Québec</th>\r\n            <th>{{numberFormat(data.case.total)}}</th>\r\n            <th>{{numberFormat(data.death.total)}}</th>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n</template>\r\n\r\n<script>\r\n    import cst from '@/const.js';\r\n    import base from '@/base.js';\r\n    window.jQuery = require('jquery');\r\n    var $ = window.jQuery;\r\n    require('jvectormap');\r\n\r\n    export default {\r\n        name: \"RegionTable\",\r\n        data(){\r\n            return{\r\n                regionList: cst.regionList,\r\n                numberFormat: base.numberFormat\r\n            }\r\n        },\r\n        props: {\r\n            data:{\r\n                type: Object\r\n            }\r\n        },\r\n        methods:{\r\n            mouseOver(code){\r\n                    var mapObj = $('#rss-map').vectorMap('get', 'mapObject');\r\n                    mapObj.regions[code].element.setHovered(true);\r\n\r\n            },\r\n            mouseOut(code){\r\n                var mapObj = $('#rss-map').vectorMap('get', 'mapObject');\r\n                mapObj.regions[code].element.setHovered(false);\r\n\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    table{\r\n        width: 100%;\r\n        font-size: 13px;\r\n    }\r\n    th, td{\r\n        padding: 0 10px;\r\n        line-height: 30px;\r\n        border-top: 1px solid #eeeeee;\r\n    }\r\n    .region_elem{\r\n        cursor: pointer;\r\n    }\r\n    .region_elem:hover{\r\n        font-weight: bold;\r\n    }\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RegionTable.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RegionTable.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RegionTable.vue?vue&type=template&id=337d4293&scoped=true&\"\nimport script from \"./RegionTable.vue?vue&type=script&lang=js&\"\nexport * from \"./RegionTable.vue?vue&type=script&lang=js&\"\nimport style0 from \"./RegionTable.vue?vue&type=style&index=0&id=337d4293&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"337d4293\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-4 col-md-4 col-sm-4 col-xs-12\",staticStyle:{\"text-align\":\"center\"}},[_c('v-progress-circular',{attrs:{\"rotate\":-90,\"size\":130,\"width\":20,\"value\":_vm.value,\"color\":\"#E74C3C\"}},[_vm._v(_vm._s(_vm.value+\"%\"))])],1),_c('div',{staticClass:\"col-lg-8 col-md-8 col-sm-8 col-xs-12\"},[_c('p',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.title))]),_c('span',[_vm._v(_vm._s(_vm.subtitle))]),_c('div',{staticClass:\"caseNumber\"},[_c('p',[_c('span',{staticClass:\"caseNumber\"},[_vm._v(_vm._s(_vm.numberFormat(_vm.number)))]),_vm._v(\" cas\")])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\" style=\"text-align: center\">\r\n            <v-progress-circular\r\n                :rotate=\"-90\"\r\n                :size=\"130\"\r\n                :width=\"20\"\r\n                :value=\"value\"\r\n                color=\"#E74C3C\"\r\n            >{{value+\"%\"}}</v-progress-circular>\r\n        </div>\r\n        <div class=\"col-lg-8 col-md-8 col-sm-8 col-xs-12\">\r\n            <p class=\"title\">{{title}}</p>\r\n            <span>{{subtitle}}</span>\r\n            <div class=\"caseNumber\">\r\n                <p><span class=\"caseNumber\">{{numberFormat(number)}}</span> cas</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import Vuetify from \"vuetify\";\r\n    import base from \"@/base.js\";\r\n\r\n    export default {\r\n        name: \"ProgressChart\",\r\n        data(){\r\n            return{\r\n                numberFormat: base.numberFormat,\r\n            }\r\n        },\r\n        vuetify: new Vuetify(),\r\n        props:{\r\n            value:{\r\n                type:Number\r\n            },\r\n            title: {\r\n                type: String,\r\n                default: \"\",\r\n                description: \"Title of progressBar\"\r\n            },\r\n            subtitle: {\r\n                type: String,\r\n                default: \"\",\r\n                description: \"Subitle of progressBar\"\r\n            },\r\n            number: {\r\n                type: Number\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .title{\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    }\r\n    .caseNumber *{\r\n        text-align: center;\r\n        font-size: 24px;\r\n        font-weight: bold;\r\n    }\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ProgressChart.vue?vue&type=template&id=7f0a3666&scoped=true&\"\nimport script from \"./ProgressChart.vue?vue&type=script&lang=js&\"\nexport * from \"./ProgressChart.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ProgressChart.vue?vue&type=style&index=0&id=7f0a3666&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7f0a3666\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"row\"},[_vm._m(0),_c('div',{staticClass:\"col-md-3 col-sm-3 col-xs-12\"},[_c('div',{staticClass:\"x_title\"},[_vm._v(\"Les Données\")]),_c('ul',{attrs:{\"id\":\"ToggleController\"}},_vm._l((_vm.value),function(category,x){return (_vm.isCategoryToShow(x))?_c('li',{key:x},[_c('label',{staticClass:\"checkbox-button\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.checkedCategories),expression:\"checkedCategories\"}],staticClass:\"checkbox-button__input\",attrs:{\"id\":x,\"type\":\"checkbox\",\"checked\":\"checked\"},domProps:{\"value\":x,\"checked\":Array.isArray(_vm.checkedCategories)?_vm._i(_vm.checkedCategories,x)>-1:(_vm.checkedCategories)},on:{\"change\":function($event){var $$a=_vm.checkedCategories,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=x,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.checkedCategories=$$a.concat([$$v]))}else{$$i>-1&&(_vm.checkedCategories=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.checkedCategories=$$c}}}}),_c('span',{staticClass:\"checkbox-button__control\"}),_c('span',{staticClass:\"checkbox-button__label\"},[_vm._v(_vm._s(_vm.getLabel(x)))])])]):_vm._e()}),0)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"col-md-9 col-sm-9 col-xs-12\"},[_c('div',{attrs:{\"id\":\"flot\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-9 col-sm-9 col-xs-12\">\r\n            <div id=\"flot\" ></div>\r\n        </div>\r\n        <div class=\"col-md-3 col-sm-3 col-xs-12\">\r\n            <div class=\"x_title\">Les Données</div>\r\n            <ul id=\"ToggleController\">\r\n                <li v-for=\"(category, x) in value\" v-if=\"isCategoryToShow(x)\" v-bind:key=\"x\">\r\n                    <label class=\"checkbox-button\">\r\n                        <input v-bind:value=\"x\"  v-bind:id=\"x\" type=\"checkbox\" checked=\"checked\" v-model=\"checkedCategories\" class=\"checkbox-button__input\"/>\r\n                        <span class=\"checkbox-button__control\"></span>\r\n                        <span class=\"checkbox-button__label\">{{getLabel(x)}}</span>\r\n                    </label>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import moment from 'moment';\r\n    import cst from \"@/const.js\";\r\n    import base from \"@/base.js\";\r\n    import { bus } from '@/main.js';\r\n\r\n    window.jQuery = require('jquery');\r\n    var $ = window.jQuery;\r\n\r\n    var daysMap = [],\r\n        dataset = {};\r\n\r\n    var dateRange;\r\n\r\n    var settings = {\r\n        series: {\r\n            shadowSize: 2\r\n        },\r\n        grid: {\r\n            verticalLines: true,\r\n            hoverable: true,\r\n            clickable: true,\r\n            tickColor: \"#d5d5d5\",\r\n            borderWidth: 1,\r\n            color: '#fff',\r\n        },\r\n        xaxis: {\r\n            tickColor: \"rgba(51, 51, 51, 0.06)\",\r\n            mode: \"time\",\r\n            tickSize: [1, \"day\"],\r\n            ticks: daysMap,\r\n            timezone: \"browser\",\r\n            axisLabel: \"Date\",\r\n            axisLabelUseCanvas: true,\r\n            axisLabelFontSizePixels: 10,\r\n            axisLabelFontFamily: 'Verdana, Arial',\r\n            axisLabelPadding: 10\r\n        },\r\n        yaxis: {\r\n            position: \"left\",\r\n            ticks: 8,\r\n            tickColor: \"rgba(51, 51, 51, 0.06)\",\r\n        },\r\n        legend: {\r\n            show:false,\r\n        },\r\n        tooltip: true\r\n    };\r\n\r\n    export default {\r\n        name: \"Flot\",\r\n        props:{\r\n          value:{\r\n              type: Object\r\n          }\r\n        },\r\n        data(){\r\n            return{\r\n                numberFormat: base.numberFormat,\r\n                checkedCategories: [ \"new_cases\", \"active\", \"confirmed\", \"new_death\", \"death\", \"hospitalized\", \"tested\", \"new_tested\"]\r\n            }\r\n        },\r\n        mounted(){\r\n            this.processData(this.value);\r\n            this.toggleSerie();\r\n        },\r\n        created(){\r\n            bus.$on('updateRange', (range)=>{\r\n                dateRange = range;\r\n                this.processData(this.value);\r\n                this.toggleSerie();\r\n            })\r\n        },\r\n        methods:{\r\n            processData(data){\r\n\r\n                var confirmedData = data.confirmed.data,\r\n                    deathData = data.death.data,\r\n                    newDeathData = data.new_death.data,\r\n                    hospitalizedData = data.hospitalized.data,\r\n                    newData = data.new_cases.data,\r\n                    activeData = data.active.data,\r\n                    testedData = data.tested.data,\r\n                    newTestedData = data.new_tested.data,\r\n\r\n                    confirmed_arr = [],\r\n                    death_arr = [],\r\n                    newDeath_arr = [],\r\n                    hospitalized_arr = [],\r\n                    new_arr = [],\r\n                    active_arr = [],\r\n                    tested_arr = [],\r\n                    newTested_arr = [];\r\n\r\n                for (var day in confirmedData) {\r\n                    if (!dateRange || (new Date(day) >= dateRange.startDate.setHours(0, 0, 0, 0) && new Date(day) <= dateRange.endDate.setHours(0, 0, 0, 0))) {\r\n                    confirmed_arr.push([new Date(day), confirmedData[day]]);\r\n                    death_arr.push([new Date(day), deathData[day]]);\r\n                    newDeath_arr.push([new Date(day), newDeathData[day]]);\r\n                    hospitalized_arr.push([new Date(day), hospitalizedData[day]]);\r\n                    new_arr.push([new Date(day), newData[day]]);\r\n                    active_arr.push([new Date(day), activeData[day]]);\r\n                    tested_arr.push([new Date(day), testedData[day]]);\r\n                    if(newTestedData[day]!==\"\")\r\n                        newTested_arr.push([new Date(day), newTestedData[day]]);\r\n                    }\r\n                    daysMap.push([new Date(day), moment(new Date(day)).format('MMM D')]);\r\n                }\r\n\r\n                var newDeath_avg = this.getAverage(newDeath_arr),\r\n                    new_avg = this.getAverage(new_arr),\r\n                    newTested_avg = this.getAverage(newTested_arr);\r\n\r\n                dataset = {\r\n                    \"confirmed\": {data: confirmed_arr, color:\"#f7a35c\"},\r\n                    \"hospitalized\": {data: hospitalized_arr, color:\"#f45b5b\"},\r\n                    \"death\": {data: death_arr, color: \"#434348\"},\r\n                    \"new_cases\": {data: new_arr, color: \"#1C819a\"},\r\n                    \"new_death\" : {data: newDeath_arr, color:\"#842593\"},\r\n                    \"active\": {data: active_arr, color:\"#c73558\"},\r\n                    \"new_cases avg\":{data: new_avg},\r\n                    \"new_death avg\" : {data: newDeath_avg},\r\n                    \"tested\" : {data: tested_arr, color:\"#9BBB59\"},\r\n                    \"new_tested\" : {data: newTested_arr, color:\"#588B76\"},\r\n                    \"new_tested avg\" : {data: newTested_avg}\r\n                };\r\n\r\n                return dataset;\r\n            },\r\n            isCategoryToShow(category){\r\n                return cst.categoryFlotToShow.indexOf(category) > -1;\r\n            },\r\n            getLabel(category){\r\n                return cst.labels[category];\r\n            },\r\n            toggleSerie(){\r\n                var d = [];\r\n                this.checkedCategories.forEach((category)=>{\r\n\r\n                        d.push({\r\n                            label:cst.labels[category],\r\n                            data: dataset[category].data,\r\n                            color: dataset[category].color,\r\n                            lines: {\r\n                                show: true,\r\n                                fill: 0.4\r\n                            },\r\n                            points: {\r\n                                radius: 2,\r\n                                show: true\r\n                            }});\r\n                        if(dataset[category+\" avg\"])\r\n                            d.push({\r\n                                label:cst.labels[category]+\" moyenne\",\r\n                                data: dataset[category+\" avg\"].data,\r\n                                color: dataset[category].color,\r\n                                dashes: {\r\n                                    show: true,\r\n                                    dashLength: 5\r\n                                },\r\n                                points: {\r\n                                    radius: 1,\r\n                                    show: true\r\n                                }});\r\n\r\n                });\r\n\r\n                $(\"#flot\").bind(\"plothover\", function (event, pos, item) {\r\n                    if (item) {\r\n                        var x = item.datapoint[0].toFixed(2),\r\n                            y = item.datapoint[1];\r\n\r\n                        $('#plot_tooltip').html(item.series.label + \": \" + base.numberFormat(y))\r\n                            .css({top: item.pageY + 5, left: item.pageX + 5})\r\n                            .fadeIn(200)\r\n                    } else {\r\n                        $('#plot_tooltip').hide();\r\n                    }\r\n                });\r\n\r\n\r\n                $.plot($(\"#flot\"), d, settings);\r\n            },\r\n            getAverage(dataArr){\r\n                var resultArr = [];\r\n                var values = dataArr.map(function(a){return a[1]});\r\n\r\n                if(values[0]===\"\")\r\n                    values.shift();\r\n\r\n\r\n                var avg =  (values.reduce(function(p,c){return parseInt(p)+parseInt(c)},0)/Object.values(values).length).toFixed(2);\r\n\r\n                dataArr.forEach(function(d){resultArr.push([d[0], avg])});\r\n                return resultArr;\r\n            }\r\n        },\r\n        watch:{\r\n            value:function(){\r\n                this.processData(this.value);\r\n            },\r\n            checkedCategories: function(){\r\n                this.toggleSerie()\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n#flot{\r\n    height: 400px;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Flot.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Flot.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Flot.vue?vue&type=template&id=044935a2&scoped=true&\"\nimport script from \"./Flot.vue?vue&type=script&lang=js&\"\nexport * from \"./Flot.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Flot.vue?vue&type=style&index=0&id=044935a2&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"044935a2\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('date-range-picker',{attrs:{\"locale-data\":_vm.locale,\"dateRange\":_vm.dateRange,\"opens\":_vm.opens,\"ranges\":_vm.ranges},on:{\"update\":function($event){return _vm.update()}},model:{value:(_vm.dateRange),callback:function ($$v) {_vm.dateRange=$$v},expression:\"dateRange\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <date-range-picker\r\n            @update=\"update()\"\r\n            :locale-data=\"locale\"\r\n            :dateRange=\"dateRange\"\r\n            :opens=\"opens\"\r\n            :ranges=\"ranges\"\r\n            v-model=\"dateRange\"\r\n    >\r\n    </date-range-picker>\r\n</template>\r\n<script>\r\n    import { bus } from '@/main.js';\r\n    import DateRangePicker from 'vue2-daterange-picker';\r\n    import 'vue2-daterange-picker/dist/vue2-daterange-picker.css';\r\n    import moment from 'moment';\r\n\r\n    window.jQuery = require('jquery');\r\n    var $ = window.jQuery;\r\n\r\n    var dateMin, dateMax ;\r\n\r\nexport default {\r\n    components: { DateRangePicker },\r\n    props:{\r\n        range:{\r\n            type: Object\r\n        }\r\n    },\r\n    data(){\r\n        var today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        var week = new Date();\r\n        week.setDate(today.getDate() - 6);\r\n        var month = new Date();\r\n        month.setDate(today.getDate() - 29);\r\n\r\n        var thisMonthStart = new Date(today.getFullYear(), today.getMonth(), 1);\r\n        var thisMonthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);\r\n\r\n        var lastMonthStart = new Date(today.getFullYear(), today.getMonth()-1, 1);\r\n        var lastMonthEnd = new Date(today.getFullYear(), today.getMonth() , 0);\r\n\r\n        dateMin = this.range.dateMin;\r\n        dateMax = this.range.dateMax;\r\n\r\n        return {\r\n            dateRange:{\r\n                startDate: dateMin,\r\n                endDate: dateMax\r\n            },\r\n            opens:\"left\",\r\n            locale: {\r\n                direction: 'ltr', //direction of text\r\n                separator: ' - ', //separator between the two ranges\r\n                applyLabel: 'Soumettre',\r\n                cancelLabel: 'Annuler',\r\n                weekLabel: 'W',\r\n                customRangeLabel: 'Custom Range',\r\n                daysOfWeek: moment.weekdaysMin(), //array of days - see moment documenations for details\r\n                monthNames: moment.monthsShort(), //array of month names - see moment documenations for details\r\n                firstDay: moment.localeData().firstDayOfWeek() //ISO first day of week - see moment documenations for details\r\n            },\r\n            ranges: {\r\n                    'Dernière Jour': [today, today],\r\n                    'Les 7 Dernière Jours': [week,today],\r\n                    'Les 30 Dernière Jours': [month, today],\r\n                    'Ce Mois-ci': [thisMonthStart, today],\r\n                    'Le Mois Dernière': [lastMonthStart, lastMonthEnd],\r\n                    'Tout': [lastMonthStart, today]\r\n                }\r\n        }\r\n    },\r\n    methods:{\r\n        update(){\r\n            console.log(this.dateRange);\r\n            bus.$emit('updateRange', this.dateRange);\r\n        }\r\n    }\r\n\r\n};\r\n</script>\r\n<style>\r\n    .reportrange-text{\r\n        height:100% !important\r\n    }\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DatePickers.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DatePickers.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DatePickers.vue?vue&type=template&id=65ab33ae&\"\nimport script from \"./DatePickers.vue?vue&type=script&lang=js&\"\nexport * from \"./DatePickers.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DatePickers.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-chart',{attrs:{\"options\":_vm.polar}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-chart :options=\"polar\"/>\r\n</template>\r\n\r\n<style>\r\n    /**\r\n     * The default size is 600px×400px, for responsive charts\r\n     * you may need to set percentage values as follows (also\r\n     * don't forget to provide a size for the container).\r\n     */\r\n    .echarts {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    import ECharts from 'vue-echarts'\r\n    import 'echarts/lib/chart/pie'\r\n    import 'echarts/lib/component/polar'\r\n    import 'echarts/lib/chart/funnel'\r\n    import 'echarts/lib/component/tooltip'\r\n    import 'echarts/lib/component/toolbox'\r\n\r\n    export default {\r\n        components: {\r\n            'v-chart': ECharts\r\n        },\r\n        data () {\r\n            return {\r\n                polar:  {\r\n                    tooltip:{\r\n                        trigger:\"item\",\r\n                        formatter:\"{a} <br/>{b} : {c} ({d}%)\"\r\n                    },\r\n                    calculable:!0,\r\n                    legend:{\r\n                        x:\"center\",\r\n                        y:\"bottom\",\r\n                    },\r\n                    color:['#64B5F6','#F06292 '],\r\n                    toolbox:{\r\n                        show:true,\r\n                        feature:{\r\n                            magicType:{\r\n                                show:!0,\r\n                                type:[\"pie\",\"funnel\"],\r\n                                option:{\r\n                                    funnel:{\r\n                                        x:\"25%\",\r\n                                        width:\"50%\",\r\n                                        funnelAlign:\"center\",\r\n                                        max:1000\r\n                                    }\r\n                                }\r\n                            },\r\n                            restore:{\r\n                                show:true,\r\n                                title:\"Restaurer\"\r\n                            },\r\n                            saveAsImage:{\r\n                                show:true,\r\n                                title:\"Enregistrer l'image\"\r\n                            }\r\n                        }\r\n                    },\r\n                    series:[{\r\n                        name:\"Répartition par genre\",\r\n                        type:\"pie\",\r\n                        radius:[\"35%\",\"55%\"],\r\n                        itemStyle:{\r\n                            normal:{\r\n                                label:{\r\n                                    show:!0\r\n                                },\r\n                                labelLine:{\r\n                                    show:!0\r\n                                }\r\n                            },\r\n                            emphasis:{\r\n                                label:{\r\n                                    show:!0,\r\n                                    position:\"center\",\r\n                                    textStyle:{\r\n                                        fontSize:\"14\",\r\n                                        fontWeight:\"normal\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        data:[\r\n                            {value:41,name:\"Hommes\"},\r\n                            {value:59,name:\"Femmes\"}\r\n                        ]          // eventually replace by  // eventually change for JSON.parse(localStorage.getItem('men_women'))\r\n                    }]\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DoughnutChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DoughnutChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DoughnutChart.vue?vue&type=template&id=31a33643&\"\nimport script from \"./DoughnutChart.vue?vue&type=script&lang=js&\"\nexport * from \"./DoughnutChart.vue?vue&type=script&lang=js&\"\nimport style0 from \"./DoughnutChart.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-chart',{attrs:{\"options\":_vm.polar}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-chart :options=\"polar\"/>\r\n</template>\r\n\r\n<script>\r\n    import ECharts from 'vue-echarts'\r\n    import 'echarts/lib/chart/pie'\r\n    import 'echarts/lib/component/polar'\r\n    import 'echarts/lib/chart/funnel'\r\n    import 'echarts/lib/chart/bar'\r\n    import 'echarts/lib/component/tooltip'\r\n    import 'echarts/lib/component/legend'\r\n    import 'echarts/lib/component/toolbox'\r\n    import 'echarts/theme/fruit'\r\n\r\n    var data = [],\r\n        colorTheme = [\r\n            '#6F0000',\r\n            '#800000',\r\n            '#8F0F01',\r\n            '#9B220C',\r\n            '#A53719',\r\n            '#AB4C29',\r\n            '#C37240',\r\n            '#D7985B',\r\n            '#E7BC7A',\r\n            '#F3DAA1',\r\n            '#FBF1CA'];\r\n\r\n    export default {\r\n        components: {\r\n            'v-chart': ECharts\r\n        },\r\n        props:{\r\n          value: {\r\n              type: Object\r\n          }\r\n        },\r\n        created(){\r\n            for(var category in this.value){\r\n                data.push({name: category, value: this.value[category]})\r\n            }\r\n        },\r\n        data () {\r\n            return {\r\n                polar: {\r\n                    tooltip: {\r\n                        trigger: 'item',\r\n                        formatter: '{b} <br/> {c} ({d}%)'\r\n                    },\r\n                    legend: {\r\n                        orient: 'horizontal',\r\n                        bottom: '0',\r\n                        data: Object.keys(this.value)\r\n                    },\r\n                    toolbox:{\r\n                        show:true,\r\n                        feature:{\r\n                            restore:{\r\n                                show:true,\r\n                                title:\"Restaurer\"\r\n                            },\r\n                            saveAsImage:{\r\n                                show:true,\r\n                                title:\"Enregistrer l'image\"\r\n                            }\r\n                        }\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: 'Category',\r\n                            type: 'pie',\r\n                            radius: '55%',\r\n                            center: ['50%', '45%'],\r\n                            data: data,\r\n                            color: colorTheme,\r\n                            emphasis: {\r\n                                itemStyle: {\r\n                                    shadowBlur: 10,\r\n                                    shadowOffsetX: 0,\r\n                                    shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                                }\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n\r\n        }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PieChart.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./PieChart.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PieChart.vue?vue&type=template&id=16bf7184&scoped=true&\"\nimport script from \"./PieChart.vue?vue&type=script&lang=js&\"\nexport * from \"./PieChart.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"16bf7184\",\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <div class=\"mt-150 dashboard\">\r\n    <section>\r\n        <div class=\"container dashContainer\">\r\n        <div class=\"row tile_count col-md-12 \">\r\n            <div class=\"col-lg-2 col-md-4 col-sm-4 col-xs-6 top_stat\" v-for=\"(category, x) in categories\" v-if=\"isCategoryToShow(x)\" v-bind:key=\"x\">\r\n                <TopStat v-bind:value=\"getValue(category.data)\" v-bind:label=\"getLable(x)\" v-bind:number=\"getNumber(category)\"  v-bind:diff=\"parseFloat(category.diff)\"></TopStat>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </section>\r\n        <section>\r\n            <div class=\"container dashContainer\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-4 col-md-12 col-sm-12\">\r\n                        <div class=\"x_panel\">\r\n                            <ProgressChart v-bind:value=\"getPercent(getNumber(categories.ICU), ICU_bed_cap)\" title=\"Lits de soins intensifs occupés\" subtitle=\"pourcentage de lits actuellement occupés\" v-bind:number=\"getNumber(categories.ICU)\"></ProgressChart>\r\n                        </div>\r\n                        <div class=\"x_panel\">\r\n                            <ProgressChart v-bind:value=\"getPercent(getNumber(categories.hospitalized), hospital_bed_cap)\" title=\"Lits d'hôpitaux occupés\" subtitle=\"pourcentage de lits actuellement occupés\" v-bind:number=\"getNumber(categories.hospitalized)\"></ProgressChart>\r\n                        </div>\r\n                        <div class=\"x_panel\">\r\n                            <div class=\"x_title\">\r\n                                <h2>Répartition par genre</h2>\r\n                                <ul class=\"nav navbar-right panel_toolbox\">\r\n                                    <li><a class=\"collapse-link\" v-on:click=\"togglePanel\"><i class=\"fa fa-chevron-up\"></i></a></li>\r\n                                </ul>\r\n                                <div class=\"clearfix\"></div>\r\n                            </div>\r\n                            <div class=\"x_content\">\r\n                                <DoughnutChart style=\"height:300px\"></DoughnutChart>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    <div class=\"col-lg-8 col-md-12 col-sm-12\">\r\n                        <div class=\"x_panel\">\r\n                            <div class=\"x_title\">\r\n                                <h2>Localisation des cas <small>par RSS</small></h2>\r\n                                <ul class=\"nav navbar-right panel_toolbox\">\r\n                                    <li><a class=\"collapse-link\" v-on:click=\"togglePanel\"><i class=\"fa fa-chevron-up\"></i></a></li>\r\n                                </ul>\r\n                                <div class=\"clearfix\"></div>\r\n                            </div>\r\n                            <div class=\"x_content\">\r\n                                <div class=\"row\">\r\n\r\n                                    <Map id=\"rss_map\" :data=\"regionData.case.regions\" class=\"col-md-6 col-sm-8 col-xs-12\"></Map>\r\n\r\n                                    <div class=\"col-md-6 col-sm-8 col-xs-12 hidden-small\">\r\n                                        <h3 class=\"regionTable_title\"> Régions principales</h3>\r\n                                        <regionTable class=\"regions_list\" :data=\"regionData\"></regionTable>\r\n                                        <span id=\"total_note\">Le total des cas confirmés du Québec ne correspond pas toujours à la somme des cas dans les RSS puisque la région sociosanitaire est parfois inconnue ou que certaines personnes non résidentes ont été testées au Québec.</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        <section>\r\n            <div class=\"container dashContainer\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                        <div class=\"x_panel\">\r\n                        <div class=\"x_title row\">\r\n                            <div class=\"col-md-6\">\r\n                                <h2>Progression des cas</h2>\r\n                            </div>\r\n                            <div class=\"col-md-6\" style=\"text-align: right\">\r\n                                <DateRangePicker :range=\"dateRange\"></DateRangePicker>\r\n                            </div>\r\n\r\n                        </div>\r\n                            <Flot :value=\"categories\"></Flot>\r\n                    </div></div>\r\n                </div></div>\r\n        </section>\r\n        <section>\r\n            <div class=\"container dashContainer\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                        <div class=\"x_panel\">\r\n                            <div class=\"x_title\">\r\n                                <h2>Distribution of confirmed cases by age group</h2>\r\n                                <ul class=\"nav navbar-right panel_toolbox\">\r\n                                    <li><a class=\"collapse-link\" v-on:click=\"togglePanel\"><i class=\"fa fa-chevron-up\"></i></a></li>\r\n                                </ul>\r\n                                <div class=\"clearfix\"></div>\r\n                            </div>\r\n                            <div class=\"x_content\">\r\n                                <PieChart style=\"height: 400px\" :value=\"gender\"></PieChart>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        <div id=\"plot_tooltip\" style=\"position: absolute; display: none; border: 1px solid #888888; padding: 2px; background-color: #ffffff; opacity: 0.8;\"></div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import TopStat from \"./components/TopStat\";\r\n    import Map from \"./components/Map\";\r\n    import RegionTable from \"./components/RegionTable\";\r\n    import ProgressChart from \"./components/ProgressChart\";\r\n    import Flot from \"./components/Flot\";\r\n    import DateRangePicker from \"./components/DatePickers\";\r\n    import cst from \"@/const.js\";\r\n    import ECharts from 'vue-echarts'\r\n    import DoughnutChart from \"./components/DoughnutChart\";\r\n    import PieChart from \"./components/PieChart\";\r\n\r\n    var currentDate='';\r\n\r\n    export default {\r\n        name: \"Dashboard\",\r\n        components: {PieChart, DoughnutChart, Map, TopStat, RegionTable, ProgressChart, Flot, DateRangePicker},\r\n        data(){\r\n          return {\r\n              categories:null,\r\n              regionData:null,\r\n              hospital_bed_cap: cst.hospital_bed_cap,\r\n              ICU_bed_cap: cst.ICU_bed_cap,\r\n              dateRange: null,\r\n              gender:cst.gender\r\n          };\r\n        },\r\n        created(){\r\n            this.loadData()\r\n        },\r\n        methods:{\r\n            loadData(){\r\n                this.getCumulativeData();\r\n                this.getRegionTotalData();\r\n            },\r\n            getCumulativeData(){\r\n                new Promise(function(resolve, reject) {\r\n                    $.getJSON(\"./data/cumulativeCases.json\", function (rawData) {\r\n                        var dates = rawData.filter(a=>a.date !== 'diff').map(function(d){return new Date(d.date);});\r\n\r\n                        var dateMax = new Date(Math.max.apply(null,dates)),\r\n                            dateMin = new Date(Math.min.apply(null,dates));\r\n                        currentDate = dateMax.toISOString().slice(5, 7) + '/'\r\n                            + dateMax.toISOString().slice(8, 10) + '/'\r\n                            + dateMax.toISOString().slice(2, 4);\r\n\r\n                        var range = {dateMax : dateMax, dateMin : dateMin};\r\n\r\n                        var processedData = {\r\n                            new_cases:{data:{}},\r\n                            active:{data:{}},\r\n                            confirmed:{data:{}},\r\n                            new_death:{data:{}},\r\n                            death:{data:{}},\r\n                            hospitalized:{data:{}},\r\n                            ICU:{data:{}},\r\n                            tested:{data:{}},\r\n                            new_tested:{data:{}},\r\n                            recovered:{data:{}}\r\n                        };\r\n\r\n                        rawData.forEach(function(dailyData){\r\n                            var date = dailyData.date;\r\n                            Object.keys(dailyData).forEach(function (category) {\r\n                                if(category!=='date'){\r\n                                    if(date!=='diff')\r\n                                        processedData[category].data[date]= dailyData[category];\r\n                                    else\r\n                                        processedData[category][date] = dailyData[category];\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        if(Object.keys(processedData[\"new_cases\"].data).length == rawData.length - 1){\r\n                            resolve({data:processedData, range:range});\r\n                        }\r\n                    });\r\n                }).then((data)=>{this.categories = data.data;  this.dateRange = data.range;})\r\n            },\r\n            getRegionTotalData(){\r\n                new Promise(function(resolve, reject) {\r\n                    $.getJSON(\"./data/currentTotalCases.json\", function (rawData) {\r\n                        var latestDayData = rawData.filter(function(d){return d.date === currentDate;})[0];\r\n                        var regionData = latestDayData.case,\r\n                            regionDeath = latestDayData.death;\r\n\r\n                        if(Object.keys(regionDeath.regions).length === Object.keys(latestDayData.case.regions).length )\r\n                            resolve({case:regionData,death:regionDeath})\r\n\r\n                    })}).then((data)=>{this.regionData = data;})\r\n            },\r\n            getValue(data){\r\n               return Object.values(data).map(a=>parseInt(a));\r\n            },\r\n            isCategoryToShow(category){\r\n                return cst.categoryStatsToShow.indexOf(category) > -1;\r\n            },\r\n            getLable(category){\r\n                return cst.labels[category];\r\n            },\r\n            getNumber(category){\r\n                return parseInt(category.data[currentDate]);\r\n            },\r\n            togglePanel(e){\r\n                    var $BOX_PANEL = $(e.target).closest('.x_panel'),\r\n                        $ICON = $(e.target).find('i'),\r\n                        $BOX_CONTENT = $BOX_PANEL.find('.x_content');\r\n\r\n                    // fix for some div with hardcoded fix class\r\n                    if ($BOX_PANEL.attr('style')) {\r\n                        $BOX_CONTENT.slideToggle(200, function () {\r\n                            $BOX_PANEL.removeAttr('style');\r\n                        });\r\n                    } else {\r\n                        $BOX_CONTENT.slideToggle(200);\r\n                        $BOX_PANEL.css('height', 'auto');\r\n                    }\r\n                    $ICON.toggleClass('fa-chevron-up fa-chevron-down');\r\n                },\r\n            getPercent(a, b){\r\n                return ((a/b)*100).toFixed(2);\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Landing.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Landing.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Landing.vue?vue&type=template&id=7aa6c796&scoped=true&\"\nimport script from \"./Landing.vue?vue&type=script&lang=js&\"\nexport * from \"./Landing.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"7aa6c796\",\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:\"dashboard header-global navbar-light\"},[_c('base-nav',{attrs:{\"type\":\"\",\"effect\":\"light\",\"expand\":\"\"}},[_c('router-link',{staticClass:\"navbar-brand mr-lg-5\",attrs:{\"slot\":\"brand\",\"to\":\"/\"},slot:\"brand\"},[_c('img',{attrs:{\"src\":\"img/brand/Quebec_logo_lily.svg\",\"alt\":\"logo\"}}),_c('span',{staticStyle:{\"vertical-align\":\"middle\"}},[_vm._v(\"Quebec COVID-19 Dashboard\")])])],1),_vm._m(0)],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container updateTime\"},[_c('span',[_vm._v(\"Mise à jour selon les données extraites le \"),_c('span',{attrs:{\"id\":\"updatedDate\"}},[_vm._v(\"10 Mai 2020,\")])]),_vm._v(\" 18h\")])}]\n\nexport { render, staticRenderFns }","var render = function () {\nvar _obj, _obj$1;\nvar _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('nav',{staticClass:\"navbar\",class:[\n        {'navbar-expand-lg': _vm.expand},\n        ( _obj = {}, _obj[(\"navbar-\" + _vm.effect)] = _vm.effect, _obj ),\n        {'navbar-transparent': _vm.transparent},\n        ( _obj$1 = {}, _obj$1[(\"bg-\" + _vm.type)] = _vm.type, _obj$1 ),\n        {'rounded': _vm.round}\n     ]},[_c('div',{staticClass:\"container\"},[_vm._t(\"container-pre\"),_vm._t(\"brand\",[_c('a',{staticClass:\"navbar-brand\",attrs:{\"href\":\"#\"},on:{\"click\":function($event){$event.preventDefault();return _vm.onTitleClick($event)}}},[_vm._v(\" \"+_vm._s(_vm.title)+\" \")])]),_c('navbar-toggle-button',{attrs:{\"toggled\":_vm.toggled,\"target\":_vm.contentId},nativeOn:{\"click\":function($event){$event.stopPropagation();_vm.toggled = !_vm.toggled}}}),_vm._t(\"container-after\"),_c('div',{directives:[{name:\"click-outside\",rawName:\"v-click-outside\",value:(_vm.closeMenu),expression:\"closeMenu\"}],staticClass:\"collapse navbar-collapse\",class:{show: _vm.toggled},attrs:{\"id\":_vm.contentId}},[_c('div',{staticClass:\"navbar-collapse-header\"},[_vm._t(\"content-header\",null,{\"closeMenu\":_vm.closeMenu})],2),_vm._t(\"default\",null,{\"closeMenu\":_vm.closeMenu})],2)],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:\"navbar-toggler\",attrs:{\"type\":\"button\",\"data-toggle\":\"collapse\",\"data-target\":_vm.target,\"aria-controls\":_vm.target,\"aria-expanded\":_vm.toggled,\"aria-label\":\"Toggle navigation\"}},[_c('span',{staticClass:\"navbar-toggler-icon\"})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <button class=\"navbar-toggler\" type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            :data-target=\"target\"\r\n            :aria-controls=\"target\"\r\n            :aria-expanded=\"toggled\"\r\n            aria-label=\"Toggle navigation\">\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n</template>\r\n<script>\r\nexport default {\r\n  props: {\r\n    target: {\r\n      type: [String, Number],\r\n      description: \"Button target element\"\r\n    },\r\n    toggled: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button is toggled\"\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NavbarToggleButton.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./NavbarToggleButton.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./NavbarToggleButton.vue?vue&type=template&id=64bd82de&\"\nimport script from \"./NavbarToggleButton.vue?vue&type=script&lang=js&\"\nexport * from \"./NavbarToggleButton.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <nav class=\"navbar\"\r\n         :class=\"[\r\n            {'navbar-expand-lg': expand},\r\n            {[`navbar-${effect}`]: effect},\r\n            {'navbar-transparent': transparent},\r\n            {[`bg-${type}`]: type},\r\n            {'rounded': round}\r\n         ]\">\r\n        <div class=\"container\">\r\n            <slot name=\"container-pre\"></slot>\r\n            <slot name=\"brand\">\r\n                <a class=\"navbar-brand\" href=\"#\" @click.prevent=\"onTitleClick\">\r\n                    {{title}}\r\n                </a>\r\n            </slot>\r\n            <navbar-toggle-button :toggled=\"toggled\"\r\n                                  :target=\"contentId\"\r\n                                  @click.native.stop=\"toggled = !toggled\">\r\n            </navbar-toggle-button>\r\n\r\n            <slot name=\"container-after\"></slot>\r\n\r\n            <div class=\"collapse navbar-collapse\" :class=\"{show: toggled}\" :id=\"contentId\" v-click-outside=\"closeMenu\">\r\n                <div class=\"navbar-collapse-header\">\r\n                    <slot name=\"content-header\" :close-menu=\"closeMenu\"></slot>\r\n                </div>\r\n                <slot :close-menu=\"closeMenu\"></slot>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n</template>\r\n<script>\r\nimport { FadeTransition } from \"vue2-transitions\";\r\nimport NavbarToggleButton from \"./NavbarToggleButton\";\r\n\r\nexport default {\r\n  name: \"base-nav\",\r\n  components: {\r\n    FadeTransition,\r\n    NavbarToggleButton\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"primary\",\r\n      description: \"Navbar type (e.g default, primary etc)\"\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Title of navbar\"\r\n    },\r\n    contentId: {\r\n      type: [String, Number],\r\n      default: Math.random().toString(),\r\n      description:\r\n        \"Explicit id for the menu. By default it's a generated random number\"\r\n    },\r\n    effect: {\r\n      type: String,\r\n      default: \"dark\",\r\n      description: \"Effect of the navbar (light|dark)\"\r\n    },\r\n    round: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether nav has rounded corners\"\r\n    },\r\n    transparent: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether navbar is transparent\"\r\n    },\r\n    expand: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether navbar should contain `navbar-expand-lg` class\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      toggled: false\r\n    };\r\n  },\r\n  methods: {\r\n    onTitleClick(evt) {\r\n      this.$emit(\"title-click\", evt);\r\n    },\r\n    closeMenu() {\r\n      this.toggled = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseNav.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseNav.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseNav.vue?vue&type=template&id=16c05def&\"\nimport script from \"./BaseNav.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseNav.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.tag,{directives:[{name:\"click-outside\",rawName:\"v-click-outside\",value:(_vm.closeDropDown),expression:\"closeDropDown\"}],tag:\"component\",staticClass:\"dropdown\",class:[{show: _vm.isOpen}, {'dropdown': _vm.direction === 'down'}, {'dropup': _vm.direction ==='up'}],attrs:{\"aria-haspopup\":\"true\",\"aria-expanded\":_vm.isOpen},on:{\"click\":_vm.toggleDropDown}},[_vm._t(\"title\",[_c('a',{staticClass:\"dropdown-toggle nav-link\",class:{'no-caret': _vm.hideArrow},attrs:{\"data-toggle\":\"dropdown\"}},[_c('i',{class:_vm.icon}),_c('span',{staticClass:\"no-icon\"},[_vm._v(_vm._s(_vm.title))])])]),_c('ul',{staticClass:\"dropdown-menu\",class:[{'dropdown-menu-right': _vm.position === 'right'}, {show: _vm.isOpen}, _vm.menuClasses]},[_vm._t(\"default\")],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <component class=\"dropdown\"\r\n               :is=\"tag\"\r\n               :class=\"[{show: isOpen}, {'dropdown': direction === 'down'}, {'dropup': direction ==='up'}]\"\r\n               aria-haspopup=\"true\"\r\n               :aria-expanded=\"isOpen\"\r\n               @click=\"toggleDropDown\"\r\n               v-click-outside=\"closeDropDown\">\r\n\r\n        <slot name=\"title\">\r\n            <a class=\"dropdown-toggle nav-link\"\r\n               :class=\"{'no-caret': hideArrow}\"\r\n               data-toggle=\"dropdown\">\r\n                <i :class=\"icon\"></i>\r\n                <span class=\"no-icon\">{{title}}</span>\r\n            </a>\r\n        </slot>\r\n        <ul class=\"dropdown-menu\"\r\n            :class=\"[{'dropdown-menu-right': position === 'right'}, {show: isOpen}, menuClasses]\">\r\n            <slot></slot>\r\n        </ul>\r\n    </component>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-dropdown\",\r\n  props: {\r\n    direction: {\r\n      type: String,\r\n      default: \"down\"\r\n    },\r\n    title: {\r\n      type: String,\r\n      description: \"Dropdown title\"\r\n    },\r\n    icon: {\r\n      type: String,\r\n      description: \"Icon for dropdown title\"\r\n    },\r\n    position: {\r\n      type: String,\r\n      description: \"Position of dropdown menu (e.g right|left)\"\r\n    },\r\n    menuClasses: {\r\n      type: [String, Object],\r\n      description: \"Dropdown menu classes\"\r\n    },\r\n    hideArrow: {\r\n      type: Boolean,\r\n      description: \"Whether dropdown arrow should be hidden\"\r\n    },\r\n    tag: {\r\n      type: String,\r\n      default: \"li\",\r\n      description: \"Dropdown html tag (e.g div, li etc)\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isOpen: false\r\n    };\r\n  },\r\n  methods: {\r\n    toggleDropDown() {\r\n      this.isOpen = !this.isOpen;\r\n      this.$emit(\"change\", this.isOpen);\r\n    },\r\n    closeDropDown() {\r\n      this.isOpen = false;\r\n      this.$emit(\"change\", this.isOpen);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.dropdown {\r\n  list-style-type: none;\r\n}\r\n\r\n.dropdown .dropdown-toggle {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseDropdown.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseDropdown.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseDropdown.vue?vue&type=template&id=06b2fb62&\"\nimport script from \"./BaseDropdown.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseDropdown.vue?vue&type=script&lang=js&\"\nimport style0 from \"./BaseDropdown.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:\"navbar-toggler\",attrs:{\"type\":\"button\",\"data-toggle\":\"collapse\",\"data-target\":(\"#\" + _vm.target),\"aria-controls\":_vm.target,\"aria-expanded\":_vm.expanded,\"aria-label\":\"Toggle navigation\"},on:{\"click\":_vm.handleClick}},[_c('span'),_c('span')])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <button type=\"button\" class=\"navbar-toggler\"\r\n            data-toggle=\"collapse\"\r\n            @click=\"handleClick\"\r\n            :data-target=\"`#${target}`\"\r\n            :aria-controls=\"target\"\r\n            :aria-expanded=\"expanded\"\r\n            aria-label=\"Toggle navigation\">\r\n        <span></span>\r\n        <span></span>\r\n    </button>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"close-button\",\r\n  props: {\r\n    target: {\r\n      type: [String, Number],\r\n      description: \"Close button target element\"\r\n    },\r\n    expanded: {\r\n      type: Boolean,\r\n      description: \"Whether button is expanded (aria-expanded attribute)\"\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick(evt) {\r\n      this.$emit(\"click\", evt);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloseButton.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CloseButton.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CloseButton.vue?vue&type=template&id=3c29b6f2&\"\nimport script from \"./CloseButton.vue?vue&type=script&lang=js&\"\nexport * from \"./CloseButton.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\r\n    <header class=\"dashboard header-global navbar-light\">\r\n            <base-nav class=\"\" type=\"\" effect=\"light\" expand>\r\n                <router-link slot=\"brand\" class=\"navbar-brand mr-lg-5\" to=\"/\">\r\n                    <img src=\"img/brand/Quebec_logo_lily.svg\" alt=\"logo\">\r\n                    <span style=\"vertical-align: middle\">Quebec COVID-19 Dashboard</span>\r\n                </router-link>\r\n\r\n            </base-nav>\r\n        <div class=\"container updateTime\"><span>Mise à jour selon les données extraites le <span id=\"updatedDate\">10 Mai 2020,</span></span> 18h</div>\r\n    </header>\r\n</template>\r\n<script>\r\n    import BaseNav from \"@/components/BaseNav\";\r\n    import BaseDropdown from \"@/components/BaseDropdown\";\r\n    import CloseButton from \"@/components/CloseButton\";\r\n    import { headroom } from \"vue-headroom\"\r\n\r\n    export default {\r\n        components: {\r\n            BaseNav,\r\n            CloseButton,\r\n            BaseDropdown,\r\n            headroom\r\n        }\r\n    };\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AppHeader.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AppHeader.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AppHeader.vue?vue&type=template&id=17d5fa5c&\"\nimport script from \"./AppHeader.vue?vue&type=script&lang=js&\"\nexport * from \"./AppHeader.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('footer',{staticClass:\" footer-light\"},[_c('div',{staticClass:\"container dashContainer\"},[_c('div',{staticClass:\"row align-items-right justify-content-md-between\"},[_c('div',{staticClass:\"col-md-12\",staticStyle:{\"display\":\"inline-block\"}},[_c('img',{staticStyle:{\"height\":\"24px\"},attrs:{\"src\":\"img/brand/Quebec_logo_lily.svg\"}}),_c('span',{staticStyle:{\"font-size\":\"13px\"}},[_vm._v(\"Made by Xuefei\")])])])])])}]\n\nexport { render, staticRenderFns }","<template>\r\n    <footer class=\" footer-light\">\r\n        <div class=\"container dashContainer\">\r\n            <div class=\"row align-items-right justify-content-md-between\">\r\n                <div class=\"col-md-12\" style=\"display: inline-block\">\r\n                    <img src=\"img/brand/Quebec_logo_lily.svg\" style=\"height:24px;\">\r\n                    <span style=\"font-size:13px\">Made by Xuefei</span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </footer>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"DashboardFooter\",\r\n        data() {\r\n            return {\r\n                year: new Date().getFullYear(),\r\n                modal: {\r\n                    show: false\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AppFooter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AppFooter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AppFooter.vue?vue&type=template&id=2b76710a&\"\nimport script from \"./AppFooter.vue?vue&type=script&lang=js&\"\nexport * from \"./AppFooter.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from \"vue\";\r\nimport Router from \"vue-router\";\r\nimport Landing from \"./views/Landing\";\r\nimport AppHeader from \"./layout/AppHeader\";\r\nimport AppFooter from \"./layout/AppFooter\";\r\n\r\nVue.use(Router);\r\n\r\n\r\nexport default new Router({\r\n  linkExactActiveClass: \"active\",\r\n  routes: [\r\n    {\r\n      path: \"/\",\r\n      name: \"landing\",\r\n      meta:{\r\n        title:'Quebec COVID-19 Dashboard'\r\n      },\r\n      components: {\r\n        header: AppHeader,\r\n        default: Landing,\r\n        footer: AppFooter\r\n      }\r\n    }\r\n  ],\r\n  scrollBehavior: to => {\r\n    if (to.hash) {\r\n      return { selector: to.hash };\r\n    } else {\r\n      return { x: 0, y: 0 };\r\n    }\r\n  }\r\n});\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.tag,{tag:\"component\",staticClass:\"badge\",class:[(\"badge-\" + _vm.type),\n            _vm.rounded ? \"badge-pill\" : '',\n            _vm.circle && 'badge-circle'\n           ]},[_vm._t(\"default\",[(_vm.icon)?_c('i',{class:_vm.icon}):_vm._e()])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <component :is=\"tag\"\r\n               class=\"badge\"\r\n               :class=\"\r\n               [`badge-${type}`,\r\n                rounded ? `badge-pill` : '',\r\n                circle && 'badge-circle'\r\n               ]\">\r\n        <slot>\r\n            <i v-if=\"icon\" :class=\"icon\"></i>\r\n        </slot>\r\n    </component>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"badge\",\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: \"span\",\r\n      description: \"Html tag to use for the badge.\"\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether badge is of pill type\"\r\n    },\r\n    circle: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether badge is circle\"\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon name. Will be overwritten by slot if slot is used\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      description: \"Badge type (primary|info|danger|default|warning|success)\"\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Badge.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Badge.vue?vue&type=template&id=1ce6e654&\"\nimport script from \"./Badge.vue?vue&type=script&lang=js&\"\nexport * from \"./Badge.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('fade-transition',[(_vm.visible)?_c('div',{staticClass:\"alert\",class:[(\"alert-\" + _vm.type), {'alert-dismissible': _vm.dismissible}],attrs:{\"role\":\"alert\"}},[(!_vm.dismissible)?_vm._t(\"default\",[(_vm.icon)?_c('span',{staticClass:\"alert-inner--icon\"},[_c('i',{class:_vm.icon})]):_vm._e(),(_vm.$slots.text)?_c('span',{staticClass:\"alert-inner--text\"},[_vm._t(\"text\")],2):_vm._e()]):[_vm._t(\"default\",[(_vm.icon)?_c('span',{staticClass:\"alert-inner--icon\"},[_c('i',{class:_vm.icon})]):_vm._e(),(_vm.$slots.text)?_c('span',{staticClass:\"alert-inner--text\"},[_vm._t(\"text\")],2):_vm._e()]),_vm._t(\"dismiss-icon\",[_c('button',{staticClass:\"close\",attrs:{\"type\":\"button\",\"data-dismiss\":\"alert\",\"aria-label\":\"Close\"},on:{\"click\":_vm.dismissAlert}},[_c('span',{attrs:{\"aria-hidden\":\"true\"}},[_vm._v(\"×\")])])])]],2):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <fade-transition>\r\n        <div class=\"alert\" :class=\"[`alert-${type}`, {'alert-dismissible': dismissible}]\" role=\"alert\" v-if=\"visible\">\r\n            <slot v-if=\"!dismissible\">\r\n                <span v-if=\"icon\" class=\"alert-inner--icon\">\r\n                    <i :class=\"icon\"></i>\r\n                </span>\r\n                <span v-if=\"$slots.text\" class=\"alert-inner--text\">\r\n                    <slot name=\"text\"></slot>\r\n                </span>\r\n            </slot>\r\n            <template v-else>\r\n                <slot>\r\n                    <span v-if=\"icon\" class=\"alert-inner--icon\">\r\n                     <i :class=\"icon\"></i>\r\n                    </span>\r\n                    <span v-if=\"$slots.text\" class=\"alert-inner--text\">\r\n                    <slot name=\"text\"></slot>\r\n                </span>\r\n                </slot>\r\n                <slot name=\"dismiss-icon\">\r\n                    <button type=\"button\" data-dismiss=\"alert\" aria-label=\"Close\" class=\"close\" @click=\"dismissAlert\">\r\n                        <span aria-hidden=\"true\">×</span>\r\n                    </button>\r\n                </slot>\r\n            </template>\r\n        </div>\r\n    </fade-transition>\r\n</template>\r\n<script>\r\nimport { FadeTransition } from \"vue2-transitions\";\r\n\r\nexport default {\r\n  name: \"base-alert\",\r\n  components: {\r\n    FadeTransition\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      description: \"Alert type\"\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Alert icon. Will be overwritten by default slot\"\r\n    },\r\n    dismissible: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether alert is closes when clicking\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      visible: true\r\n    };\r\n  },\r\n  methods: {\r\n    dismissAlert() {\r\n      this.visible = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseAlert.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseAlert.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseAlert.vue?vue&type=template&id=41b50cfc&\"\nimport script from \"./BaseAlert.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseAlert.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(_vm.tag,{tag:\"component\",staticClass:\"btn\",class:_vm.classes,attrs:{\"type\":_vm.type},on:{\"click\":_vm.handleClick}},[(_vm.$slots.icon || _vm.icon && _vm.$slots.default)?_c('span',{staticClass:\"btn-inner--icon\"},[_vm._t(\"icon\",[_c('i',{class:_vm.icon})])],2):_vm._e(),(!_vm.$slots.default)?_c('i',{class:_vm.icon}):_vm._e(),(_vm.$slots.icon || _vm.icon && _vm.$slots.default)?_c('span',{staticClass:\"btn-inner--text\"},[_vm._t(\"default\",[_vm._v(\" \"+_vm._s(_vm.text)+\" \")])],2):_vm._e(),(!_vm.$slots.icon && !_vm.icon)?_vm._t(\"default\"):_vm._e()],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <component :is=\"tag\"\r\n               :type=\"type\"\r\n               @click=\"handleClick\"\r\n               class=\"btn\"\r\n               :class=\"classes\">\r\n    <span class=\"btn-inner--icon\" v-if=\"$slots.icon || icon && $slots.default\">\r\n      <slot name=\"icon\">\r\n        <i :class=\"icon\"></i>\r\n      </slot>\r\n    </span>\r\n        <i v-if=\"!$slots.default\" :class=\"icon\"></i>\r\n        <span class=\"btn-inner--text\" v-if=\"$slots.icon || icon && $slots.default\">\r\n          <slot>\r\n            {{text}}\r\n          </slot>\r\n    </span>\r\n        <slot v-if=\"!$slots.icon && !icon\"></slot>\r\n    </component>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-button\",\r\n  props: {\r\n    tag: {\r\n      type: String,\r\n      default: \"button\",\r\n      description: \"Button tag (default -> button)\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      description: \"Button type (e,g primary, danger etc)\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button size lg|sm\"\r\n    },\r\n    textColor: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button text color (e.g primary, danger etc)\"\r\n    },\r\n    nativeType: {\r\n      type: String,\r\n      default: \"button\",\r\n      description: \"Button native type (e.g submit,button etc)\"\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button icon\"\r\n    },\r\n    text: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Button text in case not provided via default slot\"\r\n    },\r\n    outline: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button style is outline\"\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button style is rounded\"\r\n    },\r\n    iconOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button contains only an icon\"\r\n    },\r\n    block: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether button is of block type\"\r\n    }\r\n  },\r\n  computed: {\r\n    classes() {\r\n      let btnClasses = [\r\n        { \"btn-block\": this.block },\r\n        { \"rounded-circle\": this.rounded },\r\n        { \"btn-icon-only\": this.iconOnly },\r\n        { [`text-${this.textColor}`]: this.textColor },\r\n        { \"btn-icon\": this.icon || this.$slots.icon },\r\n        this.type && !this.outline ? `btn-${this.type}` : \"\",\r\n        this.outline ? `btn-outline-${this.type}` : \"\"\r\n      ];\r\n      if (this.size) {\r\n        btnClasses.push(`btn-${this.size}`);\r\n      }\r\n      return btnClasses;\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick(evt) {\r\n      this.$emit(\"click\", evt);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseButton.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseButton.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseButton.vue?vue&type=template&id=57d01555&\"\nimport script from \"./BaseButton.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseButton.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"custom-control custom-checkbox\",class:[{disabled: _vm.disabled}, _vm.inlineClass]},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.model),expression:\"model\"}],staticClass:\"custom-control-input\",attrs:{\"id\":_vm.cbId,\"type\":\"checkbox\",\"disabled\":_vm.disabled},domProps:{\"checked\":Array.isArray(_vm.model)?_vm._i(_vm.model,null)>-1:(_vm.model)},on:{\"change\":function($event){var $$a=_vm.model,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.model=$$a.concat([$$v]))}else{$$i>-1&&(_vm.model=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.model=$$c}}}}),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":_vm.cbId}},[_vm._t(\"default\",[(_vm.inline)?_c('span'):_vm._e()])],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export function randomString(length = 7) {\r\n  const possibleChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n  let text = \"\";\r\n\r\n  for (let i = 0; i < length; i++)\r\n    text += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));\r\n\r\n  return text;\r\n}\r\n","<template>\r\n  <div class=\"custom-control custom-checkbox\"\r\n       :class=\"[{disabled: disabled}, inlineClass]\">\r\n    <input :id=\"cbId\"\r\n           class=\"custom-control-input\"\r\n           type=\"checkbox\"\r\n           :disabled=\"disabled\"\r\n           v-model=\"model\"/>\r\n    <label :for=\"cbId\" class=\"custom-control-label\">\r\n      <slot>\r\n        <span v-if=\"inline\">&nbsp;</span>\r\n      </slot>\r\n    </label>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { randomString } from \"./stringUtils\";\r\n\r\nexport default {\r\n  name: \"base-checkbox\",\r\n  model: {\r\n    prop: \"checked\"\r\n  },\r\n  props: {\r\n    checked: {\r\n      type: [Array, Boolean],\r\n      description: \"Whether checkbox is checked\"\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is disabled\"\r\n    },\r\n    inline: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is inline\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      cbId: \"\",\r\n      touched: false\r\n    };\r\n  },\r\n  computed: {\r\n    model: {\r\n      get() {\r\n        return this.checked;\r\n      },\r\n      set(check) {\r\n        if (!this.touched) {\r\n          this.touched = true;\r\n        }\r\n        this.$emit(\"input\", check);\r\n      }\r\n    },\r\n    inlineClass() {\r\n      if (this.inline) {\r\n        return `form-check-inline`;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.cbId = randomString()\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseCheckbox.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseCheckbox.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseCheckbox.vue?vue&type=template&id=4632d54e&\"\nimport script from \"./BaseCheckbox.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseCheckbox.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"form-group\",class:[\n   {'input-group': _vm.hasIcon},\n   {'has-danger': _vm.error},\n   {'focused': _vm.focused},\n   {'input-group-alternative': _vm.alternative},\n   {'has-label': _vm.label || _vm.$slots.label},\n   {'has-success': _vm.valid === true},\n   {'has-danger': _vm.valid === false}\n   ]},[_vm._t(\"label\",[(_vm.label)?_c('label',{class:_vm.labelClasses},[_vm._v(\" \"+_vm._s(_vm.label)+\" \"),(_vm.required)?_c('span',[_vm._v(\"*\")]):_vm._e()]):_vm._e()]),(_vm.addonLeftIcon || _vm.$slots.addonLeft)?_c('div',{staticClass:\"input-group-prepend\"},[_c('span',{staticClass:\"input-group-text\"},[_vm._t(\"addonLeft\",[_c('i',{class:_vm.addonLeftIcon})])],2)]):_vm._e(),_vm._t(\"default\",[_c('input',_vm._g(_vm._b({staticClass:\"form-control\",class:[{'is-valid': _vm.valid === true}, {'is-invalid': _vm.valid === false}, _vm.inputClasses],attrs:{\"required\":_vm.required,\"aria-describedby\":\"addon-right addon-left\"},domProps:{\"value\":_vm.value}},'input',_vm.$attrs,false),_vm.listeners))],null,_vm.slotData),(_vm.addonRightIcon || _vm.$slots.addonRight)?_c('div',{staticClass:\"input-group-append\"},[_c('span',{staticClass:\"input-group-text\"},[_vm._t(\"addonRight\",[_c('i',{class:_vm.addonRightIcon})])],2)]):_vm._e(),_vm._t(\"infoBlock\"),_vm._t(\"helpBlock\",[(_vm.error)?_c('div',{staticClass:\"text-danger invalid-feedback\",class:{'mt-2': _vm.hasIcon},staticStyle:{\"display\":\"block\"}},[_vm._v(\" \"+_vm._s(_vm.error)+\" \")]):_vm._e()])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"form-group\"\r\n         :class=\"[\r\n       {'input-group': hasIcon},\r\n       {'has-danger': error},\r\n       {'focused': focused},\r\n       {'input-group-alternative': alternative},\r\n       {'has-label': label || $slots.label},\r\n       {'has-success': valid === true},\r\n       {'has-danger': valid === false}\r\n       ]\">\r\n        <slot name=\"label\">\r\n            <label v-if=\"label\" :class=\"labelClasses\">\r\n                {{label}}\r\n                <span v-if=\"required\">*</span>\r\n            </label>\r\n        </slot>\r\n\r\n\r\n        <div v-if=\"addonLeftIcon || $slots.addonLeft\" class=\"input-group-prepend\">\r\n        <span class=\"input-group-text\">\r\n          <slot name=\"addonLeft\">\r\n            <i :class=\"addonLeftIcon\"></i>\r\n          </slot>\r\n        </span>\r\n        </div>\r\n        <slot v-bind=\"slotData\">\r\n            <input\r\n                    :value=\"value\"\r\n                    v-on=\"listeners\"\r\n                    v-bind=\"$attrs\"\r\n                    v-bind:required=\"required\"\r\n                    class=\"form-control\"\r\n                    :class=\"[{'is-valid': valid === true}, {'is-invalid': valid === false}, inputClasses]\"\r\n                    aria-describedby=\"addon-right addon-left\">\r\n        </slot>\r\n        <div v-if=\"addonRightIcon || $slots.addonRight\" class=\"input-group-append\">\r\n          <span class=\"input-group-text\">\r\n              <slot name=\"addonRight\">\r\n                  <i :class=\"addonRightIcon\"></i>\r\n              </slot>\r\n          </span>\r\n        </div>\r\n        <slot name=\"infoBlock\"></slot>\r\n        <slot name=\"helpBlock\">\r\n            <div class=\"text-danger invalid-feedback\" style=\"display: block;\" :class=\"{'mt-2': hasIcon}\" v-if=\"error\">\r\n                {{ error }}\r\n            </div>\r\n        </slot>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  inheritAttrs: false,\r\n  name: \"base-input\",\r\n  props: {\r\n    required: {\r\n      type: Boolean,\r\n      description: \"Whether input is required (adds an asterix *)\"\r\n    },\r\n    valid: {\r\n      type: Boolean,\r\n      description: \"Whether is valid\",\r\n      default: undefined\r\n    },\r\n    alternative: {\r\n      type: Boolean,\r\n      description: \"Whether input is of alternative layout\"\r\n    },\r\n    label: {\r\n      type: String,\r\n      description: \"Input label (text before input)\"\r\n    },\r\n    error: {\r\n      type: String,\r\n      description: \"Input error (below input)\"\r\n    },\r\n    labelClasses: {\r\n      type: String,\r\n      description: \"Input label css classes\"\r\n    },\r\n    inputClasses: {\r\n      type: String,\r\n      description: \"Input css classes\"\r\n    },\r\n    value: {\r\n      type: [String, Number],\r\n      description: \"Input value\"\r\n    },\r\n    addonRightIcon: {\r\n      type: String,\r\n      description: \"Addon right icon\"\r\n    },\r\n    addonLeftIcon: {\r\n      type: String,\r\n      description: \"Addont left icon\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      focused: false\r\n    };\r\n  },\r\n  computed: {\r\n    listeners() {\r\n      return {\r\n        ...this.$listeners,\r\n        input: this.updateValue,\r\n        focus: this.onFocus,\r\n        blur: this.onBlur\r\n      };\r\n    },\r\n    slotData() {\r\n      return {\r\n        focused: this.focused,\r\n        ...this.listeners\r\n      };\r\n    },\r\n    hasIcon() {\r\n      const { addonRight, addonLeft } = this.$slots;\r\n      return (\r\n        addonRight !== undefined ||\r\n        addonLeft !== undefined ||\r\n        this.addonRightIcon !== undefined ||\r\n        this.addonLeftIcon !== undefined\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    updateValue(evt) {\r\n      let value = evt.target.value;\r\n      this.$emit(\"input\", value);\r\n    },\r\n    onFocus(value) {\r\n      this.focused = true;\r\n      this.$emit(\"focus\", value);\r\n    },\r\n    onBlur(value) {\r\n      this.focused = false;\r\n      this.$emit(\"blur\", value);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseInput.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseInput.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseInput.vue?vue&type=template&id=3cc74340&\"\nimport script from \"./BaseInput.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseInput.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('SlideYUpTransition',{attrs:{\"duration\":_vm.animationDuration}},[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.show),expression:\"show\"}],staticClass:\"modal fade\",class:[{'show d-block': _vm.show}, {'d-none': !_vm.show}, {'modal-mini': _vm.type === 'mini'}],attrs:{\"tabindex\":\"-1\",\"role\":\"dialog\",\"aria-hidden\":!_vm.show},on:{\"click\":function($event){if($event.target !== $event.currentTarget){ return null; }return _vm.closeModal($event)}}},[_c('div',{staticClass:\"modal-dialog modal-dialog-centered\",class:[{'modal-notice': _vm.type === 'notice'}, _vm.modalClasses]},[_c('div',{staticClass:\"modal-content\",class:[_vm.gradient ? (\"bg-gradient-\" + _vm.gradient) : '',_vm.modalContentClasses]},[(_vm.$slots.header)?_c('div',{staticClass:\"modal-header\",class:[_vm.headerClasses]},[_vm._t(\"header\"),_vm._t(\"close-button\",[(_vm.showClose)?_c('button',{staticClass:\"close\",attrs:{\"type\":\"button\",\"data-dismiss\":\"modal\",\"aria-label\":\"Close\"},on:{\"click\":_vm.closeModal}},[_c('span',{attrs:{\"aria-hidden\":!_vm.show}},[_vm._v(\"×\")])]):_vm._e()])],2):_vm._e(),_c('div',{staticClass:\"modal-body\",class:_vm.bodyClasses},[_vm._t(\"default\")],2),(_vm.$slots.footer)?_c('div',{staticClass:\"modal-footer\",class:_vm.footerClasses},[_vm._t(\"footer\")],2):_vm._e()])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <SlideYUpTransition :duration=\"animationDuration\">\r\n    <div class=\"modal fade\"\r\n         @click.self=\"closeModal\"\r\n         :class=\"[{'show d-block': show}, {'d-none': !show}, {'modal-mini': type === 'mini'}]\"\r\n         v-show=\"show\"\r\n         tabindex=\"-1\"\r\n         role=\"dialog\"\r\n         :aria-hidden=\"!show\">\r\n\r\n      <div class=\"modal-dialog modal-dialog-centered\"\r\n           :class=\"[{'modal-notice': type === 'notice'}, modalClasses]\">\r\n        <div class=\"modal-content\" :class=\"[gradient ? `bg-gradient-${gradient}` : '',modalContentClasses]\">\r\n\r\n          <div class=\"modal-header\" :class=\"[headerClasses]\" v-if=\"$slots.header\">\r\n            <slot name=\"header\"></slot>\r\n            <slot name=\"close-button\">\r\n              <button type=\"button\"\r\n                      class=\"close\"\r\n                      v-if=\"showClose\"\r\n                      @click=\"closeModal\"\r\n                      data-dismiss=\"modal\"\r\n                      aria-label=\"Close\">\r\n                <span :aria-hidden=\"!show\">×</span>\r\n              </button>\r\n            </slot>\r\n          </div>\r\n\r\n          <div class=\"modal-body\" :class=\"bodyClasses\">\r\n            <slot></slot>\r\n          </div>\r\n\r\n          <div class=\"modal-footer\" :class=\"footerClasses\" v-if=\"$slots.footer\">\r\n            <slot name=\"footer\"></slot>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </SlideYUpTransition>\r\n</template>\r\n<script>\r\nimport { SlideYUpTransition } from \"vue2-transitions\";\r\n\r\nexport default {\r\n  name: \"modal\",\r\n  components: {\r\n    SlideYUpTransition\r\n  },\r\n  props: {\r\n    show: Boolean,\r\n    showClose: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"\",\r\n      validator(value) {\r\n        let acceptedValues = [\"\", \"notice\", \"mini\"];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n      description: 'Modal type (notice|mini|\"\") '\r\n    },\r\n    modalClasses: {\r\n      type: [Object, String],\r\n      description: \"Modal dialog css classes\"\r\n    },\r\n    modalContentClasses: {\r\n      type: [Object, String],\r\n      description: \"Modal dialog content css classes\"\r\n    },\r\n    gradient: {\r\n      type: String,\r\n      description: \"Modal gradient type (danger, primary etc)\"\r\n    },\r\n    headerClasses: {\r\n      type: [Object, String],\r\n      description: \"Modal Header css classes\"\r\n    },\r\n    bodyClasses: {\r\n      type: [Object, String],\r\n      description: \"Modal Body css classes\"\r\n    },\r\n    footerClasses: {\r\n      type: [Object, String],\r\n      description: \"Modal Footer css classes\"\r\n    },\r\n    animationDuration: {\r\n      type: Number,\r\n      default: 500,\r\n      description: \"Modal transition duration\"\r\n    }\r\n  },\r\n  methods: {\r\n    closeModal() {\r\n      this.$emit(\"update:show\", false);\r\n      this.$emit(\"close\");\r\n    }\r\n  },\r\n  watch: {\r\n    show(val) {\r\n      let documentClasses = document.body.classList;\r\n      if (val) {\r\n        documentClasses.add(\"modal-open\");\r\n      } else {\r\n        documentClasses.remove(\"modal-open\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.modal.show {\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Modal.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Modal.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Modal.vue?vue&type=template&id=2e3b6382&\"\nimport script from \"./Modal.vue?vue&type=script&lang=js&\"\nexport * from \"./Modal.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Modal.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:\"pagination\",class:[_vm.size && (\"pagination-\" + _vm.size), _vm.align && (\"justify-content-\" + _vm.align)]},[_c('li',{staticClass:\"page-item prev-page\",class:{disabled: _vm.value === 1}},[_c('a',{staticClass:\"page-link\",attrs:{\"aria-label\":\"Previous\"},on:{\"click\":_vm.prevPage}},[_vm._m(0)])]),_vm._l((_vm.range(_vm.minPage, _vm.maxPage)),function(item){return _c('li',{key:item,staticClass:\"page-item\",class:{active: _vm.value === item}},[_c('a',{staticClass:\"page-link\",on:{\"click\":function($event){return _vm.changePage(item)}}},[_vm._v(_vm._s(item))])])}),_c('li',{staticClass:\"page-item next-page\",class:{disabled: _vm.value === _vm.totalPages}},[_c('a',{staticClass:\"page-link\",attrs:{\"aria-label\":\"Next\"},on:{\"click\":_vm.nextPage}},[_vm._m(1)])])],2)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{attrs:{\"aria-hidden\":\"true\"}},[_c('i',{staticClass:\"fa fa-angle-left\",attrs:{\"aria-hidden\":\"true\"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{attrs:{\"aria-hidden\":\"true\"}},[_c('i',{staticClass:\"fa fa-angle-right\",attrs:{\"aria-hidden\":\"true\"}})])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <ul class=\"pagination\" :class=\"[size && `pagination-${size}`, align && `justify-content-${align}`]\">\r\n    <li class=\"page-item prev-page\" :class=\"{disabled: value === 1}\">\r\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item\" :class=\"{active: value === item}\"\r\n        :key=\"item\"\r\n        v-for=\"item in range(minPage, maxPage)\">\r\n      <a class=\"page-link\" @click=\"changePage(item)\">{{item}}</a>\r\n    </li>\r\n    <li class=\"page-item next-page\" :class=\"{disabled: value === totalPages}\">\r\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-pagination\",\r\n  props: {\r\n    pageCount: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Pagination page count. This should be specified in combination with perPage\"\r\n    },\r\n    perPage: {\r\n      type: Number,\r\n      default: 10,\r\n      description:\r\n        \"Pagination per page. Should be specified with total or pageCount\"\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 1,\r\n      description: \"Pagination value\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination size\"\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination alignment (e.g center|start|end)\"\r\n    }\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      if (this.pageCount > 0) return this.pageCount;\r\n      if (this.total > 0) {\r\n        return Math.ceil(this.total / this.perPage);\r\n      }\r\n      return 1;\r\n    },\r\n    pagesToDisplay() {\r\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\r\n        return this.totalPages;\r\n      }\r\n      return this.defaultPagesToDisplay;\r\n    },\r\n    minPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage > this.totalPages) {\r\n          return this.totalPages - this.pagesToDisplay + 1;\r\n        }\r\n        return this.value - pagesToAdd;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    maxPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage < this.totalPages) {\r\n          return newMaxPage;\r\n        } else {\r\n          return this.totalPages;\r\n        }\r\n      } else {\r\n        return this.pagesToDisplay;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultPagesToDisplay: 5\r\n    };\r\n  },\r\n  methods: {\r\n    range(min, max) {\r\n      let arr = [];\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i);\r\n      }\r\n      return arr;\r\n    },\r\n    changePage(item) {\r\n      this.$emit(\"input\", item);\r\n    },\r\n    nextPage() {\r\n      if (this.value < this.totalPages) {\r\n        this.$emit(\"input\", this.value + 1);\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.value > 1) {\r\n        this.$emit(\"input\", this.value - 1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    perPage() {\r\n      this.$emit(\"input\", 1);\r\n    },\r\n    total() {\r\n      this.$emit(\"input\", 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BasePagination.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BasePagination.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BasePagination.vue?vue&type=template&id=377bec32&\"\nimport script from \"./BasePagination.vue?vue&type=script&lang=js&\"\nexport * from \"./BasePagination.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"progress-wrapper\"},[_c('div',{class:(\"progress-\" + _vm.type)},[_c('div',{staticClass:\"progress-label\"},[_vm._t(\"label\",[_c('span',[_vm._v(_vm._s(_vm.label))])])],2),_c('div',{staticClass:\"progress-percentage\"},[_vm._t(\"default\",[_c('span',[_vm._v(_vm._s(_vm.value)+\"%\")])])],2)]),_c('div',{staticClass:\"progress\",style:((\"height: \" + _vm.height + \"px\"))},[_c('div',{staticClass:\"progress-bar\",class:_vm.computedClasses,style:((\"width: \" + _vm.value + \"%;\")),attrs:{\"role\":\"progressbar\",\"aria-valuenow\":_vm.value,\"aria-valuemin\":\"0\",\"aria-valuemax\":\"100\"}})])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"progress-wrapper\">\r\n    <div :class=\"`progress-${type}`\">\r\n      <div class=\"progress-label\">\r\n        <slot name=\"label\">\r\n          <span>{{label}}</span>\r\n        </slot>\r\n      </div>\r\n      <div class=\"progress-percentage\">\r\n        <slot>\r\n          <span>{{value}}%</span>\r\n        </slot>\r\n      </div>\r\n    </div>\r\n    <div class=\"progress\" :style=\"`height: ${height}px`\">\r\n      <div class=\"progress-bar\"\r\n           :class=\"computedClasses\"\r\n           role=\"progressbar\"\r\n           :aria-valuenow=\"value\"\r\n           aria-valuemin=\"0\"\r\n           aria-valuemax=\"100\"\r\n           :style=\"`width: ${value}%;`\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-progress\",\r\n  props: {\r\n    striped: {\r\n      type: Boolean,\r\n      description: \"Whether progress is striped\"\r\n    },\r\n    animated: {\r\n      type: Boolean,\r\n      description:\r\n        \"Whether progress is animated (works only with `striped` prop together)\"\r\n    },\r\n    label: {\r\n      type: String,\r\n      description: \"Progress label (shown on the left above progress)\"\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 8,\r\n      description: \"Progress line height\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      description: \"Progress type (e.g danger, primary etc)\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      validator: value => {\r\n        return value >= 0 && value <= 100;\r\n      },\r\n      description: \"Progress value\"\r\n    }\r\n  },\r\n  computed: {\r\n    computedClasses() {\r\n      return [\r\n        { \"progress-bar-striped\": this.striped },\r\n        { \"progress-bar-animated\": this.animated },\r\n        { [`bg-${this.type}`]: this.type }\r\n      ];\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseProgress.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseProgress.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseProgress.vue?vue&type=template&id=9f748afe&\"\nimport script from \"./BaseProgress.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseProgress.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"custom-control custom-radio\",class:[_vm.inlineClass, {disabled: _vm.disabled}]},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.model),expression:\"model\"}],staticClass:\"custom-control-input\",attrs:{\"id\":_vm.cbId,\"type\":\"radio\",\"disabled\":_vm.disabled},domProps:{\"value\":_vm.name,\"checked\":_vm._q(_vm.model,_vm.name)},on:{\"change\":function($event){_vm.model=_vm.name}}}),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":_vm.cbId}},[_vm._t(\"default\")],2)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"custom-control custom-radio\" :class=\"[inlineClass, {disabled: disabled}]\">\r\n    <input :id=\"cbId\"\r\n           class=\"custom-control-input\"\r\n           type=\"radio\"\r\n           :disabled=\"disabled\"\r\n           :value=\"name\"\r\n           v-model=\"model\" />\r\n    <label :for=\"cbId\" class=\"custom-control-label\">\r\n      <slot></slot>\r\n    </label>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { randomString } from \"./stringUtils\";\r\nexport default {\r\n  name: \"base-radio\",\r\n  props: {\r\n    name: {\r\n      type: [String, Number],\r\n      description: \"Radio label\"\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      description: \"Whether radio is disabled\"\r\n    },\r\n    value: {\r\n      type: [String, Boolean],\r\n      description: \"Radio value\"\r\n    },\r\n    inline: {\r\n      type: Boolean,\r\n      description: \"Whether radio is inline\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      cbId: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    model: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(value) {\r\n        this.$emit(\"input\", value);\r\n      }\r\n    },\r\n    inlineClass() {\r\n      if (this.inline) {\r\n        return `form-check-inline`;\r\n      }\r\n      return \"\";\r\n    }\r\n  },\r\n  mounted() {\r\n    this.cbId = randomString()\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseRadio.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseRadio.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseRadio.vue?vue&type=template&id=d0a5e86a&\"\nimport script from \"./BaseRadio.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseRadio.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"input-slider-container\"},[_c('div',{ref:\"slider\",staticClass:\"input-slider\",class:[(\"slider-\" + _vm.type)],attrs:{\"disabled\":_vm.disabled}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"input-slider-container\">\r\n        <div class=\"input-slider\"\r\n             ref=\"slider\"\r\n             :class=\"[`slider-${type}`]\"\r\n             :disabled=\"disabled\">\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport noUiSlider from \"nouislider\";\r\n\r\nexport default {\r\n  name: \"base-slider\",\r\n  props: {\r\n    value: {\r\n      type: [String, Array, Number],\r\n      description: \"Slider value\"\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      description: \"Whether slider is disabled\"\r\n    },\r\n    range: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          min: 0,\r\n          max: 100\r\n        };\r\n      },\r\n      description: \"Slider range (defaults to 0-100)\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Slider type (e.g primary, danger etc)\"\r\n    },\r\n    options: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      },\r\n      description: \"noUiSlider options\"\r\n    }\r\n  },\r\n  computed: {\r\n    connect() {\r\n      return Array.isArray(this.value) || [true, false];\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      slider: null\r\n    };\r\n  },\r\n  methods: {\r\n    createSlider() {\r\n      noUiSlider.create(this.$refs.slider, {\r\n        start: this.value,\r\n        connect: this.connect,\r\n        range: this.range,\r\n        ...this.options\r\n      });\r\n      const slider = this.$refs.slider.noUiSlider;\r\n      slider.on(\"slide\", () => {\r\n        let value = slider.get();\r\n        if (value !== this.value) {\r\n          this.$emit(\"input\", value);\r\n        }\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.createSlider();\r\n  },\r\n  watch: {\r\n    value(newValue, oldValue) {\r\n      const slider = this.$refs.slider.noUiSlider;\r\n      const sliderValue = slider.get();\r\n      if (newValue !== oldValue && sliderValue !== newValue) {\r\n        if (Array.isArray(sliderValue) && Array.isArray(newValue)) {\r\n          if (\r\n            oldValue.length === newValue.length &&\r\n            oldValue.every((v, i) => v === newValue[i])\r\n          ) {\r\n            slider.set(newValue);\r\n          }\r\n        } else {\r\n          slider.set(newValue);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseSlider.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseSlider.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseSlider.vue?vue&type=template&id=0a4759f7&\"\nimport script from \"./BaseSlider.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseSlider.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticClass:\"custom-toggle\"},[_c('input',_vm._g(_vm._b({directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.model),expression:\"model\"}],attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":Array.isArray(_vm.model)?_vm._i(_vm.model,null)>-1:(_vm.model)},on:{\"change\":function($event){var $$a=_vm.model,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.model=$$a.concat([$$v]))}else{$$i>-1&&(_vm.model=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.model=$$c}}}},'input',_vm.$attrs,false),_vm.$listeners)),_c('span',{staticClass:\"custom-toggle-slider rounded-circle\"})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <label class=\"custom-toggle\">\r\n        <input type=\"checkbox\"\r\n               v-model=\"model\"\r\n               v-bind=\"$attrs\"\r\n               v-on=\"$listeners\">\r\n        <span class=\"custom-toggle-slider rounded-circle\"></span>\r\n    </label>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-switch\",\r\n  inheritAttrs: false,\r\n  props: {\r\n    value: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Switch value\"\r\n    }\r\n  },\r\n  computed: {\r\n    model: {\r\n      get() {\r\n        return this.value;\r\n      },\r\n      set(value) {\r\n        this.$emit(\"input\", value);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseSwitch.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseSwitch.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./BaseSwitch.vue?vue&type=template&id=9abf3b52&\"\nimport script from \"./BaseSwitch.vue?vue&type=script&lang=js&\"\nexport * from \"./BaseSwitch.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {\nvar _obj, _obj$1, _obj$2;\nvar _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"card\",class:[\n     {'card-lift--hover': _vm.hover},\n     {'shadow': _vm.shadow},\n     ( _obj = {}, _obj[(\"shadow-\" + _vm.shadowSize)] = _vm.shadowSize, _obj ),\n     ( _obj$1 = {}, _obj$1[(\"bg-gradient-\" + _vm.gradient)] = _vm.gradient, _obj$1 ),\n     ( _obj$2 = {}, _obj$2[(\"bg-\" + _vm.type)] = _vm.type, _obj$2 )\n   ]},[(_vm.$slots.header)?_c('div',{staticClass:\"card-header\",class:_vm.headerClasses},[_vm._t(\"header\")],2):_vm._e(),(!_vm.noBody)?_c('div',{staticClass:\"card-body\",class:_vm.bodyClasses},[_vm._t(\"default\")],2):_vm._e(),(_vm.noBody)?_vm._t(\"default\"):_vm._e(),(_vm.$slots.footer)?_c('div',{staticClass:\"card-footer\",class:_vm.footerClasses},[_vm._t(\"footer\")],2):_vm._e()],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"card\"\r\n         :class=\"[\r\n         {'card-lift--hover': hover},\r\n         {'shadow': shadow},\r\n         {[`shadow-${shadowSize}`]: shadowSize},\r\n         {[`bg-gradient-${gradient}`]: gradient},\r\n         {[`bg-${type}`]: type}\r\n       ]\">\r\n        <div class=\"card-header\" :class=\"headerClasses\" v-if=\"$slots.header\">\r\n            <slot name=\"header\">\r\n            </slot>\r\n        </div>\r\n        <div class=\"card-body\" :class=\"bodyClasses\" v-if=\"!noBody\">\r\n            <slot></slot>\r\n        </div>\r\n\r\n        <slot v-if=\"noBody\"></slot>\r\n\r\n        <div class=\"card-footer\" :class=\"footerClasses\" v-if=\"$slots.footer\">\r\n            <slot name=\"footer\"></slot>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"card\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      description: \"Card type\"\r\n    },\r\n    gradient: {\r\n      type: String,\r\n      description: \"Card background gradient type (warning,danger etc)\"\r\n    },\r\n    hover: {\r\n      type: Boolean,\r\n      description: \"Whether card should move on hover\"\r\n    },\r\n    shadow: {\r\n      type: Boolean,\r\n      description: \"Whether card has shadow\"\r\n    },\r\n    shadowSize: {\r\n      type: String,\r\n      description: \"Card shadow size\"\r\n    },\r\n    noBody: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether card should have wrapper body class\"\r\n    },\r\n    bodyClasses: {\r\n      type: [String, Object, Array],\r\n      description: \"Card body css classes\"\r\n    },\r\n    headerClasses: {\r\n      type: [String, Object, Array],\r\n      description: \"Card header css classes\"\r\n    },\r\n    footerClasses: {\r\n      type: [String, Object, Array],\r\n      description: \"Card footer css classes\"\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Card.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Card.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Card.vue?vue&type=template&id=f5e01c44&\"\nimport script from \"./Card.vue?vue&type=script&lang=js&\"\nexport * from \"./Card.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"icon icon-shape\",class:[\n        _vm.size && (\"icon-\" + _vm.size),\n        _vm.type && (\"icon-shape-\" + _vm.type),\n        _vm.gradient && (\"bg-gradient-\" + _vm.gradient),\n        _vm.shadow && 'shadow',\n        _vm.rounded && 'rounded-circle',\n        _vm.color && (\"text-\" + _vm.color)\n     ]},[_vm._t(\"default\",[_c('i',{class:_vm.name})])],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"icon icon-shape\"\r\n         :class=\"[\r\n            size && `icon-${size}`,\r\n            type && `icon-shape-${type}`,\r\n            gradient && `bg-gradient-${gradient}`,\r\n            shadow && 'shadow',\r\n            rounded && 'rounded-circle',\r\n            color && `text-${color}`\r\n         ]\">\r\n        <slot>\r\n            <i :class=\"name\"></i>\r\n        </slot>\r\n    </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"icon\",\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon name\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon size\"\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon type (primary, warning etc)\"\r\n    },\r\n    gradient: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon gradient type (primary, warning etc)\"\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Icon color (primary, warning etc)\"\r\n    },\r\n    shadow: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether icon has shadow\"\r\n    },\r\n    rounded: {\r\n      type: Boolean,\r\n      default: false,\r\n      description: \"Whether icon is rounded\"\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Icon.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Icon.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Icon.vue?vue&type=template&id=06cfbd7d&\"\nimport script from \"./Icon.vue?vue&type=script&lang=js&\"\nexport * from \"./Icon.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Badge from \"../components/Badge\";\r\nimport BaseAlert from \"../components/BaseAlert\";\r\nimport BaseButton from \"../components/BaseButton\";\r\nimport BaseCheckbox from \"../components/BaseCheckbox\";\r\nimport BaseInput from \"../components/BaseInput\";\r\nimport Modal from \"../components/Modal\";\r\nimport BasePagination from \"../components/BasePagination\";\r\nimport BaseProgress from \"../components/BaseProgress\";\r\nimport BaseRadio from \"../components/BaseRadio\";\r\nimport BaseSlider from \"../components/BaseSlider\";\r\nimport BaseSwitch from \"../components/BaseSwitch\";\r\nimport Card from \"../components/Card\";\r\nimport Icon from \"../components/Icon\";\r\n\r\nexport default {\r\n  install(Vue) {\r\n    Vue.component(Badge.name, Badge);\r\n    Vue.component(BaseAlert.name, BaseAlert);\r\n    Vue.component(BaseButton.name, BaseButton);\r\n    Vue.component(BaseInput.name, BaseInput);\r\n    Vue.component(Modal.name, Modal);\r\n    Vue.component(BaseCheckbox.name, BaseCheckbox);\r\n    Vue.component(BasePagination.name, BasePagination);\r\n    Vue.component(BaseProgress.name, BaseProgress);\r\n    Vue.component(BaseRadio.name, BaseRadio);\r\n    Vue.component(BaseSlider.name, BaseSlider);\r\n    Vue.component(BaseSwitch.name, BaseSwitch);\r\n    Vue.component(Card.name, Card);\r\n    Vue.component(Icon.name, Icon);\r\n  }\r\n};\r\n","export default {\r\n  bind: function(el, binding, vnode) {\r\n    el.clickOutsideEvent = function(event) {\r\n      // here I check that click was outside the el and his childrens\r\n      if (!(el == event.target || el.contains(event.target))) {\r\n        // and if it did, call method provided in attribute value\r\n        vnode.context[binding.expression](event);\r\n      }\r\n    };\r\n    document.body.addEventListener(\"click\", el.clickOutsideEvent);\r\n  },\r\n  unbind: function(el) {\r\n    document.body.removeEventListener(\"click\", el.clickOutsideEvent);\r\n  }\r\n};\r\n","import clickOutside from \"../directives/click-ouside.js\";\r\n\r\n/**\r\n * You can register global directives here and use them as a plugin in your main Vue instance\r\n */\r\n\r\nconst GlobalDirectives = {\r\n  install(Vue) {\r\n    Vue.directive(\"click-outside\", clickOutside);\r\n  }\r\n};\r\n\r\nexport default GlobalDirectives;\r\n","import \"@/assets/vendor/nucleo/css/nucleo.css\";\r\nimport \"@/assets/vendor/font-awesome/css/font-awesome.css\";\r\nimport \"@/assets/scss/argon.scss\";\r\nimport globalComponents from \"./globalComponents\";\r\nimport globalDirectives from \"./globalDirectives\";\r\nimport VueLazyload from \"vue-lazyload\";\r\n\r\nexport default {\r\n  install(Vue) {\r\n    Vue.use(globalComponents);\r\n    Vue.use(globalDirectives);\r\n    Vue.use(VueLazyload);\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\n\r\nimport { register } from 'register-service-worker'\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  register(`${process.env.BASE_URL}service-worker.js`, {\r\n    ready () {\r\n      console.log(\r\n        'App is being served from cache by a service worker.\\n' +\r\n        'For more details, visit https://goo.gl/AFskqB'\r\n      )\r\n    },\r\n    registered () {\r\n      console.log('Service worker has been registered.')\r\n    },\r\n    cached () {\r\n      console.log('Content has been cached for offline use.')\r\n    },\r\n    updatefound () {\r\n      console.log('New content is downloading.')\r\n    },\r\n    updated () {\r\n      console.log('New content is available; please refresh.')\r\n    },\r\n    offline () {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    },\r\n    error (error) {\r\n      console.error('Error during service worker registration:', error)\r\n    }\r\n  })\r\n}\r\n","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n\r\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\r\n// for convenience\r\n\r\n/* Plugin for jQuery for working with colors.\r\n *\r\n * Version 1.1.\r\n *\r\n * Inspiration from jQuery color animation plugin by John Resig.\r\n *\r\n * Released under the MIT license by Ole Laursen, October 2009.\r\n *\r\n * Examples:\r\n *\r\n *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\r\n *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\r\n *   console.log(c.r, c.g, c.b, c.a);\r\n *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\r\n *\r\n * Note that .scale() and .add() return the same modified object\r\n * instead of making a new one.\r\n *\r\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\r\n * produce a color rather than just crashing.\r\n */\r\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\r\n\r\n// the actual Flot code\r\n(function($) {\r\n\r\n\t// Cache the prototype hasOwnProperty for faster access\r\n\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\r\n    // operation produces the same effect as detach, i.e. removing the element\r\n    // without touching its jQuery data.\r\n\r\n    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\r\n\r\n    if (!$.fn.detach) {\r\n        $.fn.detach = function() {\r\n            return this.each(function() {\r\n                if (this.parentNode) {\r\n                    this.parentNode.removeChild( this );\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n\t///////////////////////////////////////////////////////////////////////////\r\n\t// The Canvas object is a wrapper around an HTML5 <canvas> tag.\r\n\t//\r\n\t// @constructor\r\n\t// @param {string} cls List of classes to apply to the canvas.\r\n\t// @param {element} container Element onto which to append the canvas.\r\n\t//\r\n\t// Requiring a container is a little iffy, but unfortunately canvas\r\n\t// operations don't work unless the canvas is attached to the DOM.\r\n\r\n\tfunction Canvas(cls, container) {\r\n\r\n\t\tvar element = container.children(\".\" + cls)[0];\r\n\r\n\t\tif (element == null) {\r\n\r\n\t\t\telement = document.createElement(\"canvas\");\r\n\t\t\telement.className = cls;\r\n\r\n\t\t\t$(element).css({ direction: \"ltr\", position: \"absolute\", left: 0, top: 0 })\r\n\t\t\t\t.appendTo(container);\r\n\r\n\t\t\t// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\r\n\r\n\t\t\tif (!element.getContext) {\r\n\t\t\t\tif (window.G_vmlCanvasManager) {\r\n\t\t\t\t\telement = window.G_vmlCanvasManager.initElement(element);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.element = element;\r\n\r\n\t\tvar context = this.context = element.getContext(\"2d\");\r\n\r\n\t\t// Determine the screen's ratio of physical to device-independent\r\n\t\t// pixels.  This is the ratio between the canvas width that the browser\r\n\t\t// advertises and the number of pixels actually present in that space.\r\n\r\n\t\t// The iPhone 4, for example, has a device-independent width of 320px,\r\n\t\t// but its screen is actually 640px wide.  It therefore has a pixel\r\n\t\t// ratio of 2, while most normal devices have a ratio of 1.\r\n\r\n\t\tvar devicePixelRatio = window.devicePixelRatio || 1,\r\n\t\t\tbackingStoreRatio =\r\n\t\t\t\tcontext.webkitBackingStorePixelRatio ||\r\n\t\t\t\tcontext.mozBackingStorePixelRatio ||\r\n\t\t\t\tcontext.msBackingStorePixelRatio ||\r\n\t\t\t\tcontext.oBackingStorePixelRatio ||\r\n\t\t\t\tcontext.backingStorePixelRatio || 1;\r\n\r\n\t\tthis.pixelRatio = devicePixelRatio / backingStoreRatio;\r\n\r\n\t\t// Size the canvas to match the internal dimensions of its container\r\n\r\n\t\tthis.resize(container.width(), container.height());\r\n\r\n\t\t// Collection of HTML div layers for text overlaid onto the canvas\r\n\r\n\t\tthis.textContainer = null;\r\n\t\tthis.text = {};\r\n\r\n\t\t// Cache of text fragments and metrics, so we can avoid expensively\r\n\t\t// re-calculating them when the plot is re-rendered in a loop.\r\n\r\n\t\tthis._textCache = {};\r\n\t}\r\n\r\n\t// Resizes the canvas to the given dimensions.\r\n\t//\r\n\t// @param {number} width New width of the canvas, in pixels.\r\n\t// @param {number} width New height of the canvas, in pixels.\r\n\r\n\tCanvas.prototype.resize = function(width, height) {\r\n\r\n\t\tif (width <= 0 || height <= 0) {\r\n\t\t\tthrow new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\r\n\t\t}\r\n\r\n\t\tvar element = this.element,\r\n\t\t\tcontext = this.context,\r\n\t\t\tpixelRatio = this.pixelRatio;\r\n\r\n\t\t// Resize the canvas, increasing its density based on the display's\r\n\t\t// pixel ratio; basically giving it more pixels without increasing the\r\n\t\t// size of its element, to take advantage of the fact that retina\r\n\t\t// displays have that many more pixels in the same advertised space.\r\n\r\n\t\t// Resizing should reset the state (excanvas seems to be buggy though)\r\n\r\n\t\tif (this.width != width) {\r\n\t\t\telement.width = width * pixelRatio;\r\n\t\t\telement.style.width = width + \"px\";\r\n\t\t\tthis.width = width;\r\n\t\t}\r\n\r\n\t\tif (this.height != height) {\r\n\t\t\telement.height = height * pixelRatio;\r\n\t\t\telement.style.height = height + \"px\";\r\n\t\t\tthis.height = height;\r\n\t\t}\r\n\r\n\t\t// Save the context, so we can reset in case we get replotted.  The\r\n\t\t// restore ensure that we're really back at the initial state, and\r\n\t\t// should be safe even if we haven't saved the initial state yet.\r\n\r\n\t\tcontext.restore();\r\n\t\tcontext.save();\r\n\r\n\t\t// Scale the coordinate space to match the display density; so even though we\r\n\t\t// may have twice as many pixels, we still want lines and other drawing to\r\n\t\t// appear at the same size; the extra pixels will just make them crisper.\r\n\r\n\t\tcontext.scale(pixelRatio, pixelRatio);\r\n\t};\r\n\r\n\t// Clears the entire canvas area, not including any overlaid HTML text\r\n\r\n\tCanvas.prototype.clear = function() {\r\n\t\tthis.context.clearRect(0, 0, this.width, this.height);\r\n\t};\r\n\r\n\t// Finishes rendering the canvas, including managing the text overlay.\r\n\r\n\tCanvas.prototype.render = function() {\r\n\r\n\t\tvar cache = this._textCache;\r\n\r\n\t\t// For each text layer, add elements marked as active that haven't\r\n\t\t// already been rendered, and remove those that are no longer active.\r\n\r\n\t\tfor (var layerKey in cache) {\r\n\t\t\tif (hasOwnProperty.call(cache, layerKey)) {\r\n\r\n\t\t\t\tvar layer = this.getTextLayer(layerKey),\r\n\t\t\t\t\tlayerCache = cache[layerKey];\r\n\r\n\t\t\t\tlayer.hide();\r\n\r\n\t\t\t\tfor (var styleKey in layerCache) {\r\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\r\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\r\n\t\t\t\t\t\tfor (var key in styleCache) {\r\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\r\n\r\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\r\n\r\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\r\n\t\t\t\t\t\t\t\t\tif (position.active) {\r\n\t\t\t\t\t\t\t\t\t\tif (!position.rendered) {\r\n\t\t\t\t\t\t\t\t\t\t\tlayer.append(position.element);\r\n\t\t\t\t\t\t\t\t\t\t\tposition.rendered = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tpositions.splice(i--, 1);\r\n\t\t\t\t\t\t\t\t\t\tif (position.rendered) {\r\n\t\t\t\t\t\t\t\t\t\t\tposition.element.detach();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif (positions.length == 0) {\r\n\t\t\t\t\t\t\t\t\tdelete styleCache[key];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlayer.show();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Creates (if necessary) and returns the text overlay container.\r\n\t//\r\n\t// @param {string} classes String of space-separated CSS classes used to\r\n\t//     uniquely identify the text layer.\r\n\t// @return {object} The jQuery-wrapped text-layer div.\r\n\r\n\tCanvas.prototype.getTextLayer = function(classes) {\r\n\r\n\t\tvar layer = this.text[classes];\r\n\r\n\t\t// Create the text layer if it doesn't exist\r\n\r\n\t\tif (layer == null) {\r\n\r\n\t\t\t// Create the text layer container, if it doesn't exist\r\n\r\n\t\t\tif (this.textContainer == null) {\r\n\t\t\t\tthis.textContainer = $(\"<div class='flot-text'></div>\")\r\n\t\t\t\t\t.css({\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\ttop: 0,\r\n\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\tbottom: 0,\r\n\t\t\t\t\t\tright: 0,\r\n\t\t\t\t\t\t'font-size': \"smaller\",\r\n\t\t\t\t\t\tcolor: \"#545454\"\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.insertAfter(this.element);\r\n\t\t\t}\r\n\r\n\t\t\tlayer = this.text[classes] = $(\"<div></div>\")\r\n\t\t\t\t.addClass(classes)\r\n\t\t\t\t.css({\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\ttop: 0,\r\n\t\t\t\t\tleft: 0,\r\n\t\t\t\t\tbottom: 0,\r\n\t\t\t\t\tright: 0\r\n\t\t\t\t})\r\n\t\t\t\t.appendTo(this.textContainer);\r\n\t\t}\r\n\r\n\t\treturn layer;\r\n\t};\r\n\r\n\t// Creates (if necessary) and returns a text info object.\r\n\t//\r\n\t// The object looks like this:\r\n\t//\r\n\t// {\r\n\t//     width: Width of the text's wrapper div.\r\n\t//     height: Height of the text's wrapper div.\r\n\t//     element: The jQuery-wrapped HTML div containing the text.\r\n\t//     positions: Array of positions at which this text is drawn.\r\n\t// }\r\n\t//\r\n\t// The positions array contains objects that look like this:\r\n\t//\r\n\t// {\r\n\t//     active: Flag indicating whether the text should be visible.\r\n\t//     rendered: Flag indicating whether the text is currently visible.\r\n\t//     element: The jQuery-wrapped HTML div containing the text.\r\n\t//     x: X coordinate at which to draw the text.\r\n\t//     y: Y coordinate at which to draw the text.\r\n\t// }\r\n\t//\r\n\t// Each position after the first receives a clone of the original element.\r\n\t//\r\n\t// The idea is that that the width, height, and general 'identity' of the\r\n\t// text is constant no matter where it is placed; the placements are a\r\n\t// secondary property.\r\n\t//\r\n\t// Canvas maintains a cache of recently-used text info objects; getTextInfo\r\n\t// either returns the cached element or creates a new entry.\r\n\t//\r\n\t// @param {string} layer A string of space-separated CSS classes uniquely\r\n\t//     identifying the layer containing this text.\r\n\t// @param {string} text Text string to retrieve info for.\r\n\t// @param {(string|object)=} font Either a string of space-separated CSS\r\n\t//     classes or a font-spec object, defining the text's font and style.\r\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\r\n\t//     Angle is currently unused, it will be implemented in the future.\r\n\t// @param {number=} width Maximum width of the text before it wraps.\r\n\t// @return {object} a text info object.\r\n\r\n\tCanvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\r\n\r\n\t\tvar textStyle, layerCache, styleCache, info;\r\n\r\n\t\t// Cast the value to a string, in case we were given a number or such\r\n\r\n\t\ttext = \"\" + text;\r\n\r\n\t\t// If the font is a font-spec object, generate a CSS font definition\r\n\r\n\t\tif (typeof font === \"object\") {\r\n\t\t\ttextStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\r\n\t\t} else {\r\n\t\t\ttextStyle = font;\r\n\t\t}\r\n\r\n\t\t// Retrieve (or create) the cache for the text's layer and styles\r\n\r\n\t\tlayerCache = this._textCache[layer];\r\n\r\n\t\tif (layerCache == null) {\r\n\t\t\tlayerCache = this._textCache[layer] = {};\r\n\t\t}\r\n\r\n\t\tstyleCache = layerCache[textStyle];\r\n\r\n\t\tif (styleCache == null) {\r\n\t\t\tstyleCache = layerCache[textStyle] = {};\r\n\t\t}\r\n\r\n\t\tinfo = styleCache[text];\r\n\r\n\t\t// If we can't find a matching element in our cache, create a new one\r\n\r\n\t\tif (info == null) {\r\n\r\n\t\t\tvar element = $(\"<div></div>\").html(text)\r\n\t\t\t\t.css({\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t'max-width': width,\r\n\t\t\t\t\ttop: -9999\r\n\t\t\t\t})\r\n\t\t\t\t.appendTo(this.getTextLayer(layer));\r\n\r\n\t\t\tif (typeof font === \"object\") {\r\n\t\t\t\telement.css({\r\n\t\t\t\t\tfont: textStyle,\r\n\t\t\t\t\tcolor: font.color\r\n\t\t\t\t});\r\n\t\t\t} else if (typeof font === \"string\") {\r\n\t\t\t\telement.addClass(font);\r\n\t\t\t}\r\n\r\n\t\t\tinfo = styleCache[text] = {\r\n\t\t\t\twidth: element.outerWidth(true),\r\n\t\t\t\theight: element.outerHeight(true),\r\n\t\t\t\telement: element,\r\n\t\t\t\tpositions: []\r\n\t\t\t};\r\n\r\n\t\t\telement.detach();\r\n\t\t}\r\n\r\n\t\treturn info;\r\n\t};\r\n\r\n\t// Adds a text string to the canvas text overlay.\r\n\t//\r\n\t// The text isn't drawn immediately; it is marked as rendering, which will\r\n\t// result in its addition to the canvas on the next render pass.\r\n\t//\r\n\t// @param {string} layer A string of space-separated CSS classes uniquely\r\n\t//     identifying the layer containing this text.\r\n\t// @param {number} x X coordinate at which to draw the text.\r\n\t// @param {number} y Y coordinate at which to draw the text.\r\n\t// @param {string} text Text string to draw.\r\n\t// @param {(string|object)=} font Either a string of space-separated CSS\r\n\t//     classes or a font-spec object, defining the text's font and style.\r\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\r\n\t//     Angle is currently unused, it will be implemented in the future.\r\n\t// @param {number=} width Maximum width of the text before it wraps.\r\n\t// @param {string=} halign Horizontal alignment of the text; either \"left\",\r\n\t//     \"center\" or \"right\".\r\n\t// @param {string=} valign Vertical alignment of the text; either \"top\",\r\n\t//     \"middle\" or \"bottom\".\r\n\r\n\tCanvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\r\n\r\n\t\tvar info = this.getTextInfo(layer, text, font, angle, width),\r\n\t\t\tpositions = info.positions;\r\n\r\n\t\t// Tweak the div's position to match the text's alignment\r\n\r\n\t\tif (halign == \"center\") {\r\n\t\t\tx -= info.width / 2;\r\n\t\t} else if (halign == \"right\") {\r\n\t\t\tx -= info.width;\r\n\t\t}\r\n\r\n\t\tif (valign == \"middle\") {\r\n\t\t\ty -= info.height / 2;\r\n\t\t} else if (valign == \"bottom\") {\r\n\t\t\ty -= info.height;\r\n\t\t}\r\n\r\n\t\t// Determine whether this text already exists at this position.\r\n\t\t// If so, mark it for inclusion in the next render pass.\r\n\r\n\t\tfor (var i = 0, position; position = positions[i]; i++) {\r\n\t\t\tif (position.x == x && position.y == y) {\r\n\t\t\t\tposition.active = true;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the text doesn't exist at this position, create a new entry\r\n\r\n\t\t// For the very first position we'll re-use the original element,\r\n\t\t// while for subsequent ones we'll clone it.\r\n\r\n\t\tposition = {\r\n\t\t\tactive: true,\r\n\t\t\trendered: false,\r\n\t\t\telement: positions.length ? info.element.clone() : info.element,\r\n\t\t\tx: x,\r\n\t\t\ty: y\r\n\t\t};\r\n\r\n\t\tpositions.push(position);\r\n\r\n\t\t// Move the element to its final position within the container\r\n\r\n\t\tposition.element.css({\r\n\t\t\ttop: Math.round(y),\r\n\t\t\tleft: Math.round(x),\r\n\t\t\t'text-align': halign\t// In case the text wraps\r\n\t\t});\r\n\t};\r\n\r\n\t// Removes one or more text strings from the canvas text overlay.\r\n\t//\r\n\t// If no parameters are given, all text within the layer is removed.\r\n\t//\r\n\t// Note that the text is not immediately removed; it is simply marked as\r\n\t// inactive, which will result in its removal on the next render pass.\r\n\t// This avoids the performance penalty for 'clear and redraw' behavior,\r\n\t// where we potentially get rid of all text on a layer, but will likely\r\n\t// add back most or all of it later, as when redrawing axes, for example.\r\n\t//\r\n\t// @param {string} layer A string of space-separated CSS classes uniquely\r\n\t//     identifying the layer containing this text.\r\n\t// @param {number=} x X coordinate of the text.\r\n\t// @param {number=} y Y coordinate of the text.\r\n\t// @param {string=} text Text string to remove.\r\n\t// @param {(string|object)=} font Either a string of space-separated CSS\r\n\t//     classes or a font-spec object, defining the text's font and style.\r\n\t// @param {number=} angle Angle at which the text is rotated, in degrees.\r\n\t//     Angle is currently unused, it will be implemented in the future.\r\n\r\n\tCanvas.prototype.removeText = function(layer, x, y, text, font, angle) {\r\n\t\tif (text == null) {\r\n\t\t\tvar layerCache = this._textCache[layer];\r\n\t\t\tif (layerCache != null) {\r\n\t\t\t\tfor (var styleKey in layerCache) {\r\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\r\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\r\n\t\t\t\t\t\tfor (var key in styleCache) {\r\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\r\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\r\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\r\n\t\t\t\t\t\t\t\t\tposition.active = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar positions = this.getTextInfo(layer, text, font, angle).positions;\r\n\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\r\n\t\t\t\tif (position.x == x && position.y == y) {\r\n\t\t\t\t\tposition.active = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t///////////////////////////////////////////////////////////////////////////\r\n\t// The top-level container for the entire plot.\r\n\r\n    function Plot(placeholder, data_, options_, plugins) {\r\n        // data is on the form:\r\n        //   [ series1, series2 ... ]\r\n        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\r\n        // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\r\n\r\n        var series = [],\r\n            options = {\r\n                // the color theme used for graphs\r\n                colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\r\n                legend: {\r\n                    show: true,\r\n                    noColumns: 1, // number of colums in legend table\r\n                    labelFormatter: null, // fn: string -> string\r\n                    labelBoxBorderColor: \"#ccc\", // border color for the little label boxes\r\n                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\r\n                    position: \"ne\", // position of default legend container within plot\r\n                    margin: 5, // distance from grid edge to default legend container within plot\r\n                    backgroundColor: null, // null means auto-detect\r\n                    backgroundOpacity: 0.85, // set to 0 to avoid background\r\n                    sorted: null    // default to no legend sorting\r\n                },\r\n                xaxis: {\r\n                    show: null, // null = auto-detect, true = always, false = never\r\n                    position: \"bottom\", // or \"top\"\r\n                    mode: null, // null or \"time\"\r\n                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\r\n                    color: null, // base color, labels, ticks\r\n                    tickColor: null, // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\r\n                    transform: null, // null or f: number -> number to transform axis\r\n                    inverseTransform: null, // if transform is set, this should be the inverse function\r\n                    min: null, // min. value to show, null means set automatically\r\n                    max: null, // max. value to show, null means set automatically\r\n                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\r\n                    ticks: null, // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\r\n                    tickFormatter: null, // fn: number -> string\r\n                    labelWidth: null, // size of tick labels in pixels\r\n                    labelHeight: null,\r\n                    reserveSpace: null, // whether to reserve space even if axis isn't shown\r\n                    tickLength: null, // size in pixels of ticks, or \"full\" for whole line\r\n                    alignTicksWithAxis: null, // axis number or null for no sync\r\n                    tickDecimals: null, // no. of decimals, null means auto\r\n                    tickSize: null, // number or [number, \"unit\"]\r\n                    minTickSize: null // number or [number, \"unit\"]\r\n                },\r\n                yaxis: {\r\n                    autoscaleMargin: 0.02,\r\n                    position: \"left\" // or \"right\"\r\n                },\r\n                xaxes: [],\r\n                yaxes: [],\r\n                series: {\r\n                    points: {\r\n                        show: false,\r\n                        radius: 3,\r\n                        lineWidth: 2, // in pixels\r\n                        fill: true,\r\n                        fillColor: \"#ffffff\",\r\n                        symbol: \"circle\" // or callback\r\n                    },\r\n                    lines: {\r\n                        // we don't put in show: false so we can see\r\n                        // whether lines were actively disabled\r\n                        lineWidth: 2, // in pixels\r\n                        fill: false,\r\n                        fillColor: null,\r\n                        steps: false\r\n                        // Omit 'zero', so we can later default its value to\r\n                        // match that of the 'fill' option.\r\n                    },\r\n                    bars: {\r\n                        show: false,\r\n                        lineWidth: 2, // in pixels\r\n                        barWidth: 1, // in units of the x axis\r\n                        fill: true,\r\n                        fillColor: null,\r\n                        align: \"left\", // \"left\", \"right\", or \"center\"\r\n                        horizontal: false,\r\n                        zero: true\r\n                    },\r\n                    shadowSize: 3,\r\n                    highlightColor: null\r\n                },\r\n                grid: {\r\n                    show: true,\r\n                    aboveData: false,\r\n                    color: \"#545454\", // primary color used for outline and labels\r\n                    backgroundColor: null, // null for transparent, else color\r\n                    borderColor: null, // set if different from the grid color\r\n                    tickColor: null, // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\r\n                    margin: 0, // distance from the canvas edge to the grid\r\n                    labelMargin: 5, // in pixels\r\n                    axisMargin: 8, // in pixels\r\n                    borderWidth: 2, // in pixels\r\n                    minBorderMargin: null, // in pixels, null means taken from points radius\r\n                    markings: null, // array of ranges or fn: axes -> array of ranges\r\n                    markingsColor: \"#f4f4f4\",\r\n                    markingsLineWidth: 2,\r\n                    // interactive stuff\r\n                    clickable: false,\r\n                    hoverable: false,\r\n                    autoHighlight: true, // highlight in case mouse is near\r\n                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\r\n                },\r\n                interaction: {\r\n                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\r\n                },\r\n                hooks: {}\r\n            },\r\n        surface = null,     // the canvas for the plot itself\r\n        overlay = null,     // canvas for interactive stuff on top of plot\r\n        eventHolder = null, // jQuery object that events should be bound to\r\n        ctx = null, octx = null,\r\n        xaxes = [], yaxes = [],\r\n        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\r\n        plotWidth = 0, plotHeight = 0,\r\n        hooks = {\r\n            processOptions: [],\r\n            processRawData: [],\r\n            processDatapoints: [],\r\n            processOffset: [],\r\n            drawBackground: [],\r\n            drawSeries: [],\r\n            draw: [],\r\n            bindEvents: [],\r\n            drawOverlay: [],\r\n            shutdown: []\r\n        },\r\n        plot = this;\r\n\r\n        // public functions\r\n        plot.setData = setData;\r\n        plot.setupGrid = setupGrid;\r\n        plot.draw = draw;\r\n        plot.getPlaceholder = function() { return placeholder; };\r\n        plot.getCanvas = function() { return surface.element; };\r\n        plot.getPlotOffset = function() { return plotOffset; };\r\n        plot.width = function () { return plotWidth; };\r\n        plot.height = function () { return plotHeight; };\r\n        plot.offset = function () {\r\n            var o = eventHolder.offset();\r\n            o.left += plotOffset.left;\r\n            o.top += plotOffset.top;\r\n            return o;\r\n        };\r\n        plot.getData = function () { return series; };\r\n        plot.getAxes = function () {\r\n            var res = {}, i;\r\n            $.each(xaxes.concat(yaxes), function (_, axis) {\r\n                if (axis)\r\n                    res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\r\n            });\r\n            return res;\r\n        };\r\n        plot.getXAxes = function () { return xaxes; };\r\n        plot.getYAxes = function () { return yaxes; };\r\n        plot.c2p = canvasToAxisCoords;\r\n        plot.p2c = axisToCanvasCoords;\r\n        plot.getOptions = function () { return options; };\r\n        plot.highlight = highlight;\r\n        plot.unhighlight = unhighlight;\r\n        plot.triggerRedrawOverlay = triggerRedrawOverlay;\r\n        plot.pointOffset = function(point) {\r\n            return {\r\n                left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\r\n                top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\r\n            };\r\n        };\r\n        plot.shutdown = shutdown;\r\n        plot.destroy = function () {\r\n            shutdown();\r\n            placeholder.removeData(\"plot\").empty();\r\n\r\n            series = [];\r\n            options = null;\r\n            surface = null;\r\n            overlay = null;\r\n            eventHolder = null;\r\n            ctx = null;\r\n            octx = null;\r\n            xaxes = [];\r\n            yaxes = [];\r\n            hooks = null;\r\n            highlights = [];\r\n            plot = null;\r\n        };\r\n        plot.resize = function () {\r\n        \tvar width = placeholder.width(),\r\n        \t\theight = placeholder.height();\r\n            surface.resize(width, height);\r\n            overlay.resize(width, height);\r\n        };\r\n\r\n        // public attributes\r\n        plot.hooks = hooks;\r\n\r\n        // initialize\r\n        initPlugins(plot);\r\n        parseOptions(options_);\r\n        setupCanvases();\r\n        setData(data_);\r\n        setupGrid();\r\n        draw();\r\n        bindEvents();\r\n\r\n\r\n        function executeHooks(hook, args) {\r\n            args = [plot].concat(args);\r\n            for (var i = 0; i < hook.length; ++i)\r\n                hook[i].apply(this, args);\r\n        }\r\n\r\n        function initPlugins() {\r\n\r\n            // References to key classes, allowing plugins to modify them\r\n\r\n            var classes = {\r\n                Canvas: Canvas\r\n            };\r\n\r\n            for (var i = 0; i < plugins.length; ++i) {\r\n                var p = plugins[i];\r\n                p.init(plot, classes);\r\n                if (p.options)\r\n                    $.extend(true, options, p.options);\r\n            }\r\n        }\r\n\r\n        function parseOptions(opts) {\r\n\r\n            $.extend(true, options, opts);\r\n\r\n            // $.extend merges arrays, rather than replacing them.  When less\r\n            // colors are provided than the size of the default palette, we\r\n            // end up with those colors plus the remaining defaults, which is\r\n            // not expected behavior; avoid it by replacing them here.\r\n\r\n            if (opts && opts.colors) {\r\n            \toptions.colors = opts.colors;\r\n            }\r\n\r\n            if (options.xaxis.color == null)\r\n                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\r\n            if (options.yaxis.color == null)\r\n                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\r\n\r\n            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\r\n                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\r\n            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\r\n                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\r\n\r\n            if (options.grid.borderColor == null)\r\n                options.grid.borderColor = options.grid.color;\r\n            if (options.grid.tickColor == null)\r\n                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();\r\n\r\n            // Fill in defaults for axis options, including any unspecified\r\n            // font-spec fields, if a font-spec was provided.\r\n\r\n            // If no x/y axis options were provided, create one of each anyway,\r\n            // since the rest of the code assumes that they exist.\r\n\r\n            var i, axisOptions, axisCount,\r\n                fontSize = placeholder.css(\"font-size\"),\r\n                fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\r\n                fontDefaults = {\r\n                    style: placeholder.css(\"font-style\"),\r\n                    size: Math.round(0.8 * fontSizeDefault),\r\n                    variant: placeholder.css(\"font-variant\"),\r\n                    weight: placeholder.css(\"font-weight\"),\r\n                    family: placeholder.css(\"font-family\")\r\n                };\r\n\r\n            axisCount = options.xaxes.length || 1;\r\n            for (i = 0; i < axisCount; ++i) {\r\n\r\n                axisOptions = options.xaxes[i];\r\n                if (axisOptions && !axisOptions.tickColor) {\r\n                    axisOptions.tickColor = axisOptions.color;\r\n                }\r\n\r\n                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\r\n                options.xaxes[i] = axisOptions;\r\n\r\n                if (axisOptions.font) {\r\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\r\n                    if (!axisOptions.font.color) {\r\n                        axisOptions.font.color = axisOptions.color;\r\n                    }\r\n                    if (!axisOptions.font.lineHeight) {\r\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\r\n                    }\r\n                }\r\n            }\r\n\r\n            axisCount = options.yaxes.length || 1;\r\n            for (i = 0; i < axisCount; ++i) {\r\n\r\n                axisOptions = options.yaxes[i];\r\n                if (axisOptions && !axisOptions.tickColor) {\r\n                    axisOptions.tickColor = axisOptions.color;\r\n                }\r\n\r\n                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\r\n                options.yaxes[i] = axisOptions;\r\n\r\n                if (axisOptions.font) {\r\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\r\n                    if (!axisOptions.font.color) {\r\n                        axisOptions.font.color = axisOptions.color;\r\n                    }\r\n                    if (!axisOptions.font.lineHeight) {\r\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // backwards compatibility, to be removed in future\r\n            if (options.xaxis.noTicks && options.xaxis.ticks == null)\r\n                options.xaxis.ticks = options.xaxis.noTicks;\r\n            if (options.yaxis.noTicks && options.yaxis.ticks == null)\r\n                options.yaxis.ticks = options.yaxis.noTicks;\r\n            if (options.x2axis) {\r\n                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\r\n                options.xaxes[1].position = \"top\";\r\n                // Override the inherit to allow the axis to auto-scale\r\n                if (options.x2axis.min == null) {\r\n                    options.xaxes[1].min = null;\r\n                }\r\n                if (options.x2axis.max == null) {\r\n                    options.xaxes[1].max = null;\r\n                }\r\n            }\r\n            if (options.y2axis) {\r\n                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\r\n                options.yaxes[1].position = \"right\";\r\n                // Override the inherit to allow the axis to auto-scale\r\n                if (options.y2axis.min == null) {\r\n                    options.yaxes[1].min = null;\r\n                }\r\n                if (options.y2axis.max == null) {\r\n                    options.yaxes[1].max = null;\r\n                }\r\n            }\r\n            if (options.grid.coloredAreas)\r\n                options.grid.markings = options.grid.coloredAreas;\r\n            if (options.grid.coloredAreasColor)\r\n                options.grid.markingsColor = options.grid.coloredAreasColor;\r\n            if (options.lines)\r\n                $.extend(true, options.series.lines, options.lines);\r\n            if (options.points)\r\n                $.extend(true, options.series.points, options.points);\r\n            if (options.bars)\r\n                $.extend(true, options.series.bars, options.bars);\r\n            if (options.shadowSize != null)\r\n                options.series.shadowSize = options.shadowSize;\r\n            if (options.highlightColor != null)\r\n                options.series.highlightColor = options.highlightColor;\r\n\r\n            // save options on axes for future reference\r\n            for (i = 0; i < options.xaxes.length; ++i)\r\n                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\r\n            for (i = 0; i < options.yaxes.length; ++i)\r\n                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\r\n\r\n            // add hooks from options\r\n            for (var n in hooks)\r\n                if (options.hooks[n] && options.hooks[n].length)\r\n                    hooks[n] = hooks[n].concat(options.hooks[n]);\r\n\r\n            executeHooks(hooks.processOptions, [options]);\r\n        }\r\n\r\n        function setData(d) {\r\n            series = parseData(d);\r\n            fillInSeriesOptions();\r\n            processData();\r\n        }\r\n\r\n        function parseData(d) {\r\n            var res = [];\r\n            for (var i = 0; i < d.length; ++i) {\r\n                var s = $.extend(true, {}, options.series);\r\n\r\n                if (d[i].data != null) {\r\n                    s.data = d[i].data; // move the data instead of deep-copy\r\n                    delete d[i].data;\r\n\r\n                    $.extend(true, s, d[i]);\r\n\r\n                    d[i].data = s.data;\r\n                }\r\n                else\r\n                    s.data = d[i];\r\n                res.push(s);\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        function axisNumber(obj, coord) {\r\n            var a = obj[coord + \"axis\"];\r\n            if (typeof a == \"object\") // if we got a real axis, extract number\r\n                a = a.n;\r\n            if (typeof a != \"number\")\r\n                a = 1; // default to first axis\r\n            return a;\r\n        }\r\n\r\n        function allAxes() {\r\n            // return flat array without annoying null entries\r\n            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\r\n        }\r\n\r\n        function canvasToAxisCoords(pos) {\r\n            // return an object with x/y corresponding to all used axes\r\n            var res = {}, i, axis;\r\n            for (i = 0; i < xaxes.length; ++i) {\r\n                axis = xaxes[i];\r\n                if (axis && axis.used)\r\n                    res[\"x\" + axis.n] = axis.c2p(pos.left);\r\n            }\r\n\r\n            for (i = 0; i < yaxes.length; ++i) {\r\n                axis = yaxes[i];\r\n                if (axis && axis.used)\r\n                    res[\"y\" + axis.n] = axis.c2p(pos.top);\r\n            }\r\n\r\n            if (res.x1 !== undefined)\r\n                res.x = res.x1;\r\n            if (res.y1 !== undefined)\r\n                res.y = res.y1;\r\n\r\n            return res;\r\n        }\r\n\r\n        function axisToCanvasCoords(pos) {\r\n            // get canvas coords from the first pair of x/y found in pos\r\n            var res = {}, i, axis, key;\r\n\r\n            for (i = 0; i < xaxes.length; ++i) {\r\n                axis = xaxes[i];\r\n                if (axis && axis.used) {\r\n                    key = \"x\" + axis.n;\r\n                    if (pos[key] == null && axis.n == 1)\r\n                        key = \"x\";\r\n\r\n                    if (pos[key] != null) {\r\n                        res.left = axis.p2c(pos[key]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < yaxes.length; ++i) {\r\n                axis = yaxes[i];\r\n                if (axis && axis.used) {\r\n                    key = \"y\" + axis.n;\r\n                    if (pos[key] == null && axis.n == 1)\r\n                        key = \"y\";\r\n\r\n                    if (pos[key] != null) {\r\n                        res.top = axis.p2c(pos[key]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        function getOrCreateAxis(axes, number) {\r\n            if (!axes[number - 1])\r\n                axes[number - 1] = {\r\n                    n: number, // save the number for future reference\r\n                    direction: axes == xaxes ? \"x\" : \"y\",\r\n                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\r\n                };\r\n\r\n            return axes[number - 1];\r\n        }\r\n\r\n        function fillInSeriesOptions() {\r\n\r\n            var neededColors = series.length, maxIndex = -1, i;\r\n\r\n            // Subtract the number of series that already have fixed colors or\r\n            // color indexes from the number that we still need to generate.\r\n\r\n            for (i = 0; i < series.length; ++i) {\r\n                var sc = series[i].color;\r\n                if (sc != null) {\r\n                    neededColors--;\r\n                    if (typeof sc == \"number\" && sc > maxIndex) {\r\n                        maxIndex = sc;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If any of the series have fixed color indexes, then we need to\r\n            // generate at least as many colors as the highest index.\r\n\r\n            if (neededColors <= maxIndex) {\r\n                neededColors = maxIndex + 1;\r\n            }\r\n\r\n            // Generate all the colors, using first the option colors and then\r\n            // variations on those colors once they're exhausted.\r\n\r\n            var c, colors = [], colorPool = options.colors,\r\n                colorPoolSize = colorPool.length, variation = 0;\r\n\r\n            for (i = 0; i < neededColors; i++) {\r\n\r\n                c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\");\r\n\r\n                // Each time we exhaust the colors in the pool we adjust\r\n                // a scaling factor used to produce more variations on\r\n                // those colors. The factor alternates negative/positive\r\n                // to produce lighter/darker colors.\r\n\r\n                // Reset the variation after every few cycles, or else\r\n                // it will end up producing only white or black colors.\r\n\r\n                if (i % colorPoolSize == 0 && i) {\r\n                    if (variation >= 0) {\r\n                        if (variation < 0.5) {\r\n                            variation = -variation - 0.2;\r\n                        } else variation = 0;\r\n                    } else variation = -variation;\r\n                }\r\n\r\n                colors[i] = c.scale('rgb', 1 + variation);\r\n            }\r\n\r\n            // Finalize the series options, filling in their colors\r\n\r\n            var colori = 0, s;\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                // assign colors\r\n                if (s.color == null) {\r\n                    s.color = colors[colori].toString();\r\n                    ++colori;\r\n                }\r\n                else if (typeof s.color == \"number\")\r\n                    s.color = colors[s.color].toString();\r\n\r\n                // turn on lines automatically in case nothing is set\r\n                if (s.lines.show == null) {\r\n                    var v, show = true;\r\n                    for (v in s)\r\n                        if (s[v] && s[v].show) {\r\n                            show = false;\r\n                            break;\r\n                        }\r\n                    if (show)\r\n                        s.lines.show = true;\r\n                }\r\n\r\n                // If nothing was provided for lines.zero, default it to match\r\n                // lines.fill, since areas by default should extend to zero.\r\n\r\n                if (s.lines.zero == null) {\r\n                    s.lines.zero = !!s.lines.fill;\r\n                }\r\n\r\n                // setup axes\r\n                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\r\n                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\r\n            }\r\n        }\r\n\r\n        function processData() {\r\n            var topSentry = Number.POSITIVE_INFINITY,\r\n                bottomSentry = Number.NEGATIVE_INFINITY,\r\n                fakeInfinity = Number.MAX_VALUE,\r\n                i, j, k, m, length,\r\n                s, points, ps, x, y, axis, val, f, p,\r\n                data, format;\r\n\r\n            function updateAxis(axis, min, max) {\r\n                if (min < axis.datamin && min != -fakeInfinity)\r\n                    axis.datamin = min;\r\n                if (max > axis.datamax && max != fakeInfinity)\r\n                    axis.datamax = max;\r\n            }\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                // init axis\r\n                axis.datamin = topSentry;\r\n                axis.datamax = bottomSentry;\r\n                axis.used = false;\r\n            });\r\n\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                s.datapoints = { points: [] };\r\n\r\n                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\r\n            }\r\n\r\n            // first pass: clean and copy data\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                data = s.data;\r\n                format = s.datapoints.format;\r\n\r\n                if (!format) {\r\n                    format = [];\r\n                    // find out how to copy\r\n                    format.push({ x: true, number: true, required: true });\r\n                    format.push({ y: true, number: true, required: true });\r\n\r\n                    if (s.bars.show || (s.lines.show && s.lines.fill)) {\r\n                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\r\n                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\r\n                        if (s.bars.horizontal) {\r\n                            delete format[format.length - 1].y;\r\n                            format[format.length - 1].x = true;\r\n                        }\r\n                    }\r\n\r\n                    s.datapoints.format = format;\r\n                }\r\n\r\n                if (s.datapoints.pointsize != null)\r\n                    continue; // already filled in\r\n\r\n                s.datapoints.pointsize = format.length;\r\n\r\n                ps = s.datapoints.pointsize;\r\n                points = s.datapoints.points;\r\n\r\n                var insertSteps = s.lines.show && s.lines.steps;\r\n                s.xaxis.used = s.yaxis.used = true;\r\n\r\n                for (j = k = 0; j < data.length; ++j, k += ps) {\r\n                    p = data[j];\r\n\r\n                    var nullify = p == null;\r\n                    if (!nullify) {\r\n                        for (m = 0; m < ps; ++m) {\r\n                            val = p[m];\r\n                            f = format[m];\r\n\r\n                            if (f) {\r\n                                if (f.number && val != null) {\r\n                                    val = +val; // convert to number\r\n                                    if (isNaN(val))\r\n                                        val = null;\r\n                                    else if (val == Infinity)\r\n                                        val = fakeInfinity;\r\n                                    else if (val == -Infinity)\r\n                                        val = -fakeInfinity;\r\n                                }\r\n\r\n                                if (val == null) {\r\n                                    if (f.required)\r\n                                        nullify = true;\r\n\r\n                                    if (f.defaultValue != null)\r\n                                        val = f.defaultValue;\r\n                                }\r\n                            }\r\n\r\n                            points[k + m] = val;\r\n                        }\r\n                    }\r\n\r\n                    if (nullify) {\r\n                        for (m = 0; m < ps; ++m) {\r\n                            val = points[k + m];\r\n                            if (val != null) {\r\n                                f = format[m];\r\n                                // extract min/max info\r\n                                if (f.autoscale !== false) {\r\n                                    if (f.x) {\r\n                                        updateAxis(s.xaxis, val, val);\r\n                                    }\r\n                                    if (f.y) {\r\n                                        updateAxis(s.yaxis, val, val);\r\n                                    }\r\n                                }\r\n                            }\r\n                            points[k + m] = null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // a little bit of line specific stuff that\r\n                        // perhaps shouldn't be here, but lacking\r\n                        // better means...\r\n                        if (insertSteps && k > 0\r\n                            && points[k - ps] != null\r\n                            && points[k - ps] != points[k]\r\n                            && points[k - ps + 1] != points[k + 1]) {\r\n                            // copy the point to make room for a middle point\r\n                            for (m = 0; m < ps; ++m)\r\n                                points[k + ps + m] = points[k + m];\r\n\r\n                            // middle point has same y\r\n                            points[k + 1] = points[k - ps + 1];\r\n\r\n                            // we've added a point, better reflect that\r\n                            k += ps;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // give the hooks a chance to run\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\r\n            }\r\n\r\n            // second pass: find datamax/datamin for auto-scaling\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                points = s.datapoints.points;\r\n                ps = s.datapoints.pointsize;\r\n                format = s.datapoints.format;\r\n\r\n                var xmin = topSentry, ymin = topSentry,\r\n                    xmax = bottomSentry, ymax = bottomSentry;\r\n\r\n                for (j = 0; j < points.length; j += ps) {\r\n                    if (points[j] == null)\r\n                        continue;\r\n\r\n                    for (m = 0; m < ps; ++m) {\r\n                        val = points[j + m];\r\n                        f = format[m];\r\n                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\r\n                            continue;\r\n\r\n                        if (f.x) {\r\n                            if (val < xmin)\r\n                                xmin = val;\r\n                            if (val > xmax)\r\n                                xmax = val;\r\n                        }\r\n                        if (f.y) {\r\n                            if (val < ymin)\r\n                                ymin = val;\r\n                            if (val > ymax)\r\n                                ymax = val;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (s.bars.show) {\r\n                    // make sure we got room for the bar on the dancing floor\r\n                    var delta;\r\n\r\n                    switch (s.bars.align) {\r\n                        case \"left\":\r\n                            delta = 0;\r\n                            break;\r\n                        case \"right\":\r\n                            delta = -s.bars.barWidth;\r\n                            break;\r\n                        default:\r\n                            delta = -s.bars.barWidth / 2;\r\n                    }\r\n\r\n                    if (s.bars.horizontal) {\r\n                        ymin += delta;\r\n                        ymax += delta + s.bars.barWidth;\r\n                    }\r\n                    else {\r\n                        xmin += delta;\r\n                        xmax += delta + s.bars.barWidth;\r\n                    }\r\n                }\r\n\r\n                updateAxis(s.xaxis, xmin, xmax);\r\n                updateAxis(s.yaxis, ymin, ymax);\r\n            }\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                if (axis.datamin == topSentry)\r\n                    axis.datamin = null;\r\n                if (axis.datamax == bottomSentry)\r\n                    axis.datamax = null;\r\n            });\r\n        }\r\n\r\n        function setupCanvases() {\r\n\r\n            // Make sure the placeholder is clear of everything except canvases\r\n            // from a previous plot in this container that we'll try to re-use.\r\n\r\n            placeholder.css(\"padding\", 0) // padding messes up the positioning\r\n                .children().filter(function(){\r\n                    return !$(this).hasClass(\"flot-overlay\") && !$(this).hasClass('flot-base');\r\n                }).remove();\r\n\r\n            if (placeholder.css(\"position\") == 'static')\r\n                placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\r\n\r\n            surface = new Canvas(\"flot-base\", placeholder);\r\n            overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\r\n\r\n            ctx = surface.context;\r\n            octx = overlay.context;\r\n\r\n            // define which element we're listening for events on\r\n            eventHolder = $(overlay.element).unbind();\r\n\r\n            // If we're re-using a plot object, shut down the old one\r\n\r\n            var existing = placeholder.data(\"plot\");\r\n\r\n            if (existing) {\r\n                existing.shutdown();\r\n                overlay.clear();\r\n            }\r\n\r\n            // save in case we get replotted\r\n            placeholder.data(\"plot\", plot);\r\n        }\r\n\r\n        function bindEvents() {\r\n            // bind events\r\n            if (options.grid.hoverable) {\r\n                eventHolder.mousemove(onMouseMove);\r\n\r\n                // Use bind, rather than .mouseleave, because we officially\r\n                // still support jQuery 1.2.6, which doesn't define a shortcut\r\n                // for mouseenter or mouseleave.  This was a bug/oversight that\r\n                // was fixed somewhere around 1.3.x.  We can return to using\r\n                // .mouseleave when we drop support for 1.2.6.\r\n\r\n                eventHolder.bind(\"mouseleave\", onMouseLeave);\r\n            }\r\n\r\n            if (options.grid.clickable)\r\n                eventHolder.click(onClick);\r\n\r\n            executeHooks(hooks.bindEvents, [eventHolder]);\r\n        }\r\n\r\n        function shutdown() {\r\n            if (redrawTimeout)\r\n                clearTimeout(redrawTimeout);\r\n\r\n            eventHolder.unbind(\"mousemove\", onMouseMove);\r\n            eventHolder.unbind(\"mouseleave\", onMouseLeave);\r\n            eventHolder.unbind(\"click\", onClick);\r\n\r\n            executeHooks(hooks.shutdown, [eventHolder]);\r\n        }\r\n\r\n        function setTransformationHelpers(axis) {\r\n            // set helper functions on the axis, assumes plot area\r\n            // has been computed already\r\n\r\n            function identity(x) { return x; }\r\n\r\n            var s, m, t = axis.options.transform || identity,\r\n                it = axis.options.inverseTransform;\r\n\r\n            // precompute how much the axis is scaling a point\r\n            // in canvas space\r\n            if (axis.direction == \"x\") {\r\n                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\r\n                m = Math.min(t(axis.max), t(axis.min));\r\n            }\r\n            else {\r\n                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\r\n                s = -s;\r\n                m = Math.max(t(axis.max), t(axis.min));\r\n            }\r\n\r\n            // data point to canvas coordinate\r\n            if (t == identity) // slight optimization\r\n                axis.p2c = function (p) { return (p - m) * s; };\r\n            else\r\n                axis.p2c = function (p) { return (t(p) - m) * s; };\r\n            // canvas coordinate to data point\r\n            if (!it)\r\n                axis.c2p = function (c) { return m + c / s; };\r\n            else\r\n                axis.c2p = function (c) { return it(m + c / s); };\r\n        }\r\n\r\n        function measureTickLabels(axis) {\r\n\r\n            var opts = axis.options,\r\n                ticks = axis.ticks || [],\r\n                labelWidth = opts.labelWidth || 0,\r\n                labelHeight = opts.labelHeight || 0,\r\n                maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\r\n                legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\r\n                layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\r\n                font = opts.font || \"flot-tick-label tickLabel\";\r\n\r\n            for (var i = 0; i < ticks.length; ++i) {\r\n\r\n                var t = ticks[i];\r\n\r\n                if (!t.label)\r\n                    continue;\r\n\r\n                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\r\n\r\n                labelWidth = Math.max(labelWidth, info.width);\r\n                labelHeight = Math.max(labelHeight, info.height);\r\n            }\r\n\r\n            axis.labelWidth = opts.labelWidth || labelWidth;\r\n            axis.labelHeight = opts.labelHeight || labelHeight;\r\n        }\r\n\r\n        function allocateAxisBoxFirstPhase(axis) {\r\n            // find the bounding box of the axis by looking at label\r\n            // widths/heights and ticks, make room by diminishing the\r\n            // plotOffset; this first phase only looks at one\r\n            // dimension per axis, the other dimension depends on the\r\n            // other axes so will have to wait\r\n\r\n            var lw = axis.labelWidth,\r\n                lh = axis.labelHeight,\r\n                pos = axis.options.position,\r\n                isXAxis = axis.direction === \"x\",\r\n                tickLength = axis.options.tickLength,\r\n                axisMargin = options.grid.axisMargin,\r\n                padding = options.grid.labelMargin,\r\n                innermost = true,\r\n                outermost = true,\r\n                first = true,\r\n                found = false;\r\n\r\n            // Determine the axis's position in its direction and on its side\r\n\r\n            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\r\n                if (a && (a.show || a.reserveSpace)) {\r\n                    if (a === axis) {\r\n                        found = true;\r\n                    } else if (a.options.position === pos) {\r\n                        if (found) {\r\n                            outermost = false;\r\n                        } else {\r\n                            innermost = false;\r\n                        }\r\n                    }\r\n                    if (!found) {\r\n                        first = false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // The outermost axis on each side has no margin\r\n\r\n            if (outermost) {\r\n                axisMargin = 0;\r\n            }\r\n\r\n            // The ticks for the first axis in each direction stretch across\r\n\r\n            if (tickLength == null) {\r\n                tickLength = first ? \"full\" : 5;\r\n            }\r\n\r\n            if (!isNaN(+tickLength))\r\n                padding += +tickLength;\r\n\r\n            if (isXAxis) {\r\n                lh += padding;\r\n\r\n                if (pos == \"bottom\") {\r\n                    plotOffset.bottom += lh + axisMargin;\r\n                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\r\n                }\r\n                else {\r\n                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\r\n                    plotOffset.top += lh + axisMargin;\r\n                }\r\n            }\r\n            else {\r\n                lw += padding;\r\n\r\n                if (pos == \"left\") {\r\n                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\r\n                    plotOffset.left += lw + axisMargin;\r\n                }\r\n                else {\r\n                    plotOffset.right += lw + axisMargin;\r\n                    axis.box = { left: surface.width - plotOffset.right, width: lw };\r\n                }\r\n            }\r\n\r\n             // save for future reference\r\n            axis.position = pos;\r\n            axis.tickLength = tickLength;\r\n            axis.box.padding = padding;\r\n            axis.innermost = innermost;\r\n        }\r\n\r\n        function allocateAxisBoxSecondPhase(axis) {\r\n            // now that all axis boxes have been placed in one\r\n            // dimension, we can set the remaining dimension coordinates\r\n            if (axis.direction == \"x\") {\r\n                axis.box.left = plotOffset.left - axis.labelWidth / 2;\r\n                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\r\n            }\r\n            else {\r\n                axis.box.top = plotOffset.top - axis.labelHeight / 2;\r\n                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\r\n            }\r\n        }\r\n\r\n        function adjustLayoutForThingsStickingOut() {\r\n            // possibly adjust plot offset to ensure everything stays\r\n            // inside the canvas and isn't clipped off\r\n\r\n            var minMargin = options.grid.minBorderMargin,\r\n                axis, i;\r\n\r\n            // check stuff from the plot (FIXME: this should just read\r\n            // a value from the series, otherwise it's impossible to\r\n            // customize)\r\n            if (minMargin == null) {\r\n                minMargin = 0;\r\n                for (i = 0; i < series.length; ++i)\r\n                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\r\n            }\r\n\r\n            var margins = {\r\n                left: minMargin,\r\n                right: minMargin,\r\n                top: minMargin,\r\n                bottom: minMargin\r\n            };\r\n\r\n            // check axis labels, note we don't check the actual\r\n            // labels but instead use the overall width/height to not\r\n            // jump as much around with replots\r\n            $.each(allAxes(), function (_, axis) {\r\n                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\r\n                    if (axis.direction === \"x\") {\r\n                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\r\n                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\r\n                    } else {\r\n                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\r\n                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\r\n                    }\r\n                }\r\n            });\r\n\r\n            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\r\n            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\r\n            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\r\n            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\r\n        }\r\n\r\n        function setupGrid() {\r\n            var i, axes = allAxes(), showGrid = options.grid.show;\r\n\r\n            // Initialize the plot's offset from the edge of the canvas\r\n\r\n            for (var a in plotOffset) {\r\n                var margin = options.grid.margin || 0;\r\n                plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\r\n            }\r\n\r\n            executeHooks(hooks.processOffset, [plotOffset]);\r\n\r\n            // If the grid is visible, add its border width to the offset\r\n\r\n            for (var a in plotOffset) {\r\n                if(typeof(options.grid.borderWidth) == \"object\") {\r\n                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\r\n                }\r\n                else {\r\n                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\r\n                }\r\n            }\r\n\r\n            $.each(axes, function (_, axis) {\r\n                var axisOpts = axis.options;\r\n                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\r\n                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\r\n                setRange(axis);\r\n            });\r\n\r\n            if (showGrid) {\r\n\r\n                var allocatedAxes = $.grep(axes, function (axis) {\r\n                    return axis.show || axis.reserveSpace;\r\n                });\r\n\r\n                $.each(allocatedAxes, function (_, axis) {\r\n                    // make the ticks\r\n                    setupTickGeneration(axis);\r\n                    setTicks(axis);\r\n                    snapRangeToTicks(axis, axis.ticks);\r\n                    // find labelWidth/Height for axis\r\n                    measureTickLabels(axis);\r\n                });\r\n\r\n                // with all dimensions calculated, we can compute the\r\n                // axis bounding boxes, start from the outside\r\n                // (reverse order)\r\n                for (i = allocatedAxes.length - 1; i >= 0; --i)\r\n                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\r\n\r\n                // make sure we've got enough space for things that\r\n                // might stick out\r\n                adjustLayoutForThingsStickingOut();\r\n\r\n                $.each(allocatedAxes, function (_, axis) {\r\n                    allocateAxisBoxSecondPhase(axis);\r\n                });\r\n            }\r\n\r\n            plotWidth = surface.width - plotOffset.left - plotOffset.right;\r\n            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\r\n\r\n            // now we got the proper plot dimensions, we can compute the scaling\r\n            $.each(axes, function (_, axis) {\r\n                setTransformationHelpers(axis);\r\n            });\r\n\r\n            if (showGrid) {\r\n                drawAxisLabels();\r\n            }\r\n\r\n            insertLegend();\r\n        }\r\n\r\n        function setRange(axis) {\r\n            var opts = axis.options,\r\n                min = +(opts.min != null ? opts.min : axis.datamin),\r\n                max = +(opts.max != null ? opts.max : axis.datamax),\r\n                delta = max - min;\r\n\r\n            if (delta == 0.0) {\r\n                // degenerate case\r\n                var widen = max == 0 ? 1 : 0.01;\r\n\r\n                if (opts.min == null)\r\n                    min -= widen;\r\n                // always widen max if we couldn't widen min to ensure we\r\n                // don't fall into min == max which doesn't work\r\n                if (opts.max == null || opts.min != null)\r\n                    max += widen;\r\n            }\r\n            else {\r\n                // consider autoscaling\r\n                var margin = opts.autoscaleMargin;\r\n                if (margin != null) {\r\n                    if (opts.min == null) {\r\n                        min -= delta * margin;\r\n                        // make sure we don't go below zero if all values\r\n                        // are positive\r\n                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\r\n                            min = 0;\r\n                    }\r\n                    if (opts.max == null) {\r\n                        max += delta * margin;\r\n                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\r\n                            max = 0;\r\n                    }\r\n                }\r\n            }\r\n            axis.min = min;\r\n            axis.max = max;\r\n        }\r\n\r\n        function setupTickGeneration(axis) {\r\n            var opts = axis.options;\r\n\r\n            // estimate number of ticks\r\n            var noTicks;\r\n            if (typeof opts.ticks == \"number\" && opts.ticks > 0)\r\n                noTicks = opts.ticks;\r\n            else\r\n                // heuristic based on the model a*sqrt(x) fitted to\r\n                // some data points that seemed reasonable\r\n                noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\r\n\r\n            var delta = (axis.max - axis.min) / noTicks,\r\n                dec = -Math.floor(Math.log(delta) / Math.LN10),\r\n                maxDec = opts.tickDecimals;\r\n\r\n            if (maxDec != null && dec > maxDec) {\r\n                dec = maxDec;\r\n            }\r\n\r\n            var magn = Math.pow(10, -dec),\r\n                norm = delta / magn, // norm is between 1.0 and 10.0\r\n                size;\r\n\r\n            if (norm < 1.5) {\r\n                size = 1;\r\n            } else if (norm < 3) {\r\n                size = 2;\r\n                // special case for 2.5, requires an extra decimal\r\n                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\r\n                    size = 2.5;\r\n                    ++dec;\r\n                }\r\n            } else if (norm < 7.5) {\r\n                size = 5;\r\n            } else {\r\n                size = 10;\r\n            }\r\n\r\n            size *= magn;\r\n\r\n            if (opts.minTickSize != null && size < opts.minTickSize) {\r\n                size = opts.minTickSize;\r\n            }\r\n\r\n            axis.delta = delta;\r\n            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\r\n            axis.tickSize = opts.tickSize || size;\r\n\r\n            // Time mode was moved to a plug-in in 0.8, and since so many people use it\r\n            // we'll add an especially friendly reminder to make sure they included it.\r\n\r\n            if (opts.mode == \"time\" && !axis.tickGenerator) {\r\n                throw new Error(\"Time mode requires the flot.time plugin.\");\r\n            }\r\n\r\n            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\r\n            // like flot.time.js.\r\n\r\n            if (!axis.tickGenerator) {\r\n\r\n                axis.tickGenerator = function (axis) {\r\n\r\n                    var ticks = [],\r\n                        start = floorInBase(axis.min, axis.tickSize),\r\n                        i = 0,\r\n                        v = Number.NaN,\r\n                        prev;\r\n\r\n                    do {\r\n                        prev = v;\r\n                        v = start + i * axis.tickSize;\r\n                        ticks.push(v);\r\n                        ++i;\r\n                    } while (v < axis.max && v != prev);\r\n                    return ticks;\r\n                };\r\n\r\n\t\t\t\taxis.tickFormatter = function (value, axis) {\r\n\r\n\t\t\t\t\tvar factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\r\n\t\t\t\t\tvar formatted = \"\" + Math.round(value * factor) / factor;\r\n\r\n\t\t\t\t\t// If tickDecimals was specified, ensure that we have exactly that\r\n\t\t\t\t\t// much precision; otherwise default to the value's own precision.\r\n\r\n\t\t\t\t\tif (axis.tickDecimals != null) {\r\n\t\t\t\t\t\tvar decimal = formatted.indexOf(\".\");\r\n\t\t\t\t\t\tvar precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\r\n\t\t\t\t\t\tif (precision < axis.tickDecimals) {\r\n\t\t\t\t\t\t\treturn (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n                    return formatted;\r\n                };\r\n            }\r\n\r\n            if ($.isFunction(opts.tickFormatter))\r\n                axis.tickFormatter = function (v, axis) { return \"\" + opts.tickFormatter(v, axis); };\r\n\r\n            if (opts.alignTicksWithAxis != null) {\r\n                var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\r\n                if (otherAxis && otherAxis.used && otherAxis != axis) {\r\n                    // consider snapping min/max to outermost nice ticks\r\n                    var niceTicks = axis.tickGenerator(axis);\r\n                    if (niceTicks.length > 0) {\r\n                        if (opts.min == null)\r\n                            axis.min = Math.min(axis.min, niceTicks[0]);\r\n                        if (opts.max == null && niceTicks.length > 1)\r\n                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\r\n                    }\r\n\r\n                    axis.tickGenerator = function (axis) {\r\n                        // copy ticks, scaled to this axis\r\n                        var ticks = [], v, i;\r\n                        for (i = 0; i < otherAxis.ticks.length; ++i) {\r\n                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\r\n                            v = axis.min + v * (axis.max - axis.min);\r\n                            ticks.push(v);\r\n                        }\r\n                        return ticks;\r\n                    };\r\n\r\n                    // we might need an extra decimal since forced\r\n                    // ticks don't necessarily fit naturally\r\n                    if (!axis.mode && opts.tickDecimals == null) {\r\n                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\r\n                            ts = axis.tickGenerator(axis);\r\n\r\n                        // only proceed if the tick interval rounded\r\n                        // with an extra decimal doesn't give us a\r\n                        // zero at end\r\n                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\r\n                            axis.tickDecimals = extraDec;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setTicks(axis) {\r\n            var oticks = axis.options.ticks, ticks = [];\r\n            if (oticks == null || (typeof oticks == \"number\" && oticks > 0))\r\n                ticks = axis.tickGenerator(axis);\r\n            else if (oticks) {\r\n                if ($.isFunction(oticks))\r\n                    // generate the ticks\r\n                    ticks = oticks(axis);\r\n                else\r\n                    ticks = oticks;\r\n            }\r\n\r\n            // clean up/labelify the supplied ticks, copy them over\r\n            var i, v;\r\n            axis.ticks = [];\r\n            for (i = 0; i < ticks.length; ++i) {\r\n                var label = null;\r\n                var t = ticks[i];\r\n                if (typeof t == \"object\") {\r\n                    v = +t[0];\r\n                    if (t.length > 1)\r\n                        label = t[1];\r\n                }\r\n                else\r\n                    v = +t;\r\n                if (label == null)\r\n                    label = axis.tickFormatter(v, axis);\r\n                if (!isNaN(v))\r\n                    axis.ticks.push({ v: v, label: label });\r\n            }\r\n        }\r\n\r\n        function snapRangeToTicks(axis, ticks) {\r\n            if (axis.options.autoscaleMargin && ticks.length > 0) {\r\n                // snap to ticks\r\n                if (axis.options.min == null)\r\n                    axis.min = Math.min(axis.min, ticks[0].v);\r\n                if (axis.options.max == null && ticks.length > 1)\r\n                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n\r\n            surface.clear();\r\n\r\n            executeHooks(hooks.drawBackground, [ctx]);\r\n\r\n            var grid = options.grid;\r\n\r\n            // draw background, if any\r\n            if (grid.show && grid.backgroundColor)\r\n                drawBackground();\r\n\r\n            if (grid.show && !grid.aboveData) {\r\n                drawGrid();\r\n            }\r\n\r\n            for (var i = 0; i < series.length; ++i) {\r\n                executeHooks(hooks.drawSeries, [ctx, series[i]]);\r\n                drawSeries(series[i]);\r\n            }\r\n\r\n            executeHooks(hooks.draw, [ctx]);\r\n\r\n            if (grid.show && grid.aboveData) {\r\n                drawGrid();\r\n            }\r\n\r\n            surface.render();\r\n\r\n            // A draw implies that either the axes or data have changed, so we\r\n            // should probably update the overlay highlights as well.\r\n\r\n            triggerRedrawOverlay();\r\n        }\r\n\r\n        function extractRange(ranges, coord) {\r\n            var axis, from, to, key, axes = allAxes();\r\n\r\n            for (var i = 0; i < axes.length; ++i) {\r\n                axis = axes[i];\r\n                if (axis.direction == coord) {\r\n                    key = coord + axis.n + \"axis\";\r\n                    if (!ranges[key] && axis.n == 1)\r\n                        key = coord + \"axis\"; // support x1axis as xaxis\r\n                    if (ranges[key]) {\r\n                        from = ranges[key].from;\r\n                        to = ranges[key].to;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // backwards-compat stuff - to be removed in future\r\n            if (!ranges[key]) {\r\n                axis = coord == \"x\" ? xaxes[0] : yaxes[0];\r\n                from = ranges[coord + \"1\"];\r\n                to = ranges[coord + \"2\"];\r\n            }\r\n\r\n            // auto-reverse as an added bonus\r\n            if (from != null && to != null && from > to) {\r\n                var tmp = from;\r\n                from = to;\r\n                to = tmp;\r\n            }\r\n\r\n            return { from: from, to: to, axis: axis };\r\n        }\r\n\r\n        function drawBackground() {\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\r\n            ctx.fillRect(0, 0, plotWidth, plotHeight);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawGrid() {\r\n            var i, axes, bw, bc;\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            // draw markings\r\n            var markings = options.grid.markings;\r\n            if (markings) {\r\n                if ($.isFunction(markings)) {\r\n                    axes = plot.getAxes();\r\n                    // xmin etc. is backwards compatibility, to be\r\n                    // removed in the future\r\n                    axes.xmin = axes.xaxis.min;\r\n                    axes.xmax = axes.xaxis.max;\r\n                    axes.ymin = axes.yaxis.min;\r\n                    axes.ymax = axes.yaxis.max;\r\n\r\n                    markings = markings(axes);\r\n                }\r\n\r\n                for (i = 0; i < markings.length; ++i) {\r\n                    var m = markings[i],\r\n                        xrange = extractRange(m, \"x\"),\r\n                        yrange = extractRange(m, \"y\");\r\n\r\n                    // fill in missing\r\n                    if (xrange.from == null)\r\n                        xrange.from = xrange.axis.min;\r\n                    if (xrange.to == null)\r\n                        xrange.to = xrange.axis.max;\r\n                    if (yrange.from == null)\r\n                        yrange.from = yrange.axis.min;\r\n                    if (yrange.to == null)\r\n                        yrange.to = yrange.axis.max;\r\n\r\n                    // clip\r\n                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\r\n                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\r\n                        continue;\r\n\r\n                    xrange.from = Math.max(xrange.from, xrange.axis.min);\r\n                    xrange.to = Math.min(xrange.to, xrange.axis.max);\r\n                    yrange.from = Math.max(yrange.from, yrange.axis.min);\r\n                    yrange.to = Math.min(yrange.to, yrange.axis.max);\r\n\r\n                    var xequal = xrange.from === xrange.to,\r\n                        yequal = yrange.from === yrange.to;\r\n\r\n                    if (xequal && yequal) {\r\n                        continue;\r\n                    }\r\n\r\n                    // then draw\r\n                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\r\n                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\r\n                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\r\n                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\r\n\r\n                    if (xequal || yequal) {\r\n                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\r\n                            subPixel = lineWidth % 2 ? 0.5 : 0;\r\n                        ctx.beginPath();\r\n                        ctx.strokeStyle = m.color || options.grid.markingsColor;\r\n                        ctx.lineWidth = lineWidth;\r\n                        if (xequal) {\r\n                            ctx.moveTo(xrange.to + subPixel, yrange.from);\r\n                            ctx.lineTo(xrange.to + subPixel, yrange.to);\r\n                        } else {\r\n                            ctx.moveTo(xrange.from, yrange.to + subPixel);\r\n                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            \r\n                        }\r\n                        ctx.stroke();\r\n                    } else {\r\n                        ctx.fillStyle = m.color || options.grid.markingsColor;\r\n                        ctx.fillRect(xrange.from, yrange.to,\r\n                                     xrange.to - xrange.from,\r\n                                     yrange.from - yrange.to);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // draw the ticks\r\n            axes = allAxes();\r\n            bw = options.grid.borderWidth;\r\n\r\n            for (var j = 0; j < axes.length; ++j) {\r\n                var axis = axes[j], box = axis.box,\r\n                    t = axis.tickLength, x, y, xoff, yoff;\r\n                if (!axis.show || axis.ticks.length == 0)\r\n                    continue;\r\n\r\n                ctx.lineWidth = 1;\r\n\r\n                // find the edges\r\n                if (axis.direction == \"x\") {\r\n                    x = 0;\r\n                    if (t == \"full\")\r\n                        y = (axis.position == \"top\" ? 0 : plotHeight);\r\n                    else\r\n                        y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\r\n                }\r\n                else {\r\n                    y = 0;\r\n                    if (t == \"full\")\r\n                        x = (axis.position == \"left\" ? 0 : plotWidth);\r\n                    else\r\n                        x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\r\n                }\r\n\r\n                // draw tick bar\r\n                if (!axis.innermost) {\r\n                    ctx.strokeStyle = axis.options.color;\r\n                    ctx.beginPath();\r\n                    xoff = yoff = 0;\r\n                    if (axis.direction == \"x\")\r\n                        xoff = plotWidth + 1;\r\n                    else\r\n                        yoff = plotHeight + 1;\r\n\r\n                    if (ctx.lineWidth == 1) {\r\n                        if (axis.direction == \"x\") {\r\n                            y = Math.floor(y) + 0.5;\r\n                        } else {\r\n                            x = Math.floor(x) + 0.5;\r\n                        }\r\n                    }\r\n\r\n                    ctx.moveTo(x, y);\r\n                    ctx.lineTo(x + xoff, y + yoff);\r\n                    ctx.stroke();\r\n                }\r\n\r\n                // draw ticks\r\n\r\n                ctx.strokeStyle = axis.options.tickColor;\r\n\r\n                ctx.beginPath();\r\n                for (i = 0; i < axis.ticks.length; ++i) {\r\n                    var v = axis.ticks[i].v;\r\n\r\n                    xoff = yoff = 0;\r\n\r\n                    if (isNaN(v) || v < axis.min || v > axis.max\r\n                        // skip those lying on the axes if we got a border\r\n                        || (t == \"full\"\r\n                            && ((typeof bw == \"object\" && bw[axis.position] > 0) || bw > 0)\r\n                            && (v == axis.min || v == axis.max)))\r\n                        continue;\r\n\r\n                    if (axis.direction == \"x\") {\r\n                        x = axis.p2c(v);\r\n                        yoff = t == \"full\" ? -plotHeight : t;\r\n\r\n                        if (axis.position == \"top\")\r\n                            yoff = -yoff;\r\n                    }\r\n                    else {\r\n                        y = axis.p2c(v);\r\n                        xoff = t == \"full\" ? -plotWidth : t;\r\n\r\n                        if (axis.position == \"left\")\r\n                            xoff = -xoff;\r\n                    }\r\n\r\n                    if (ctx.lineWidth == 1) {\r\n                        if (axis.direction == \"x\")\r\n                            x = Math.floor(x) + 0.5;\r\n                        else\r\n                            y = Math.floor(y) + 0.5;\r\n                    }\r\n\r\n                    ctx.moveTo(x, y);\r\n                    ctx.lineTo(x + xoff, y + yoff);\r\n                }\r\n\r\n                ctx.stroke();\r\n            }\r\n\r\n\r\n            // draw border\r\n            if (bw) {\r\n                // If either borderWidth or borderColor is an object, then draw the border\r\n                // line by line instead of as one rectangle\r\n                bc = options.grid.borderColor;\r\n                if(typeof bw == \"object\" || typeof bc == \"object\") {\r\n                    if (typeof bw !== \"object\") {\r\n                        bw = {top: bw, right: bw, bottom: bw, left: bw};\r\n                    }\r\n                    if (typeof bc !== \"object\") {\r\n                        bc = {top: bc, right: bc, bottom: bc, left: bc};\r\n                    }\r\n\r\n                    if (bw.top > 0) {\r\n                        ctx.strokeStyle = bc.top;\r\n                        ctx.lineWidth = bw.top;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\r\n                        ctx.lineTo(plotWidth, 0 - bw.top/2);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.right > 0) {\r\n                        ctx.strokeStyle = bc.right;\r\n                        ctx.lineWidth = bw.right;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\r\n                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.bottom > 0) {\r\n                        ctx.strokeStyle = bc.bottom;\r\n                        ctx.lineWidth = bw.bottom;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\r\n                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.left > 0) {\r\n                        ctx.strokeStyle = bc.left;\r\n                        ctx.lineWidth = bw.left;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\r\n                        ctx.lineTo(0- bw.left/2, 0);\r\n                        ctx.stroke();\r\n                    }\r\n                }\r\n                else {\r\n                    ctx.lineWidth = bw;\r\n                    ctx.strokeStyle = options.grid.borderColor;\r\n                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\r\n                }\r\n            }\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawAxisLabels() {\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                var box = axis.box,\r\n                    legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\r\n                    layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\r\n                    font = axis.options.font || \"flot-tick-label tickLabel\",\r\n                    tick, x, y, halign, valign;\r\n\r\n                // Remove text before checking for axis.show and ticks.length;\r\n                // otherwise plugins, like flot-tickrotor, that draw their own\r\n                // tick labels will end up with both theirs and the defaults.\r\n\r\n                surface.removeText(layer);\r\n\r\n                if (!axis.show || axis.ticks.length == 0)\r\n                    return;\r\n\r\n                for (var i = 0; i < axis.ticks.length; ++i) {\r\n\r\n                    tick = axis.ticks[i];\r\n                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\r\n                        continue;\r\n\r\n                    if (axis.direction == \"x\") {\r\n                        halign = \"center\";\r\n                        x = plotOffset.left + axis.p2c(tick.v);\r\n                        if (axis.position == \"bottom\") {\r\n                            y = box.top + box.padding;\r\n                        } else {\r\n                            y = box.top + box.height - box.padding;\r\n                            valign = \"bottom\";\r\n                        }\r\n                    } else {\r\n                        valign = \"middle\";\r\n                        y = plotOffset.top + axis.p2c(tick.v);\r\n                        if (axis.position == \"left\") {\r\n                            x = box.left + box.width - box.padding;\r\n                            halign = \"right\";\r\n                        } else {\r\n                            x = box.left + box.padding;\r\n                        }\r\n                    }\r\n\r\n                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\r\n                }\r\n            });\r\n        }\r\n\r\n        function drawSeries(series) {\r\n            if (series.lines.show)\r\n                drawSeriesLines(series);\r\n            if (series.bars.show)\r\n                drawSeriesBars(series);\r\n            if (series.points.show)\r\n                drawSeriesPoints(series);\r\n        }\r\n\r\n        function drawSeriesLines(series) {\r\n            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\r\n                var points = datapoints.points,\r\n                    ps = datapoints.pointsize,\r\n                    prevx = null, prevy = null;\r\n\r\n                ctx.beginPath();\r\n                for (var i = ps; i < points.length; i += ps) {\r\n                    var x1 = points[i - ps], y1 = points[i - ps + 1],\r\n                        x2 = points[i], y2 = points[i + 1];\r\n\r\n                    if (x1 == null || x2 == null)\r\n                        continue;\r\n\r\n                    // clip with ymin\r\n                    if (y1 <= y2 && y1 < axisy.min) {\r\n                        if (y2 < axisy.min)\r\n                            continue;   // line segment is outside\r\n                        // compute new intersection point\r\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.min;\r\n                    }\r\n                    else if (y2 <= y1 && y2 < axisy.min) {\r\n                        if (y1 < axisy.min)\r\n                            continue;\r\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.min;\r\n                    }\r\n\r\n                    // clip with ymax\r\n                    if (y1 >= y2 && y1 > axisy.max) {\r\n                        if (y2 > axisy.max)\r\n                            continue;\r\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.max;\r\n                    }\r\n                    else if (y2 >= y1 && y2 > axisy.max) {\r\n                        if (y1 > axisy.max)\r\n                            continue;\r\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.max;\r\n                    }\r\n\r\n                    // clip with xmin\r\n                    if (x1 <= x2 && x1 < axisx.min) {\r\n                        if (x2 < axisx.min)\r\n                            continue;\r\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.min;\r\n                    }\r\n                    else if (x2 <= x1 && x2 < axisx.min) {\r\n                        if (x1 < axisx.min)\r\n                            continue;\r\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.min;\r\n                    }\r\n\r\n                    // clip with xmax\r\n                    if (x1 >= x2 && x1 > axisx.max) {\r\n                        if (x2 > axisx.max)\r\n                            continue;\r\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.max;\r\n                    }\r\n                    else if (x2 >= x1 && x2 > axisx.max) {\r\n                        if (x1 > axisx.max)\r\n                            continue;\r\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.max;\r\n                    }\r\n\r\n                    if (x1 != prevx || y1 != prevy)\r\n                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\r\n\r\n                    prevx = x2;\r\n                    prevy = y2;\r\n                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n\r\n            function plotLineArea(datapoints, axisx, axisy) {\r\n                var points = datapoints.points,\r\n                    ps = datapoints.pointsize,\r\n                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\r\n                    i = 0, top, areaOpen = false,\r\n                    ypos = 1, segmentStart = 0, segmentEnd = 0;\r\n\r\n                // we process each segment in two turns, first forward\r\n                // direction to sketch out top, then once we hit the\r\n                // end we go backwards to sketch the bottom\r\n                while (true) {\r\n                    if (ps > 0 && i > points.length + ps)\r\n                        break;\r\n\r\n                    i += ps; // ps is negative if going backwards\r\n\r\n                    var x1 = points[i - ps],\r\n                        y1 = points[i - ps + ypos],\r\n                        x2 = points[i], y2 = points[i + ypos];\r\n\r\n                    if (areaOpen) {\r\n                        if (ps > 0 && x1 != null && x2 == null) {\r\n                            // at turning point\r\n                            segmentEnd = i;\r\n                            ps = -ps;\r\n                            ypos = 2;\r\n                            continue;\r\n                        }\r\n\r\n                        if (ps < 0 && i == segmentStart + ps) {\r\n                            // done with the reverse sweep\r\n                            ctx.fill();\r\n                            areaOpen = false;\r\n                            ps = -ps;\r\n                            ypos = 1;\r\n                            i = segmentStart = segmentEnd + ps;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    if (x1 == null || x2 == null)\r\n                        continue;\r\n\r\n                    // clip x values\r\n\r\n                    // clip with xmin\r\n                    if (x1 <= x2 && x1 < axisx.min) {\r\n                        if (x2 < axisx.min)\r\n                            continue;\r\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.min;\r\n                    }\r\n                    else if (x2 <= x1 && x2 < axisx.min) {\r\n                        if (x1 < axisx.min)\r\n                            continue;\r\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.min;\r\n                    }\r\n\r\n                    // clip with xmax\r\n                    if (x1 >= x2 && x1 > axisx.max) {\r\n                        if (x2 > axisx.max)\r\n                            continue;\r\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.max;\r\n                    }\r\n                    else if (x2 >= x1 && x2 > axisx.max) {\r\n                        if (x1 > axisx.max)\r\n                            continue;\r\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.max;\r\n                    }\r\n\r\n                    if (!areaOpen) {\r\n                        // open area\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\r\n                        areaOpen = true;\r\n                    }\r\n\r\n                    // now first check the case where both is outside\r\n                    if (y1 >= axisy.max && y2 >= axisy.max) {\r\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\r\n                        continue;\r\n                    }\r\n                    else if (y1 <= axisy.min && y2 <= axisy.min) {\r\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\r\n                        continue;\r\n                    }\r\n\r\n                    // else it's a bit more complicated, there might\r\n                    // be a flat maxed out rectangle first, then a\r\n                    // triangular cutout or reverse; to find these\r\n                    // keep track of the current x values\r\n                    var x1old = x1, x2old = x2;\r\n\r\n                    // clip the y values, without shortcutting, we\r\n                    // go through all cases in turn\r\n\r\n                    // clip with ymin\r\n                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\r\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.min;\r\n                    }\r\n                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\r\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.min;\r\n                    }\r\n\r\n                    // clip with ymax\r\n                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\r\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.max;\r\n                    }\r\n                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\r\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.max;\r\n                    }\r\n\r\n                    // if the x value was changed we got a rectangle\r\n                    // to fill\r\n                    if (x1 != x1old) {\r\n                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\r\n                        // it goes to (x1, y1), but we fill that below\r\n                    }\r\n\r\n                    // fill triangular section, this sometimes result\r\n                    // in redundant points if (x1, y1) hasn't changed\r\n                    // from previous line to, but we just ignore that\r\n                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\r\n                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\r\n\r\n                    // fill the other rectangle if it's there\r\n                    if (x2 != x2old) {\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\r\n                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n            ctx.lineJoin = \"round\";\r\n\r\n            var lw = series.lines.lineWidth,\r\n                sw = series.shadowSize;\r\n            // FIXME: consider another form of shadow when filling is turned on\r\n            if (lw > 0 && sw > 0) {\r\n                // draw shadow as a thick and thin line with transparency\r\n                ctx.lineWidth = sw;\r\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\r\n                // position shadow at angle from the mid of line\r\n                var angle = Math.PI/18;\r\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\r\n                ctx.lineWidth = sw/2;\r\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\r\n            }\r\n\r\n            ctx.lineWidth = lw;\r\n            ctx.strokeStyle = series.color;\r\n            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\r\n            if (fillStyle) {\r\n                ctx.fillStyle = fillStyle;\r\n                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\r\n            }\r\n\r\n            if (lw > 0)\r\n                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawSeriesPoints(series) {\r\n            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\r\n                var points = datapoints.points, ps = datapoints.pointsize;\r\n\r\n                for (var i = 0; i < points.length; i += ps) {\r\n                    var x = points[i], y = points[i + 1];\r\n                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\r\n                        continue;\r\n\r\n                    ctx.beginPath();\r\n                    x = axisx.p2c(x);\r\n                    y = axisy.p2c(y) + offset;\r\n                    if (symbol == \"circle\")\r\n                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\r\n                    else\r\n                        symbol(ctx, x, y, radius, shadow);\r\n                    ctx.closePath();\r\n\r\n                    if (fillStyle) {\r\n                        ctx.fillStyle = fillStyle;\r\n                        ctx.fill();\r\n                    }\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            var lw = series.points.lineWidth,\r\n                sw = series.shadowSize,\r\n                radius = series.points.radius,\r\n                symbol = series.points.symbol;\r\n\r\n            // If the user sets the line width to 0, we change it to a very \r\n            // small value. A line width of 0 seems to force the default of 1.\r\n            // Doing the conditional here allows the shadow setting to still be \r\n            // optional even with a lineWidth of 0.\r\n\r\n            if( lw == 0 )\r\n                lw = 0.0001;\r\n\r\n            if (lw > 0 && sw > 0) {\r\n                // draw shadow in two steps\r\n                var w = sw / 2;\r\n                ctx.lineWidth = w;\r\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\r\n                plotPoints(series.datapoints, radius, null, w + w/2, true,\r\n                           series.xaxis, series.yaxis, symbol);\r\n\r\n                ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\r\n                plotPoints(series.datapoints, radius, null, w/2, true,\r\n                           series.xaxis, series.yaxis, symbol);\r\n            }\r\n\r\n            ctx.lineWidth = lw;\r\n            ctx.strokeStyle = series.color;\r\n            plotPoints(series.datapoints, radius,\r\n                       getFillStyle(series.points, series.color), 0, false,\r\n                       series.xaxis, series.yaxis, symbol);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\r\n            var left, right, bottom, top,\r\n                drawLeft, drawRight, drawTop, drawBottom,\r\n                tmp;\r\n\r\n            // in horizontal mode, we start the bar from the left\r\n            // instead of from the bottom so it appears to be\r\n            // horizontal rather than vertical\r\n            if (horizontal) {\r\n                drawBottom = drawRight = drawTop = true;\r\n                drawLeft = false;\r\n                left = b;\r\n                right = x;\r\n                top = y + barLeft;\r\n                bottom = y + barRight;\r\n\r\n                // account for negative bars\r\n                if (right < left) {\r\n                    tmp = right;\r\n                    right = left;\r\n                    left = tmp;\r\n                    drawLeft = true;\r\n                    drawRight = false;\r\n                }\r\n            }\r\n            else {\r\n                drawLeft = drawRight = drawTop = true;\r\n                drawBottom = false;\r\n                left = x + barLeft;\r\n                right = x + barRight;\r\n                bottom = b;\r\n                top = y;\r\n\r\n                // account for negative bars\r\n                if (top < bottom) {\r\n                    tmp = top;\r\n                    top = bottom;\r\n                    bottom = tmp;\r\n                    drawBottom = true;\r\n                    drawTop = false;\r\n                }\r\n            }\r\n\r\n            // clip\r\n            if (right < axisx.min || left > axisx.max ||\r\n                top < axisy.min || bottom > axisy.max)\r\n                return;\r\n\r\n            if (left < axisx.min) {\r\n                left = axisx.min;\r\n                drawLeft = false;\r\n            }\r\n\r\n            if (right > axisx.max) {\r\n                right = axisx.max;\r\n                drawRight = false;\r\n            }\r\n\r\n            if (bottom < axisy.min) {\r\n                bottom = axisy.min;\r\n                drawBottom = false;\r\n            }\r\n\r\n            if (top > axisy.max) {\r\n                top = axisy.max;\r\n                drawTop = false;\r\n            }\r\n\r\n            left = axisx.p2c(left);\r\n            bottom = axisy.p2c(bottom);\r\n            right = axisx.p2c(right);\r\n            top = axisy.p2c(top);\r\n\r\n            // fill the bar\r\n            if (fillStyleCallback) {\r\n                c.fillStyle = fillStyleCallback(bottom, top);\r\n                c.fillRect(left, top, right - left, bottom - top)\r\n            }\r\n\r\n            // draw outline\r\n            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\r\n                c.beginPath();\r\n\r\n                // FIXME: inline moveTo is buggy with excanvas\r\n                c.moveTo(left, bottom);\r\n                if (drawLeft)\r\n                    c.lineTo(left, top);\r\n                else\r\n                    c.moveTo(left, top);\r\n                if (drawTop)\r\n                    c.lineTo(right, top);\r\n                else\r\n                    c.moveTo(right, top);\r\n                if (drawRight)\r\n                    c.lineTo(right, bottom);\r\n                else\r\n                    c.moveTo(right, bottom);\r\n                if (drawBottom)\r\n                    c.lineTo(left, bottom);\r\n                else\r\n                    c.moveTo(left, bottom);\r\n                c.stroke();\r\n            }\r\n        }\r\n\r\n        function drawSeriesBars(series) {\r\n            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\r\n                var points = datapoints.points, ps = datapoints.pointsize;\r\n\r\n                for (var i = 0; i < points.length; i += ps) {\r\n                    if (points[i] == null)\r\n                        continue;\r\n                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            // FIXME: figure out a way to add shadows (for instance along the right edge)\r\n            ctx.lineWidth = series.bars.lineWidth;\r\n            ctx.strokeStyle = series.color;\r\n\r\n            var barLeft;\r\n\r\n            switch (series.bars.align) {\r\n                case \"left\":\r\n                    barLeft = 0;\r\n                    break;\r\n                case \"right\":\r\n                    barLeft = -series.bars.barWidth;\r\n                    break;\r\n                default:\r\n                    barLeft = -series.bars.barWidth / 2;\r\n            }\r\n\r\n            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\r\n            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\r\n            ctx.restore();\r\n        }\r\n\r\n        function getFillStyle(filloptions, seriesColor, bottom, top) {\r\n            var fill = filloptions.fill;\r\n            if (!fill)\r\n                return null;\r\n\r\n            if (filloptions.fillColor)\r\n                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\r\n\r\n            var c = $.color.parse(seriesColor);\r\n            c.a = typeof fill == \"number\" ? fill : 0.4;\r\n            c.normalize();\r\n            return c.toString();\r\n        }\r\n\r\n        function insertLegend() {\r\n\r\n            if (options.legend.container != null) {\r\n                $(options.legend.container).html(\"\");\r\n            } else {\r\n                placeholder.find(\".legend\").remove();\r\n            }\r\n\r\n            if (!options.legend.show) {\r\n                return;\r\n            }\r\n\r\n            var fragments = [], entries = [], rowStarted = false,\r\n                lf = options.legend.labelFormatter, s, label;\r\n\r\n            // Build a list of legend entries, with each having a label and a color\r\n\r\n            for (var i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                if (s.label) {\r\n                    label = lf ? lf(s.label, s) : s.label;\r\n                    if (label) {\r\n                        entries.push({\r\n                            label: label,\r\n                            color: s.color\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Sort the legend using either the default or a custom comparator\r\n\r\n            if (options.legend.sorted) {\r\n                if ($.isFunction(options.legend.sorted)) {\r\n                    entries.sort(options.legend.sorted);\r\n                } else if (options.legend.sorted == \"reverse\") {\r\n                \tentries.reverse();\r\n                } else {\r\n                    var ascending = options.legend.sorted != \"descending\";\r\n                    entries.sort(function(a, b) {\r\n                        return a.label == b.label ? 0 : (\r\n                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n\r\n            // Generate markup for the list of entries, in their final order\r\n\r\n            for (var i = 0; i < entries.length; ++i) {\r\n\r\n                var entry = entries[i];\r\n\r\n                if (i % options.legend.noColumns == 0) {\r\n                    if (rowStarted)\r\n                        fragments.push('</tr>');\r\n                    fragments.push('<tr>');\r\n                    rowStarted = true;\r\n                }\r\n\r\n                fragments.push(\r\n                    '<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' +\r\n                    '<td class=\"legendLabel\">' + entry.label + '</td>'\r\n                );\r\n            }\r\n\r\n            if (rowStarted)\r\n                fragments.push('</tr>');\r\n\r\n            if (fragments.length == 0)\r\n                return;\r\n\r\n            var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\r\n            if (options.legend.container != null)\r\n                $(options.legend.container).html(table);\r\n            else {\r\n                var pos = \"\",\r\n                    p = options.legend.position,\r\n                    m = options.legend.margin;\r\n                if (m[0] == null)\r\n                    m = [m, m];\r\n                if (p.charAt(0) == \"n\")\r\n                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';\r\n                else if (p.charAt(0) == \"s\")\r\n                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\r\n                if (p.charAt(1) == \"e\")\r\n                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';\r\n                else if (p.charAt(1) == \"w\")\r\n                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\r\n                var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos +';') + '</div>').appendTo(placeholder);\r\n                if (options.legend.backgroundOpacity != 0.0) {\r\n                    // put in the transparent background\r\n                    // separately to avoid blended labels and\r\n                    // label boxes\r\n                    var c = options.legend.backgroundColor;\r\n                    if (c == null) {\r\n                        c = options.grid.backgroundColor;\r\n                        if (c && typeof c == \"string\")\r\n                            c = $.color.parse(c);\r\n                        else\r\n                            c = $.color.extract(legend, 'background-color');\r\n                        c.a = 1;\r\n                        c = c.toString();\r\n                    }\r\n                    var div = legend.children();\r\n                    $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // interactive features\r\n\r\n        var highlights = [],\r\n            redrawTimeout = null;\r\n\r\n        // returns the data item the mouse is over, or null if none is found\r\n        function findNearbyItem(mouseX, mouseY, seriesFilter) {\r\n            var maxDistance = options.grid.mouseActiveRadius,\r\n                smallestDistance = maxDistance * maxDistance + 1,\r\n                item = null, foundPoint = false, i, j, ps;\r\n\r\n            for (i = series.length - 1; i >= 0; --i) {\r\n                if (!seriesFilter(series[i]))\r\n                    continue;\r\n\r\n                var s = series[i],\r\n                    axisx = s.xaxis,\r\n                    axisy = s.yaxis,\r\n                    points = s.datapoints.points,\r\n                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\r\n                    my = axisy.c2p(mouseY),\r\n                    maxx = maxDistance / axisx.scale,\r\n                    maxy = maxDistance / axisy.scale;\r\n\r\n                ps = s.datapoints.pointsize;\r\n                // with inverse transforms, we can't use the maxx/maxy\r\n                // optimization, sadly\r\n                if (axisx.options.inverseTransform)\r\n                    maxx = Number.MAX_VALUE;\r\n                if (axisy.options.inverseTransform)\r\n                    maxy = Number.MAX_VALUE;\r\n\r\n                if (s.lines.show || s.points.show) {\r\n                    for (j = 0; j < points.length; j += ps) {\r\n                        var x = points[j], y = points[j + 1];\r\n                        if (x == null)\r\n                            continue;\r\n\r\n                        // For points and lines, the cursor must be within a\r\n                        // certain distance to the data point\r\n                        if (x - mx > maxx || x - mx < -maxx ||\r\n                            y - my > maxy || y - my < -maxy)\r\n                            continue;\r\n\r\n                        // We have to calculate distances in pixels, not in\r\n                        // data units, because the scales of the axes may be different\r\n                        var dx = Math.abs(axisx.p2c(x) - mouseX),\r\n                            dy = Math.abs(axisy.p2c(y) - mouseY),\r\n                            dist = dx * dx + dy * dy; // we save the sqrt\r\n\r\n                        // use <= to ensure last point takes precedence\r\n                        // (last generally means on top of)\r\n                        if (dist < smallestDistance) {\r\n                            smallestDistance = dist;\r\n                            item = [i, j / ps];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (s.bars.show && !item) { // no other point can be nearby\r\n\r\n                    var barLeft, barRight;\r\n\r\n                    switch (s.bars.align) {\r\n                        case \"left\":\r\n                            barLeft = 0;\r\n                            break;\r\n                        case \"right\":\r\n                            barLeft = -s.bars.barWidth;\r\n                            break;\r\n                        default:\r\n                            barLeft = -s.bars.barWidth / 2;\r\n                    }\r\n\r\n                    barRight = barLeft + s.bars.barWidth;\r\n\r\n                    for (j = 0; j < points.length; j += ps) {\r\n                        var x = points[j], y = points[j + 1], b = points[j + 2];\r\n                        if (x == null)\r\n                            continue;\r\n\r\n                        // for a bar graph, the cursor must be inside the bar\r\n                        if (series[i].bars.horizontal ?\r\n                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\r\n                             my >= y + barLeft && my <= y + barRight) :\r\n                            (mx >= x + barLeft && mx <= x + barRight &&\r\n                             my >= Math.min(b, y) && my <= Math.max(b, y)))\r\n                                item = [i, j / ps];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                i = item[0];\r\n                j = item[1];\r\n                ps = series[i].datapoints.pointsize;\r\n\r\n                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\r\n                         dataIndex: j,\r\n                         series: series[i],\r\n                         seriesIndex: i };\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function onMouseMove(e) {\r\n            if (options.grid.hoverable)\r\n                triggerClickHoverEvent(\"plothover\", e,\r\n                                       function (s) { return s[\"hoverable\"] != false; });\r\n        }\r\n\r\n        function onMouseLeave(e) {\r\n            if (options.grid.hoverable)\r\n                triggerClickHoverEvent(\"plothover\", e,\r\n                                       function (s) { return false; });\r\n        }\r\n\r\n        function onClick(e) {\r\n            triggerClickHoverEvent(\"plotclick\", e,\r\n                                   function (s) { return s[\"clickable\"] != false; });\r\n        }\r\n\r\n        // trigger click or hover event (they send the same parameters\r\n        // so we share their code)\r\n        function triggerClickHoverEvent(eventname, event, seriesFilter) {\r\n            var offset = eventHolder.offset(),\r\n                canvasX = event.pageX - offset.left - plotOffset.left,\r\n                canvasY = event.pageY - offset.top - plotOffset.top,\r\n            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\r\n\r\n            pos.pageX = event.pageX;\r\n            pos.pageY = event.pageY;\r\n\r\n            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\r\n\r\n            if (item) {\r\n                // fill in mouse pos for any listeners out there\r\n                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\r\n                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\r\n            }\r\n\r\n            if (options.grid.autoHighlight) {\r\n                // clear auto-highlights\r\n                for (var i = 0; i < highlights.length; ++i) {\r\n                    var h = highlights[i];\r\n                    if (h.auto == eventname &&\r\n                        !(item && h.series == item.series &&\r\n                          h.point[0] == item.datapoint[0] &&\r\n                          h.point[1] == item.datapoint[1]))\r\n                        unhighlight(h.series, h.point);\r\n                }\r\n\r\n                if (item)\r\n                    highlight(item.series, item.datapoint, eventname);\r\n            }\r\n\r\n            placeholder.trigger(eventname, [ pos, item ]);\r\n        }\r\n\r\n        function triggerRedrawOverlay() {\r\n            var t = options.interaction.redrawOverlayInterval;\r\n            if (t == -1) {      // skip event queue\r\n                drawOverlay();\r\n                return;\r\n            }\r\n\r\n            if (!redrawTimeout)\r\n                redrawTimeout = setTimeout(drawOverlay, t);\r\n        }\r\n\r\n        function drawOverlay() {\r\n            redrawTimeout = null;\r\n\r\n            // draw highlights\r\n            octx.save();\r\n            overlay.clear();\r\n            octx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            var i, hi;\r\n            for (i = 0; i < highlights.length; ++i) {\r\n                hi = highlights[i];\r\n\r\n                if (hi.series.bars.show)\r\n                    drawBarHighlight(hi.series, hi.point);\r\n                else\r\n                    drawPointHighlight(hi.series, hi.point);\r\n            }\r\n            octx.restore();\r\n\r\n            executeHooks(hooks.drawOverlay, [octx]);\r\n        }\r\n\r\n        function highlight(s, point, auto) {\r\n            if (typeof s == \"number\")\r\n                s = series[s];\r\n\r\n            if (typeof point == \"number\") {\r\n                var ps = s.datapoints.pointsize;\r\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\r\n            }\r\n\r\n            var i = indexOfHighlight(s, point);\r\n            if (i == -1) {\r\n                highlights.push({ series: s, point: point, auto: auto });\r\n\r\n                triggerRedrawOverlay();\r\n            }\r\n            else if (!auto)\r\n                highlights[i].auto = false;\r\n        }\r\n\r\n        function unhighlight(s, point) {\r\n            if (s == null && point == null) {\r\n                highlights = [];\r\n                triggerRedrawOverlay();\r\n                return;\r\n            }\r\n\r\n            if (typeof s == \"number\")\r\n                s = series[s];\r\n\r\n            if (typeof point == \"number\") {\r\n                var ps = s.datapoints.pointsize;\r\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\r\n            }\r\n\r\n            var i = indexOfHighlight(s, point);\r\n            if (i != -1) {\r\n                highlights.splice(i, 1);\r\n\r\n                triggerRedrawOverlay();\r\n            }\r\n        }\r\n\r\n        function indexOfHighlight(s, p) {\r\n            for (var i = 0; i < highlights.length; ++i) {\r\n                var h = highlights[i];\r\n                if (h.series == s && h.point[0] == p[0]\r\n                    && h.point[1] == p[1])\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function drawPointHighlight(series, point) {\r\n            var x = point[0], y = point[1],\r\n                axisx = series.xaxis, axisy = series.yaxis,\r\n                highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\r\n\r\n            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\r\n                return;\r\n\r\n            var pointRadius = series.points.radius + series.points.lineWidth / 2;\r\n            octx.lineWidth = pointRadius;\r\n            octx.strokeStyle = highlightColor;\r\n            var radius = 1.5 * pointRadius;\r\n            x = axisx.p2c(x);\r\n            y = axisy.p2c(y);\r\n\r\n            octx.beginPath();\r\n            if (series.points.symbol == \"circle\")\r\n                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n            else\r\n                series.points.symbol(octx, x, y, radius, false);\r\n            octx.closePath();\r\n            octx.stroke();\r\n        }\r\n\r\n        function drawBarHighlight(series, point) {\r\n            var highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\r\n                fillStyle = highlightColor,\r\n                barLeft;\r\n\r\n            switch (series.bars.align) {\r\n                case \"left\":\r\n                    barLeft = 0;\r\n                    break;\r\n                case \"right\":\r\n                    barLeft = -series.bars.barWidth;\r\n                    break;\r\n                default:\r\n                    barLeft = -series.bars.barWidth / 2;\r\n            }\r\n\r\n            octx.lineWidth = series.bars.lineWidth;\r\n            octx.strokeStyle = highlightColor;\r\n\r\n            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\r\n                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\r\n        }\r\n\r\n        function getColorOrGradient(spec, bottom, top, defaultColor) {\r\n            if (typeof spec == \"string\")\r\n                return spec;\r\n            else {\r\n                // assume this is a gradient spec; IE currently only\r\n                // supports a simple vertical gradient properly, so that's\r\n                // what we support too\r\n                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\r\n\r\n                for (var i = 0, l = spec.colors.length; i < l; ++i) {\r\n                    var c = spec.colors[i];\r\n                    if (typeof c != \"string\") {\r\n                        var co = $.color.parse(defaultColor);\r\n                        if (c.brightness != null)\r\n                            co = co.scale('rgb', c.brightness);\r\n                        if (c.opacity != null)\r\n                            co.a *= c.opacity;\r\n                        c = co.toString();\r\n                    }\r\n                    gradient.addColorStop(i / (l - 1), c);\r\n                }\r\n\r\n                return gradient;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add the plot function to the top level of the jQuery object\r\n\r\n    $.plot = function(placeholder, data, options) {\r\n        //var t0 = new Date();\r\n        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\r\n        //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\r\n        return plot;\r\n    };\r\n\r\n    $.plot.version = \"0.8.3\";\r\n\r\n    $.plot.plugins = [];\r\n\r\n    // Also add the plot function as a chainable property\r\n\r\n    $.fn.plot = function(data, options) {\r\n        return this.each(function() {\r\n            $.plot(this, data, options);\r\n        });\r\n    };\r\n\r\n    // round to nearby lower multiple of base\r\n    function floorInBase(n, base) {\r\n        return base * Math.floor(n / base);\r\n    }\r\n\r\n})(jQuery);\r\n","/* Pretty handling of time axes.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\r\nAPI.txt for details.\r\n\r\n*/\r\n\r\n(function($) {\r\n\r\n\tvar options = {\r\n\t\txaxis: {\r\n\t\t\ttimezone: null,\t\t// \"browser\" for local to the client or timezone for timezone-js\r\n\t\t\ttimeformat: null,\t// format string to use\r\n\t\t\ttwelveHourClock: false,\t// 12 or 24 time in time mode\r\n\t\t\tmonthNames: null\t// list of names of months\r\n\t\t}\r\n\t};\r\n\r\n\t// round to nearby lower multiple of base\r\n\r\n\tfunction floorInBase(n, base) {\r\n\t\treturn base * Math.floor(n / base);\r\n\t}\r\n\r\n\t// Returns a string with the date d formatted according to fmt.\r\n\t// A subset of the Open Group's strftime format is supported.\r\n\r\n\tfunction formatDate(d, fmt, monthNames, dayNames) {\r\n\r\n\t\tif (typeof d.strftime == \"function\") {\r\n\t\t\treturn d.strftime(fmt);\r\n\t\t}\r\n\r\n\t\tvar leftPad = function(n, pad) {\r\n\t\t\tn = \"\" + n;\r\n\t\t\tpad = \"\" + (pad == null ? \"0\" : pad);\r\n\t\t\treturn n.length == 1 ? pad + n : n;\r\n\t\t};\r\n\r\n\t\tvar r = [];\r\n\t\tvar escape = false;\r\n\t\tvar hours = d.getHours();\r\n\t\tvar isAM = hours < 12;\r\n\r\n\t\tif (monthNames == null) {\r\n\t\t\tmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\t\t}\r\n\r\n\t\tif (dayNames == null) {\r\n\t\t\tdayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\t\t}\r\n\r\n\t\tvar hours12;\r\n\r\n\t\tif (hours > 12) {\r\n\t\t\thours12 = hours - 12;\r\n\t\t} else if (hours == 0) {\r\n\t\t\thours12 = 12;\r\n\t\t} else {\r\n\t\t\thours12 = hours;\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < fmt.length; ++i) {\r\n\r\n\t\t\tvar c = fmt.charAt(i);\r\n\r\n\t\t\tif (escape) {\r\n\t\t\t\tswitch (c) {\r\n\t\t\t\t\tcase 'a': c = \"\" + dayNames[d.getDay()]; break;\r\n\t\t\t\t\tcase 'b': c = \"\" + monthNames[d.getMonth()]; break;\r\n\t\t\t\t\tcase 'd': c = leftPad(d.getDate()); break;\r\n\t\t\t\t\tcase 'e': c = leftPad(d.getDate(), \" \"); break;\r\n\t\t\t\t\tcase 'h':\t// For back-compat with 0.7; remove in 1.0\r\n\t\t\t\t\tcase 'H': c = leftPad(hours); break;\r\n\t\t\t\t\tcase 'I': c = leftPad(hours12); break;\r\n\t\t\t\t\tcase 'l': c = leftPad(hours12, \" \"); break;\r\n\t\t\t\t\tcase 'm': c = leftPad(d.getMonth() + 1); break;\r\n\t\t\t\t\tcase 'M': c = leftPad(d.getMinutes()); break;\r\n\t\t\t\t\t// quarters not in Open Group's strftime specification\r\n\t\t\t\t\tcase 'q':\r\n\t\t\t\t\t\tc = \"\" + (Math.floor(d.getMonth() / 3) + 1); break;\r\n\t\t\t\t\tcase 'S': c = leftPad(d.getSeconds()); break;\r\n\t\t\t\t\tcase 'y': c = leftPad(d.getFullYear() % 100); break;\r\n\t\t\t\t\tcase 'Y': c = \"\" + d.getFullYear(); break;\r\n\t\t\t\t\tcase 'p': c = (isAM) ? (\"\" + \"am\") : (\"\" + \"pm\"); break;\r\n\t\t\t\t\tcase 'P': c = (isAM) ? (\"\" + \"AM\") : (\"\" + \"PM\"); break;\r\n\t\t\t\t\tcase 'w': c = \"\" + d.getDay(); break;\r\n\t\t\t\t}\r\n\t\t\t\tr.push(c);\r\n\t\t\t\tescape = false;\r\n\t\t\t} else {\r\n\t\t\t\tif (c == \"%\") {\r\n\t\t\t\t\tescape = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tr.push(c);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn r.join(\"\");\r\n\t}\r\n\r\n\t// To have a consistent view of time-based data independent of which time\r\n\t// zone the client happens to be in we need a date-like object independent\r\n\t// of time zones.  This is done through a wrapper that only calls the UTC\r\n\t// versions of the accessor methods.\r\n\r\n\tfunction makeUtcWrapper(d) {\r\n\r\n\t\tfunction addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\r\n\t\t\tsourceObj[sourceMethod] = function() {\r\n\t\t\t\treturn targetObj[targetMethod].apply(targetObj, arguments);\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar utc = {\r\n\t\t\tdate: d\r\n\t\t};\r\n\r\n\t\t// support strftime, if found\r\n\r\n\t\tif (d.strftime != undefined) {\r\n\t\t\taddProxyMethod(utc, \"strftime\", d, \"strftime\");\r\n\t\t}\r\n\r\n\t\taddProxyMethod(utc, \"getTime\", d, \"getTime\");\r\n\t\taddProxyMethod(utc, \"setTime\", d, \"setTime\");\r\n\r\n\t\tvar props = [\"Date\", \"Day\", \"FullYear\", \"Hours\", \"Milliseconds\", \"Minutes\", \"Month\", \"Seconds\"];\r\n\r\n\t\tfor (var p = 0; p < props.length; p++) {\r\n\t\t\taddProxyMethod(utc, \"get\" + props[p], d, \"getUTC\" + props[p]);\r\n\t\t\taddProxyMethod(utc, \"set\" + props[p], d, \"setUTC\" + props[p]);\r\n\t\t}\r\n\r\n\t\treturn utc;\r\n\t};\r\n\r\n\t// select time zone strategy.  This returns a date-like object tied to the\r\n\t// desired timezone\r\n\r\n\tfunction dateGenerator(ts, opts) {\r\n\t\tif (opts.timezone == \"browser\") {\r\n\t\t\treturn new Date(ts);\r\n\t\t} else if (!opts.timezone || opts.timezone == \"utc\") {\r\n\t\t\treturn makeUtcWrapper(new Date(ts));\r\n\t\t} else if (typeof timezoneJS != \"undefined\" && typeof timezoneJS.Date != \"undefined\") {\r\n\t\t\tvar d = new timezoneJS.Date();\r\n\t\t\t// timezone-js is fickle, so be sure to set the time zone before\r\n\t\t\t// setting the time.\r\n\t\t\td.setTimezone(opts.timezone);\r\n\t\t\td.setTime(ts);\r\n\t\t\treturn d;\r\n\t\t} else {\r\n\t\t\treturn makeUtcWrapper(new Date(ts));\r\n\t\t}\r\n\t}\r\n\t\r\n\t// map of app. size of time units in milliseconds\r\n\r\n\tvar timeUnitSize = {\r\n\t\t\"second\": 1000,\r\n\t\t\"minute\": 60 * 1000,\r\n\t\t\"hour\": 60 * 60 * 1000,\r\n\t\t\"day\": 24 * 60 * 60 * 1000,\r\n\t\t\"month\": 30 * 24 * 60 * 60 * 1000,\r\n\t\t\"quarter\": 3 * 30 * 24 * 60 * 60 * 1000,\r\n\t\t\"year\": 365.2425 * 24 * 60 * 60 * 1000\r\n\t};\r\n\r\n\t// the allowed tick sizes, after 1 year we use\r\n\t// an integer algorithm\r\n\r\n\tvar baseSpec = [\r\n\t\t[1, \"second\"], [2, \"second\"], [5, \"second\"], [10, \"second\"],\r\n\t\t[30, \"second\"], \r\n\t\t[1, \"minute\"], [2, \"minute\"], [5, \"minute\"], [10, \"minute\"],\r\n\t\t[30, \"minute\"], \r\n\t\t[1, \"hour\"], [2, \"hour\"], [4, \"hour\"],\r\n\t\t[8, \"hour\"], [12, \"hour\"],\r\n\t\t[1, \"day\"], [2, \"day\"], [3, \"day\"],\r\n\t\t[0.25, \"month\"], [0.5, \"month\"], [1, \"month\"],\r\n\t\t[2, \"month\"]\r\n\t];\r\n\r\n\t// we don't know which variant(s) we'll need yet, but generating both is\r\n\t// cheap\r\n\r\n\tvar specMonths = baseSpec.concat([[3, \"month\"], [6, \"month\"],\r\n\t\t[1, \"year\"]]);\r\n\tvar specQuarters = baseSpec.concat([[1, \"quarter\"], [2, \"quarter\"],\r\n\t\t[1, \"year\"]]);\r\n\r\n\tfunction init(plot) {\r\n\t\tplot.hooks.processOptions.push(function (plot, options) {\r\n\t\t\t$.each(plot.getAxes(), function(axisName, axis) {\r\n\r\n\t\t\t\tvar opts = axis.options;\r\n\r\n\t\t\t\tif (opts.mode == \"time\") {\r\n\t\t\t\t\taxis.tickGenerator = function(axis) {\r\n\r\n\t\t\t\t\t\tvar ticks = [];\r\n\t\t\t\t\t\tvar d = dateGenerator(axis.min, opts);\r\n\t\t\t\t\t\tvar minSize = 0;\r\n\r\n\t\t\t\t\t\t// make quarter use a possibility if quarters are\r\n\t\t\t\t\t\t// mentioned in either of these options\r\n\r\n\t\t\t\t\t\tvar spec = (opts.tickSize && opts.tickSize[1] ===\r\n\t\t\t\t\t\t\t\"quarter\") ||\r\n\t\t\t\t\t\t\t(opts.minTickSize && opts.minTickSize[1] ===\r\n\t\t\t\t\t\t\t\"quarter\") ? specQuarters : specMonths;\r\n\r\n\t\t\t\t\t\tif (opts.minTickSize != null) {\r\n\t\t\t\t\t\t\tif (typeof opts.tickSize == \"number\") {\r\n\t\t\t\t\t\t\t\tminSize = opts.tickSize;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tminSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor (var i = 0; i < spec.length - 1; ++i) {\r\n\t\t\t\t\t\t\tif (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]\r\n\t\t\t\t\t\t\t\t\t\t\t  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2\r\n\t\t\t\t\t\t\t\t&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar size = spec[i][0];\r\n\t\t\t\t\t\tvar unit = spec[i][1];\r\n\r\n\t\t\t\t\t\t// special-case the possibility of several years\r\n\r\n\t\t\t\t\t\tif (unit == \"year\") {\r\n\r\n\t\t\t\t\t\t\t// if given a minTickSize in years, just use it,\r\n\t\t\t\t\t\t\t// ensuring that it's an integer\r\n\r\n\t\t\t\t\t\t\tif (opts.minTickSize != null && opts.minTickSize[1] == \"year\") {\r\n\t\t\t\t\t\t\t\tsize = Math.floor(opts.minTickSize[0]);\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tvar magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\r\n\t\t\t\t\t\t\t\tvar norm = (axis.delta / timeUnitSize.year) / magn;\r\n\r\n\t\t\t\t\t\t\t\tif (norm < 1.5) {\r\n\t\t\t\t\t\t\t\t\tsize = 1;\r\n\t\t\t\t\t\t\t\t} else if (norm < 3) {\r\n\t\t\t\t\t\t\t\t\tsize = 2;\r\n\t\t\t\t\t\t\t\t} else if (norm < 7.5) {\r\n\t\t\t\t\t\t\t\t\tsize = 5;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tsize = 10;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tsize *= magn;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// minimum size for years is 1\r\n\r\n\t\t\t\t\t\t\tif (size < 1) {\r\n\t\t\t\t\t\t\t\tsize = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taxis.tickSize = opts.tickSize || [size, unit];\r\n\t\t\t\t\t\tvar tickSize = axis.tickSize[0];\r\n\t\t\t\t\t\tunit = axis.tickSize[1];\r\n\r\n\t\t\t\t\t\tvar step = tickSize * timeUnitSize[unit];\r\n\r\n\t\t\t\t\t\tif (unit == \"second\") {\r\n\t\t\t\t\t\t\td.setSeconds(floorInBase(d.getSeconds(), tickSize));\r\n\t\t\t\t\t\t} else if (unit == \"minute\") {\r\n\t\t\t\t\t\t\td.setMinutes(floorInBase(d.getMinutes(), tickSize));\r\n\t\t\t\t\t\t} else if (unit == \"hour\") {\r\n\t\t\t\t\t\t\td.setHours(floorInBase(d.getHours(), tickSize));\r\n\t\t\t\t\t\t} else if (unit == \"month\") {\r\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), tickSize));\r\n\t\t\t\t\t\t} else if (unit == \"quarter\") {\r\n\t\t\t\t\t\t\td.setMonth(3 * floorInBase(d.getMonth() / 3,\r\n\t\t\t\t\t\t\t\ttickSize));\r\n\t\t\t\t\t\t} else if (unit == \"year\") {\r\n\t\t\t\t\t\t\td.setFullYear(floorInBase(d.getFullYear(), tickSize));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// reset smaller components\r\n\r\n\t\t\t\t\t\td.setMilliseconds(0);\r\n\r\n\t\t\t\t\t\tif (step >= timeUnitSize.minute) {\r\n\t\t\t\t\t\t\td.setSeconds(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.hour) {\r\n\t\t\t\t\t\t\td.setMinutes(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.day) {\r\n\t\t\t\t\t\t\td.setHours(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.day * 4) {\r\n\t\t\t\t\t\t\td.setDate(1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.month * 2) {\r\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 3));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.quarter * 2) {\r\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 6));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (step >= timeUnitSize.year) {\r\n\t\t\t\t\t\t\td.setMonth(0);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar carry = 0;\r\n\t\t\t\t\t\tvar v = Number.NaN;\r\n\t\t\t\t\t\tvar prev;\r\n\r\n\t\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\t\tprev = v;\r\n\t\t\t\t\t\t\tv = d.getTime();\r\n\t\t\t\t\t\t\tticks.push(v);\r\n\r\n\t\t\t\t\t\t\tif (unit == \"month\" || unit == \"quarter\") {\r\n\t\t\t\t\t\t\t\tif (tickSize < 1) {\r\n\r\n\t\t\t\t\t\t\t\t\t// a bit complicated - we'll divide the\r\n\t\t\t\t\t\t\t\t\t// month/quarter up but we need to take\r\n\t\t\t\t\t\t\t\t\t// care of fractions so we don't end up in\r\n\t\t\t\t\t\t\t\t\t// the middle of a day\r\n\r\n\t\t\t\t\t\t\t\t\td.setDate(1);\r\n\t\t\t\t\t\t\t\t\tvar start = d.getTime();\r\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\r\n\t\t\t\t\t\t\t\t\t\t(unit == \"quarter\" ? 3 : 1));\r\n\t\t\t\t\t\t\t\t\tvar end = d.getTime();\r\n\t\t\t\t\t\t\t\t\td.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\r\n\t\t\t\t\t\t\t\t\tcarry = d.getHours();\r\n\t\t\t\t\t\t\t\t\td.setHours(0);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\r\n\t\t\t\t\t\t\t\t\t\ttickSize * (unit == \"quarter\" ? 3 : 1));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if (unit == \"year\") {\r\n\t\t\t\t\t\t\t\td.setFullYear(d.getFullYear() + tickSize);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\td.setTime(v + step);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} while (v < axis.max && v != prev);\r\n\r\n\t\t\t\t\t\treturn ticks;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\taxis.tickFormatter = function (v, axis) {\r\n\r\n\t\t\t\t\t\tvar d = dateGenerator(v, axis.options);\r\n\r\n\t\t\t\t\t\t// first check global format\r\n\r\n\t\t\t\t\t\tif (opts.timeformat != null) {\r\n\t\t\t\t\t\t\treturn formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// possibly use quarters if quarters are mentioned in\r\n\t\t\t\t\t\t// any of these places\r\n\r\n\t\t\t\t\t\tvar useQuarters = (axis.options.tickSize &&\r\n\t\t\t\t\t\t\t\taxis.options.tickSize[1] == \"quarter\") ||\r\n\t\t\t\t\t\t\t(axis.options.minTickSize &&\r\n\t\t\t\t\t\t\t\taxis.options.minTickSize[1] == \"quarter\");\r\n\r\n\t\t\t\t\t\tvar t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\r\n\t\t\t\t\t\tvar span = axis.max - axis.min;\r\n\t\t\t\t\t\tvar suffix = (opts.twelveHourClock) ? \" %p\" : \"\";\r\n\t\t\t\t\t\tvar hourCode = (opts.twelveHourClock) ? \"%I\" : \"%H\";\r\n\t\t\t\t\t\tvar fmt;\r\n\r\n\t\t\t\t\t\tif (t < timeUnitSize.minute) {\r\n\t\t\t\t\t\t\tfmt = hourCode + \":%M:%S\" + suffix;\r\n\t\t\t\t\t\t} else if (t < timeUnitSize.day) {\r\n\t\t\t\t\t\t\tif (span < 2 * timeUnitSize.day) {\r\n\t\t\t\t\t\t\t\tfmt = hourCode + \":%M\" + suffix;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfmt = \"%b %d \" + hourCode + \":%M\" + suffix;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (t < timeUnitSize.month) {\r\n\t\t\t\t\t\t\tfmt = \"%b %d\";\r\n\t\t\t\t\t\t} else if ((useQuarters && t < timeUnitSize.quarter) ||\r\n\t\t\t\t\t\t\t(!useQuarters && t < timeUnitSize.year)) {\r\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\r\n\t\t\t\t\t\t\t\tfmt = \"%b\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfmt = \"%b %Y\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (useQuarters && t < timeUnitSize.year) {\r\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\r\n\t\t\t\t\t\t\t\tfmt = \"Q%q\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfmt = \"Q%q %Y\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfmt = \"%Y\";\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\r\n\r\n\t\t\t\t\t\treturn rt;\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t$.plot.plugins.push({\r\n\t\tinit: init,\r\n\t\toptions: options,\r\n\t\tname: 'time',\r\n\t\tversion: '1.0'\r\n\t});\r\n\r\n\t// Time-axis support used to be in Flot core, which exposed the\r\n\t// formatDate function on the plot object.  Various plugins depend\r\n\t// on the function, so we need to re-expose it here.\r\n\r\n\t$.plot.formatDate = formatDate;\r\n\t$.plot.dateGenerator = dateGenerator;\r\n\r\n})(jQuery);\r\n","// src/plugins/vuetify.js\r\n\r\nimport Vue from 'vue'\r\nimport Vuetify from 'vuetify'\r\nimport 'vuetify/dist/vuetify.min.css'\r\n\r\nVue.use(Vuetify);\r\n\r\nconst opts = {};\r\n\r\nexport default new Vuetify(opts)","\r\nimport Vue from \"vue\";\r\nimport App from \"./App.vue\";\r\nimport router from \"./router\";\r\nimport Argon from \"./plugins/argon-kit\";\r\nimport axios from 'axios';\r\nimport VueAxios from 'vue-axios';\r\nimport './registerServiceWorker';\r\nimport './lib/jquery.vmap.rss.js';\r\nimport moment from 'moment';\r\n//flot\r\nimport './lib/Flot/jquery.flot.js';\r\nimport './lib/Flot/jquery.flot.time.js';\r\nimport './lib/Flot/jquery.flot.resize.js';\r\nimport './lib/Flot/jquery.flot.dashes.js';\r\n\r\nimport vuetify from '@/plugins/vuetify' // path to vuetify export\r\nimport jvectormap from 'jvectormap';\r\n\r\nwindow.$ = require('jquery');\r\nwindow.jQuery = require('jquery');\r\n\r\nmoment.updateLocale('fr', {\r\n  months :  ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],\r\n  monthsShort: ['Janv.', 'Févr.', 'mars', 'avril', 'Mai', 'Juin', 'Juil.', 'Août', 'Sept.', 'Oct.', 'Nov.', 'Déc.']\r\n});\r\nmoment.localeData().longDateFormat('L');\r\n\r\nVue.config.productionTip = false;\r\n\r\nVue.config.productionTip = false;\r\nVue.use(Argon, VueAxios, axios, jvectormap);\r\nVue.prototype.$axios = axios;\r\n\r\nexport const bus = new Vue();\r\n\r\nnew Vue({\r\n  router,\r\n  vuetify,\r\n  render: h => h(App)\r\n}).$mount(\"#app\");\r\n","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressChart.vue?vue&type=style&index=0&id=7f0a3666&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressChart.vue?vue&type=style&index=0&id=7f0a3666&scoped=true&lang=css&\"","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DatePickers.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./DatePickers.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RegionTable.vue?vue&type=style&index=0&id=337d4293&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./RegionTable.vue?vue&type=style&index=0&id=337d4293&scoped=true&lang=css&\"","/*\r\n * jQuery.flot.dashes\r\n *\r\n * options = {\r\n *   series: {\r\n *     dashes: {\r\n *\r\n *       // show\r\n *       // default: false\r\n *       // Whether to show dashes for the series.\r\n *       show: <boolean>,\r\n *\r\n *       // lineWidth\r\n *       // default: 2\r\n *       // The width of the dashed line in pixels.\r\n *       lineWidth: <number>,\r\n *\r\n *       // dashLength\r\n *       // default: 10\r\n *       // Controls the length of the individual dashes and the amount of\r\n *       // space between them.\r\n *       // If this is a number, the dashes and spaces will have that length.\r\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\r\n *       dashLength: <number> or <array[2]>\r\n *     }\r\n *   }\r\n * }\r\n */\r\n(function($){\r\n\r\n  function init(plot) {\r\n    plot.hooks.drawSeries.push(function(plot, ctx, series) {\r\n      if (!series.dashes.show) return;\r\n\r\n      var plotOffset = plot.getPlotOffset(),\r\n          axisx = series.xaxis,\r\n          axisy = series.yaxis;\r\n\r\n      function plotDashes(xoffset, yoffset) {\r\n\r\n        var points = series.datapoints.points,\r\n            ps = series.datapoints.pointsize,\r\n            prevx = null,\r\n            prevy = null,\r\n            dashRemainder = 0,\r\n            dashOn = true,\r\n            dashOnLength,\r\n            dashOffLength;\r\n\r\n        if (series.dashes.dashLength[0]) {\r\n          dashOnLength = series.dashes.dashLength[0];\r\n          if (series.dashes.dashLength[1]) {\r\n            dashOffLength = series.dashes.dashLength[1];\r\n          } else {\r\n            dashOffLength = dashOnLength;\r\n          }\r\n        } else {\r\n          dashOffLength = dashOnLength = series.dashes.dashLength;\r\n        }\r\n\r\n        ctx.beginPath();\r\n\r\n        for (var i = ps; i < points.length; i += ps) {\r\n\r\n          var x1 = points[i - ps],\r\n              y1 = points[i - ps + 1],\r\n              x2 = points[i],\r\n              y2 = points[i + 1];\r\n\r\n          if (x1 == null || x2 == null) continue;\r\n\r\n          // clip with ymin\r\n          if (y1 <= y2 && y1 < axisy.min) {\r\n            if (y2 < axisy.min) continue;   // line segment is outside\r\n            // compute new intersection point\r\n            x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y1 = axisy.min;\r\n          } else if (y2 <= y1 && y2 < axisy.min) {\r\n            if (y1 < axisy.min) continue;\r\n            x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y2 = axisy.min;\r\n          }\r\n\r\n          // clip with ymax\r\n          if (y1 >= y2 && y1 > axisy.max) {\r\n            if (y2 > axisy.max) continue;\r\n            x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y1 = axisy.max;\r\n          } else if (y2 >= y1 && y2 > axisy.max) {\r\n            if (y1 > axisy.max) continue;\r\n            x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y2 = axisy.max;\r\n          }\r\n\r\n          // clip with xmin\r\n          if (x1 <= x2 && x1 < axisx.min) {\r\n            if (x2 < axisx.min) continue;\r\n            y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x1 = axisx.min;\r\n          } else if (x2 <= x1 && x2 < axisx.min) {\r\n            if (x1 < axisx.min) continue;\r\n            y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x2 = axisx.min;\r\n          }\r\n\r\n          // clip with xmax\r\n          if (x1 >= x2 && x1 > axisx.max) {\r\n            if (x2 > axisx.max) continue;\r\n            y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x1 = axisx.max;\r\n          } else if (x2 >= x1 && x2 > axisx.max) {\r\n            if (x1 > axisx.max) continue;\r\n            y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x2 = axisx.max;\r\n          }\r\n\r\n          if (x1 != prevx || y1 != prevy) {\r\n            ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\r\n          }\r\n\r\n          var ax1 = axisx.p2c(x1) + xoffset,\r\n              ay1 = axisy.p2c(y1) + yoffset,\r\n              ax2 = axisx.p2c(x2) + xoffset,\r\n              ay2 = axisy.p2c(y2) + yoffset,\r\n              dashOffset;\r\n\r\n          function lineSegmentOffset(segmentLength) {\r\n\r\n            var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\r\n\r\n            if (c <= segmentLength) {\r\n              return {\r\n                deltaX: ax2 - ax1,\r\n                deltaY: ay2 - ay1,\r\n                distance: c,\r\n                remainder: segmentLength - c\r\n              }\r\n            } else {\r\n              var xsign = ax2 > ax1 ? 1 : -1,\r\n                  ysign = ay2 > ay1 ? 1 : -1;\r\n              return {\r\n                deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                distance: segmentLength,\r\n                remainder: 0\r\n              };\r\n            }\r\n          }\r\n          //-end lineSegmentOffset\r\n\r\n          do {\r\n\r\n            dashOffset = lineSegmentOffset(\r\n                dashRemainder > 0 ? dashRemainder :\r\n                  dashOn ? dashOnLength : dashOffLength);\r\n\r\n            if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\r\n              if (dashOn) {\r\n                ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n              } else {\r\n                ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n              }\r\n            }\r\n\r\n            dashOn = !dashOn;\r\n            dashRemainder = dashOffset.remainder;\r\n            ax1 += dashOffset.deltaX;\r\n            ay1 += dashOffset.deltaY;\r\n\r\n          } while (dashOffset.distance > 0);\r\n\r\n          prevx = x2;\r\n          prevy = y2;\r\n        }\r\n\r\n        ctx.stroke();\r\n      }\r\n      //-end plotDashes\r\n\r\n      ctx.save();\r\n      ctx.translate(plotOffset.left, plotOffset.top);\r\n      ctx.lineJoin = 'round';\r\n\r\n      var lw = series.dashes.lineWidth,\r\n          sw = series.shadowSize;\r\n\r\n      // FIXME: consider another form of shadow when filling is turned on\r\n      if (lw > 0 && sw > 0) {\r\n        // draw shadow as a thick and thin line with transparency\r\n        ctx.lineWidth = sw;\r\n        ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\r\n        // position shadow at angle from the mid of line\r\n        var angle = Math.PI/18;\r\n        plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\r\n        ctx.lineWidth = sw/2;\r\n        plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\r\n      }\r\n\r\n      ctx.lineWidth = lw;\r\n      ctx.strokeStyle = series.color;\r\n\r\n      if (lw > 0) {\r\n        plotDashes(0, 0);\r\n      }\r\n\r\n      ctx.restore();\r\n\r\n    });\r\n    //-end draw hook\r\n  }\r\n  //-end init\r\n\r\n  $.plot.plugins.push({\r\n    init: init,\r\n    options: {\r\n      series: {\r\n        dashes: {\r\n          show: false,\r\n          lineWidth: 2,\r\n          dashLength: 10\r\n        }\r\n      }\r\n    },\r\n    name: 'dashes',\r\n    version: '0.1'\r\n  });\r\n\r\n})(jQuery)\r\n","/* Flot plugin for automatically redrawing plots as the placeholder resizes.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nIt works by listening for changes on the placeholder div (through the jQuery\r\nresize event plugin) - if the size changes, it will redraw the plot.\r\n\r\nThere are no options. If you need to disable the plugin for some plots, you\r\ncan just fix the size of their placeholders.\r\n\r\n*/\r\n\r\n/* Inline dependency:\r\n * jQuery resize event - v1.1 - 3/14/2010\r\n * http://benalman.com/projects/jquery-resize-plugin/\r\n *\r\n * Copyright (c) 2010 \"Cowboy\" Ben Alman\r\n * Dual licensed under the MIT and GPL licenses.\r\n * http://benalman.com/about/license/\r\n */\r\n(function($,e,t){\"$:nomunge\";var i=[],n=$.resize=$.extend($.resize,{}),a,r=false,s=\"setTimeout\",u=\"resize\",m=u+\"-special-event\",o=\"pendingDelay\",l=\"activeDelay\",f=\"throttleWindow\";n[o]=200;n[l]=20;n[f]=true;$.event.special[u]={setup:function(){if(!n[f]&&this[s]){return false}var e=$(this);i.push(this);e.data(m,{w:e.width(),h:e.height()});if(i.length===1){a=t;h()}},teardown:function(){if(!n[f]&&this[s]){return false}var e=$(this);for(var t=i.length-1;t>=0;t--){if(i[t]==this){i.splice(t,1);break}}e.removeData(m);if(!i.length){if(r){cancelAnimationFrame(a)}else{clearTimeout(a)}a=null}},add:function(e){if(!n[f]&&this[s]){return false}var i;function a(e,n,a){var r=$(this),s=r.data(m)||{};s.w=n!==t?n:r.width();s.h=a!==t?a:r.height();i.apply(this,arguments)}if($.isFunction(e)){i=e;return a}else{i=e.handler;e.handler=a}}};function h(t){if(r===true){r=t||1}for(var s=i.length-1;s>=0;s--){var l=$(i[s]);if(l[0]==e||l.is(\":visible\")){var f=l.width(),c=l.height(),d=l.data(m);if(d&&(f!==d.w||c!==d.h)){l.trigger(u,[d.w=f,d.h=c]);r=t||true}}else{d=l.data(m);d.w=0;d.h=0}}if(a!==null){if(r&&(t==null||t-r<1e3)){a=e.requestAnimationFrame(h)}else{a=setTimeout(h,n[o]);r=false}}}if(!e.requestAnimationFrame){e.requestAnimationFrame=function(){return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(t,i){return e.setTimeout(function(){t((new Date).getTime())},n[l])}}()}if(!e.cancelAnimationFrame){e.cancelAnimationFrame=function(){return e.webkitCancelRequestAnimationFrame||e.mozCancelRequestAnimationFrame||e.oCancelRequestAnimationFrame||e.msCancelRequestAnimationFrame||clearTimeout}()}})(jQuery,this);\r\n\r\n(function ($) {\r\n    var options = { }; // no options\r\n\r\n    function init(plot) {\r\n        function onResize() {\r\n            var placeholder = plot.getPlaceholder();\r\n\r\n            // somebody might have hidden us and we can't plot\r\n            // when we don't have the dimensions\r\n            if (placeholder.width() == 0 || placeholder.height() == 0)\r\n                return;\r\n\r\n            plot.resize();\r\n            plot.setupGrid();\r\n            plot.draw();\r\n        }\r\n        \r\n        function bindEvents(plot, eventHolder) {\r\n            plot.getPlaceholder().resize(onResize);\r\n        }\r\n\r\n        function shutdown(plot, eventHolder) {\r\n            plot.getPlaceholder().unbind(\"resize\", onResize);\r\n        }\r\n        \r\n        plot.hooks.bindEvents.push(bindEvents);\r\n        plot.hooks.shutdown.push(shutdown);\r\n    }\r\n    \r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'resize',\r\n        version: '1.0'\r\n    });\r\n})(jQuery);\r\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseDropdown.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BaseDropdown.vue?vue&type=style&index=0&lang=css&\"","jQuery.fn.vectorMap('addMap', 'rss', {\"width\":800,\"height\":984,\"paths\":{\"10\":{\"name\":\"Nord-du-Québec\",\"path\":\"M355.32 435.39 355.27 550.34 355.27 554.96 355.07 554.93 354.87 555.09 354.63 555.03 354.41 555.24 354.47 555.38 354.16 555.45 353.98 555.26 353.59 555.30 353.38 555.14 352.96 555.47 352.86 555.75 352.60 555.75 352.11 556.12 352.09 556.37 352.47 556.40 352.38 556.68 352.04 556.93 351.95 557.10 351.64 557.34 351.45 557.63 351.08 557.87 351.13 558.32 351.06 558.56 351.09 558.83 351.52 558.94 351.51 559.26 351.59 559.38 352.00 559.42 352.01 559.54 351.58 559.79 351.32 560.11 351.00 560.30 350.50 561.06 350.17 561.00 350.01 560.85 349.61 561.29 349.25 561.55 348.92 561.62 348.92 561.83 349.40 561.99 349.54 562.10 349.61 562.47 349.52 562.72 349.68 562.96 349.63 563.14 349.89 563.34 349.83 563.67 350.12 563.92 350.22 564.20 350.02 564.70 349.63 565.08 349.36 564.91 349.31 564.50 349.11 564.39 348.95 564.62 348.74 564.75 348.65 565.07 348.75 565.37 348.59 565.87 348.89 566.21 349.19 566.38 349.47 566.27 349.97 566.62 350.28 566.57 350.42 566.67 350.40 566.91 350.65 567.20 350.70 567.51 350.53 567.68 350.13 567.70 349.90 567.62 349.79 567.87 349.54 568.06 349.57 568.56 348.95 568.77 348.53 569.10 348.32 569.37 348.17 569.82 348.23 570.00 348.40 570.06 348.40 570.26 348.67 570.50 348.94 570.20 349.30 570.23 349.30 570.41 349.47 570.64 349.38 571.06 349.58 571.13 350.30 571.01 350.07 571.90 349.90 572.63 349.70 572.67 349.48 573.15 349.19 573.56 349.19 573.77 349.04 573.91 348.95 574.68 348.49 575.36 348.24 575.39 347.82 575.58 347.57 575.78 347.50 576.06 347.49 576.51 347.30 576.66 347.13 577.09 346.87 577.23 346.70 577.56 347.08 577.53 347.06 577.96 347.20 578.06 347.68 578.05 348.16 577.90 348.36 577.89 348.43 578.30 348.20 578.38 347.79 578.65 347.82 578.80 347.60 578.97 347.48 579.29 347.27 579.49 347.30 579.67 347.49 580.00 347.45 580.39 347.36 580.69 347.01 581.08 346.64 581.07 346.50 581.36 346.31 581.42 346.20 581.65 346.00 581.67 345.28 582.02 345.12 581.96 344.66 582.14 344.40 582.06 344.16 582.09 343.77 582.03 343.39 582.13 343.01 582.41 342.70 582.56 342.36 582.50 342.21 582.60 341.65 582.75 341.58 582.86 341.00 583.18 340.94 583.44 340.77 583.52 340.56 583.80 340.14 583.75 339.80 583.48 339.58 583.41 339.29 583.71 338.98 583.75 338.78 583.88 338.67 584.16 338.39 584.06 338.33 583.89 338.08 583.88 338.02 583.64 337.83 583.37 337.63 583.26 337.34 583.22 336.86 583.55 336.69 583.74 336.63 583.95 336.33 584.04 336.14 584.01 335.87 584.45 335.30 584.53 334.74 584.84 334.42 585.10 334.14 585.13 333.80 584.97 333.41 585.25 332.73 585.22 332.60 585.49 332.32 585.56 332.11 585.80 331.76 586.31 331.71 586.47 331.25 586.68 331.07 586.88 330.75 587.07 330.30 587.09 330.20 587.29 330.03 587.18 329.78 587.35 329.35 587.76 329.01 587.71 329.00 587.48 328.81 587.22 328.45 587.07 328.55 586.79 328.89 586.62 329.03 586.40 329.11 586.06 329.04 585.60 328.59 585.70 328.11 585.46 327.63 585.70 327.60 585.90 327.30 585.82 327.22 585.63 327.01 585.53 326.70 585.57 326.46 585.29 326.12 585.89 325.86 586.03 325.40 586.87 324.91 587.31 324.67 587.30 324.34 587.43 324.01 587.49 323.87 587.75 323.61 587.66 323.51 587.84 323.19 588.19 322.86 588.46 322.68 588.51 322.50 588.42 322.39 588.58 321.93 588.44 321.61 588.63 321.53 588.84 321.33 588.95 320.89 589.01 320.71 588.91 320.28 588.98 319.85 588.90 319.63 589.15 319.48 589.61 319.34 589.75 319.22 590.05 319.31 590.35 318.91 590.44 318.69 590.61 318.26 591.20 317.92 591.19 317.67 591.33 317.67 591.64 317.44 591.94 317.41 592.09 317.17 592.13 317.03 592.38 317.30 592.38 317.48 592.54 317.32 592.98 316.90 593.62 316.86 593.87 316.57 594.08 316.13 593.98 316.04 594.06 315.74 594.75 315.64 595.33 315.21 595.69 314.99 595.98 314.64 596.16 314.29 596.44 314.15 597.00 313.83 597.14 313.61 597.40 313.31 598.36 313.90 598.35 314.14 598.49 314.75 598.39 315.26 598.25 315.13 598.61 314.92 598.89 314.90 599.11 314.76 599.24 314.37 599.33 314.03 599.29 313.47 599.88 313.15 600.68 312.48 601.35 312.36 601.71 311.92 601.94 311.70 602.34 311.70 602.85 311.79 603.08 311.62 603.76 311.44 604.23 311.17 604.81 310.73 605.11 310.47 605.13 310.30 605.41 310.29 605.74 309.91 606.63 309.82 607.35 309.69 607.66 309.39 608.64 309.19 608.83 308.93 608.90 308.58 609.08 308.15 609.08 307.97 608.88 307.72 609.00 307.44 608.95 306.86 609.27 306.69 609.29 306.28 609.49 306.11 609.42 305.93 609.20 305.70 609.11 305.41 609.34 305.13 609.74 304.89 609.71 304.80 609.54 304.38 609.48 304.08 609.35 303.75 609.93 303.54 609.98 303.23 610.32 302.72 610.48 302.58 610.90 302.64 611.21 302.59 611.47 302.74 611.68 303.18 611.67 303.30 611.93 302.89 612.15 302.59 612.58 302.39 613.27 302.26 613.45 302.35 613.68 302.35 613.98 302.47 614.09 302.46 614.43 302.26 614.80 301.95 615.71 301.70 615.89 301.58 616.13 301.27 617.08 301.59 617.12 301.53 617.51 301.72 617.74 301.52 618.10 301.34 618.25 301.34 618.51 301.24 618.73 301.70 618.89 301.60 619.34 301.81 619.68 301.84 620.46 301.71 620.60 301.70 620.82 301.48 621.30 301.63 621.43 301.67 621.78 301.58 622.59 301.68 622.82 301.92 622.86 302.14 622.77 302.31 622.94 301.95 623.97 302.09 624.19 302.00 624.60 301.85 624.77 301.85 624.98 302.03 625.15 301.90 625.31 302.37 625.32 302.24 625.56 302.37 625.66 302.43 626.37 302.30 626.81 301.91 627.36 301.23 627.36 301.00 627.44 300.50 627.37 300.43 627.61 300.20 627.90 299.84 628.73 299.82 628.86 299.43 628.90 299.25 629.11 299.01 629.73 298.75 629.96 298.50 630.50 298.37 630.67 297.97 630.88 297.72 630.87 297.46 631.53 297.64 631.72 297.96 631.92 298.35 632.40 298.21 632.56 298.36 632.85 298.24 633.15 297.92 633.20 297.65 633.84 297.50 634.07 297.44 634.41 297.22 634.53 296.97 635.33 296.77 635.40 296.50 635.36 296.36 635.73 296.02 635.91 295.84 636.43 295.39 636.37 295.70 635.46 295.62 635.17 295.47 635.11 295.29 634.85 295.16 634.98 294.72 635.17 294.56 635.58 294.21 635.50 294.01 635.19 293.86 635.27 293.78 634.49 293.45 634.49 293.22 634.80 293.19 635.42 292.93 635.43 292.75 635.68 292.43 635.71 292.04 635.97 291.67 636.53 291.81 636.63 291.91 636.89 292.11 637.04 291.94 637.47 291.78 637.56 291.52 638.10 291.47 638.46 291.85 638.71 291.72 639.18 291.86 639.36 291.94 639.67 291.74 639.67 291.49 639.81 291.34 640.02 291.10 639.93 291.03 639.77 290.66 639.68 290.51 639.75 290.27 639.56 290.00 639.69 289.47 640.04 289.37 640.47 289.38 640.72 289.10 640.71 288.78 641.05 288.86 641.33 288.70 641.48 288.31 641.38 288.09 641.47 287.98 642.03 287.68 642.07 287.60 642.22 287.82 642.43 287.82 642.65 287.98 642.80 288.06 643.18 287.68 643.17 287.57 642.91 287.32 642.76 287.30 642.60 287.09 642.54 286.83 642.76 287.15 642.88 287.04 643.31 287.10 643.51 286.81 643.49 286.96 643.73 286.79 643.93 286.95 644.18 287.19 644.20 287.31 644.34 287.14 644.83 287.26 645.02 287.09 645.25 286.83 645.05 286.53 644.98 286.22 645.14 286.47 645.42 286.40 645.70 286.43 646.50 286.31 646.83 286.49 647.08 286.44 647.27 286.03 647.14 286.00 647.02 285.57 646.71 285.15 646.62 284.76 646.42 284.64 646.46 284.57 646.76 284.36 647.00 284.23 647.33 283.98 647.55 283.88 648.03 283.57 648.10 283.40 649.01 283.16 648.98 282.87 649.66 282.78 650.11 282.59 650.34 282.54 650.64 282.16 650.72 282.00 651.06 282.16 651.24 282.29 651.71 282.02 652.02 281.93 652.40 281.64 652.83 281.73 653.06 281.64 653.41 281.62 653.75 281.48 653.98 281.70 654.30 281.69 654.50 281.39 655.14 281.40 655.26 281.65 655.54 281.53 655.83 281.22 655.83 280.86 655.60 280.72 655.62 280.38 655.43 280.42 655.19 280.11 655.10 280.26 654.85 280.42 654.41 280.41 654.28 280.57 653.86 280.39 653.62 280.42 653.28 279.99 653.07 279.91 653.27 279.56 653.36 279.37 653.19 279.21 653.30 279.09 653.99 278.95 654.21 278.59 654.20 278.08 654.25 277.72 654.64 277.94 654.90 277.94 655.08 277.81 655.42 277.93 655.64 277.94 656.09 277.75 656.51 277.58 657.20 277.37 657.42 277.11 657.12 276.75 657.04 276.58 657.47 276.53 657.77 276.60 657.99 276.56 658.33 276.39 658.65 276.46 658.88 276.38 659.10 276.15 659.21 276.00 659.53 275.74 659.55 275.65 659.98 275.42 660.10 275.03 660.76 274.12 660.68 273.78 660.58 273.67 661.04 273.43 661.61 273.72 662.02 273.73 662.29 273.53 662.69 273.54 662.84 273.30 663.48 273.34 663.70 272.95 664.09 272.89 664.33 272.91 664.62 272.78 664.78 272.55 664.81 272.53 665.00 272.33 665.00 272.24 665.16 272.03 665.21 271.91 665.75 271.54 665.72 271.54 666.10 271.48 666.28 271.05 666.34 270.68 665.90 270.44 665.99 269.98 667.05 269.89 667.82 269.64 667.66 269.39 667.62 269.13 667.70 269.04 667.90 268.83 667.92 268.89 667.64 268.59 667.74 268.14 667.52 268.13 667.01 267.82 667.18 267.49 667.59 267.24 667.78 267.00 667.73 266.83 668.06 266.62 667.79 266.82 667.38 266.99 667.20 267.11 666.88 267.05 666.51 267.07 665.97 267.25 665.50 267.37 665.03 267.13 664.77 267.16 664.33 267.29 663.76 267.00 663.63 267.28 663.01 267.18 662.91 267.34 662.62 267.57 662.45 267.71 661.95 267.49 661.85 267.57 661.69 267.49 661.46 267.53 661.14 267.43 660.82 267.25 660.57 267.01 660.56 266.85 660.83 266.89 661.13 267.01 661.32 266.84 661.42 266.70 661.92 266.55 661.96 266.46 662.24 266.28 662.53 266.04 662.68 265.88 663.13 265.68 663.23 265.64 663.42 265.78 663.73 265.74 664.19 265.57 664.78 265.35 665.17 265.13 665.37 264.92 666.01 264.91 666.34 264.77 666.46 264.45 666.51 264.33 666.77 264.20 667.33 263.77 667.86 263.56 667.74 263.41 668.13 263.23 668.25 263.05 668.06 263.00 667.83 262.79 667.66 262.88 666.97 262.83 666.78 262.54 666.55 262.46 666.25 262.14 666.14 261.90 666.33 261.59 666.91 261.30 666.89 261.26 666.40 261.39 666.20 261.36 666.02 261.55 665.89 261.52 665.61 261.37 665.55 261.46 665.23 261.20 665.04 261.13 665.17 260.90 665.17 260.90 664.93 260.70 664.79 260.63 664.55 260.79 664.47 260.53 664.17 260.66 663.91 260.32 663.81 259.61 663.52 259.53 663.82 259.17 663.89 258.99 663.81 258.28 663.95 258.08 664.11 257.98 663.98 257.67 664.14 257.51 664.09 257.07 664.32 256.91 664.13 256.38 664.54 256.20 664.73 256.08 665.16 255.73 665.37 255.60 665.53 255.62 665.77 255.55 666.14 255.27 666.34 255.22 666.53 254.76 666.60 254.48 666.49 254.13 666.78 254.33 666.98 254.28 667.63 254.04 668.51 253.84 669.41 253.68 669.48 253.44 669.40 253.31 669.75 252.99 669.94 252.83 670.25 252.43 670.75 252.21 670.76 252.12 670.95 252.02 671.50 251.64 671.79 251.22 671.57 251.07 671.73 250.70 671.82 250.63 672.20 250.39 672.21 250.14 672.34 250.07 672.56 249.83 672.48 249.95 672.12 249.94 671.90 250.23 671.79 250.46 671.30 250.61 670.73 250.77 670.59 250.93 670.22 250.61 670.22 250.12 669.94 249.53 669.56 249.35 669.81 249.13 669.83 249.11 669.59 248.95 669.53 249.43 668.59 248.95 668.25 248.85 667.99 248.68 667.79 248.55 667.90 248.22 667.94 248.05 667.62 248.02 667.35 248.14 667.17 247.88 667.11 247.38 667.36 247.31 667.57 246.71 667.18 246.52 667.31 246.29 667.68 245.97 667.99 245.71 668.47 245.68 668.74 245.51 669.24 245.52 669.48 245.37 669.71 245.20 669.61 244.85 669.65 244.64 669.53 244.33 669.71 243.85 669.72 243.78 669.94 243.57 670.11 243.18 670.08 242.98 670.18 242.86 670.53 242.71 670.71 242.83 670.92 242.71 671.22 242.36 671.70 242.29 671.97 242.33 672.16 242.53 672.42 242.24 672.59 242.02 672.90 241.66 673.23 241.46 673.51 241.30 673.61 241.21 673.87 241.28 674.12 241.10 674.50 240.86 674.57 240.75 675.38 240.63 675.66 240.77 675.87 240.69 676.15 240.42 676.26 240.03 676.29 239.84 676.17 239.57 676.80 239.38 677.01 239.29 677.48 239.33 677.73 239.14 678.33 239.05 678.46 239.01 678.78 238.89 679.02 238.51 678.99 238.38 679.35 238.24 679.53 237.86 679.67 237.73 680.26 237.58 680.60 237.57 681.02 237.45 681.37 237.31 681.36 237.19 681.72 237.31 681.82 237.23 682.23 237.09 682.42 236.85 682.32 236.52 682.90 236.28 683.55 235.97 683.56 235.76 684.37 235.61 684.79 235.24 685.32 235.01 685.86 234.95 686.33 235.17 686.57 235.04 686.75 234.96 687.09 235.04 687.20 234.92 687.52 234.49 687.64 234.26 687.62 234.26 687.44 234.12 686.90 234.21 686.75 234.23 686.38 234.13 685.84 233.92 685.88 233.76 686.19 233.80 686.52 233.66 686.66 233.23 686.60 233.05 686.88 232.81 687.03 232.43 687.00 232.15 687.36 232.01 687.62 231.58 687.70 231.52 687.47 231.38 687.37 231.18 687.48 231.09 687.68 230.88 687.74 230.71 687.65 230.56 687.38 230.70 686.97 230.76 686.50 230.95 685.91 230.74 685.44 230.59 685.31 230.18 685.65 229.96 686.05 229.65 686.45 229.66 686.86 229.58 687.12 229.66 687.25 229.56 687.57 229.55 687.92 229.64 688.35 229.93 688.60 229.92 688.72 229.51 688.96 229.42 689.29 229.55 689.42 229.49 689.65 229.32 689.82 229.15 690.84 228.88 691.04 228.83 691.33 228.68 691.52 228.69 691.99 228.35 692.21 227.95 692.89 227.75 693.40 227.45 693.72 227.24 693.87 227.09 694.09 227.15 694.24 227.04 694.62 227.11 694.80 227.02 695.14 226.68 695.52 226.53 695.89 226.18 695.67 226.05 695.79 225.78 695.78 225.54 695.68 225.44 695.50 225.13 695.56 224.83 695.43 224.74 695.20 224.73 694.83 224.46 694.65 224.08 694.97 223.99 695.23 223.62 695.47 223.62 695.64 223.40 696.05 223.17 696.72 223.04 696.88 223.22 697.08 223.05 697.33 222.98 697.85 223.01 698.00 223.27 698.18 223.16 698.53 223.45 698.82 223.27 699.14 222.90 699.25 222.60 699.86 222.72 700.01 222.97 700.10 222.90 700.44 223.12 700.89 222.97 700.96 223.03 701.26 222.84 701.34 222.62 701.64 222.57 701.82 222.64 702.11 222.88 702.32 222.85 702.60 222.95 702.67 222.91 703.01 222.76 703.00 222.75 703.39 222.55 704.00 222.49 704.39 222.34 704.51 222.27 704.87 222.14 704.86 222.00 705.10 222.03 705.33 221.87 705.65 221.62 705.58 221.37 706.06 221.30 706.39 221.07 706.58 220.83 706.49 220.73 706.68 220.18 706.56 220.11 706.93 220.30 707.10 220.06 707.31 219.74 708.25 219.62 708.40 219.42 709.02 219.21 709.09 219.11 709.29 218.67 709.28 218.44 709.58 218.36 709.95 217.88 711.03 217.89 711.82 218.04 711.99 217.89 712.26 217.95 712.37 217.84 712.69 217.66 713.00 217.43 712.96 217.29 713.29 217.29 713.55 217.02 713.96 216.66 714.37 216.21 715.14 215.94 715.68 215.58 715.65 215.00 716.09 214.53 716.96 214.52 717.11 214.34 717.44 213.75 717.73 213.56 721.38 210.66 721.22 210.16 722.01 210.31 722.31 210.16 722.59 210.12 722.85 209.87 722.94 209.82 723.21 209.57 723.60 209.08 723.95 208.96 724.19 208.61 724.24 208.55 724.06 208.28 724.09 207.82 723.80 207.63 723.94 207.47 724.38 207.44 724.75 207.25 725.09 207.11 725.48 207.32 725.88 207.24 726.28 207.05 726.53 206.96 726.77 206.98 726.96 206.90 727.32 206.72 727.47 206.78 727.67 206.60 728.09 206.30 728.31 206.03 728.78 205.71 729.09 205.57 729.64 205.63 729.84 205.55 730.08 204.95 730.06 204.76 729.98 204.67 730.15 204.71 730.57 204.61 730.86 204.71 731.00 204.57 731.47 204.39 731.94 204.23 732.21 204.00 732.44 204.29 732.72 204.50 732.83 204.50 733.10 203.98 733.32 203.49 733.86 203.07 734.10 202.91 734.47 202.65 734.53 202.21 734.76 202.03 734.91 201.54 734.95 201.42 734.86 201.49 734.53 201.96 734.20 202.00 734.10 201.52 733.61 201.15 733.42 200.99 733.63 200.72 733.70 200.51 733.95 200.27 734.44 199.83 734.59 199.60 734.52 199.36 734.94 199.46 735.33 199.53 735.89 199.83 735.91 199.90 736.05 199.78 736.58 199.83 736.82 199.58 737.21 199.41 737.10 199.12 737.13 198.80 737.45 198.72 737.82 198.76 738.13 198.68 738.40 198.72 739.30 198.61 739.64 198.32 739.84 198.27 739.96 198.37 740.33 198.68 740.34 198.92 740.49 198.99 740.76 198.47 741.28 198.43 741.59 198.09 742.00 197.77 742.51 197.48 743.04 197.97 743.38 198.25 743.38 198.95 743.57 199.19 743.42 199.52 743.59 199.59 743.73 199.52 743.99 199.30 744.42 199.97 744.49 200.19 744.69 200.24 744.93 200.63 745.24 200.89 745.33 201.02 745.48 200.80 746.13 201.20 746.06 201.34 746.21 201.55 746.21 201.58 746.43 201.51 746.81 201.62 746.93 201.83 746.88 202.00 746.28 201.91 746.03 202.01 745.55 202.25 745.43 202.47 745.53 202.71 745.42 203.09 745.41 203.22 745.82 203.14 746.08 203.49 746.17 203.73 745.83 203.91 745.68 203.95 745.32 204.17 745.35 204.44 745.49 204.44 745.69 204.61 745.72 204.64 745.92 204.49 746.58 204.64 746.87 204.54 747.09 204.62 747.32 204.56 747.89 204.58 748.24 204.50 748.47 204.45 748.92 204.53 749.29 204.44 749.68 204.10 749.64 203.91 750.13 204.02 750.54 203.90 750.74 203.86 751.11 203.63 751.26 203.58 751.64 203.44 751.89 203.77 752.10 203.75 752.26 203.53 752.38 203.53 753.08 203.65 753.18 203.65 753.78 203.41 753.74 203.37 753.60 203.03 753.69 202.94 754.06 202.90 754.65 202.65 754.96 202.78 755.39 202.72 755.52 202.27 755.68 202.39 755.84 202.49 756.25 202.37 756.42 202.40 756.59 202.25 756.80 202.26 757.30 201.93 757.24 201.80 757.61 201.75 758.51 201.85 758.65 201.61 758.83 201.24 758.78 201.14 758.84 201.22 759.13 201.23 759.55 201.39 759.61 201.39 760.00 201.18 760.27 201.41 760.35 201.71 760.60 201.66 760.94 201.86 761.17 201.61 761.65 201.42 761.84 201.34 762.37 201.18 762.46 200.81 762.34 200.68 762.64 200.28 762.58 200.04 762.79 199.92 762.76 199.76 763.38 199.89 763.80 200.02 763.86 199.77 764.26 199.81 764.58 199.95 764.73 199.85 765.07 199.71 765.24 199.27 765.23 199.07 765.36 198.75 765.43 198.74 765.15 199.03 764.94 199.08 764.52 198.64 764.46 198.56 764.29 197.81 764.42 197.73 764.89 197.42 764.95 197.36 765.13 197.17 765.10 196.89 764.75 196.86 764.44 196.29 764.31 195.96 764.52 195.83 764.38 195.67 763.94 195.79 763.60 195.90 763.50 196.16 763.52 196.21 763.05 196.10 762.76 196.24 762.39 196.10 762.20 195.82 762.21 195.61 762.36 195.60 762.56 195.35 763.26 195.11 763.24 194.85 763.65 194.58 764.13 194.28 764.40 194.15 764.35 194.00 764.55 193.71 764.52 193.50 764.36 193.09 763.41 193.19 763.19 192.97 763.05 192.90 762.86 192.51 762.60 192.72 762.46 192.80 761.86 192.48 761.78 192.36 761.18 192.04 760.95 192.02 760.66 191.80 760.49 191.58 760.80 190.95 760.75 190.84 760.87 190.78 761.27 190.87 761.42 190.77 761.80 190.56 761.77 190.49 762.03 190.60 762.15 190.41 762.45 189.98 762.42 189.95 762.16 189.63 762.01 189.32 762.16 187.71 760.32 187.71 760.29 185.07 760.13 180.57 759.85 176.05 759.56 171.57 759.27 167.07 758.96 162.57 758.65 157.32 758.28 153.58 758.01 149.08 757.68 144.59 757.34 140.09 756.99 135.60 756.64 131.10 756.28 126.61 755.91 122.11 755.53 117.62 755.15 113.13 754.76 108.64 754.36 104.15 753.95 99.66 753.54 95.17 753.12 90.68 752.69 86.19 752.26 81.71 751.82 77.22 751.37 72.73 750.91 68.70 750.50 64.16 750.02 59.28 749.50 53.02 748.82 50.32 748.52 41.25 747.50 41.30 747.01 37.39 746.56 35.92 746.37 35.85 746.91 30.48 746.26 30.53 745.75 25.56 745.16 24.15 744.98 20.38 744.53 13.91 743.75 14.70 737.38 16.45 723.29 17.52 714.64 19.76 696.61 22.29 676.22 23.98 662.60 25.67 649.00 27.36 635.36 29.05 621.74 30.49 610.11 30.73 608.11 31.18 604.41 31.50 604.28 31.59 603.96 31.30 603.62 31.36 603.41 31.67 603.20 32.15 603.23 32.30 603.09 32.82 602.87 33.22 602.54 34.14 601.41 34.47 601.26 34.61 600.96 35.52 600.74 35.65 600.59 35.83 600.11 36.11 599.93 36.34 599.96 36.67 599.83 37.09 599.87 37.96 599.78 38.55 599.57 38.64 599.37 38.86 599.16 39.02 599.11 39.23 599.23 39.24 599.51 39.09 599.87 39.07 600.08 39.17 600.31 39.47 600.69 39.86 601.03 40.68 601.36 41.12 601.41 41.58 601.27 41.89 601.77 41.79 602.04 41.78 602.41 41.68 602.81 41.28 603.35 40.97 603.84 40.74 604.37 40.76 604.79 40.60 605.12 40.89 605.58 40.67 606.02 41.08 606.80 41.45 607.09 41.73 607.43 42.24 607.77 42.66 608.01 43.30 608.20 43.88 608.11 44.44 607.84 44.92 607.76 45.28 607.78 45.56 608.07 45.79 608.44 46.42 609.14 46.65 609.33 46.98 609.75 47.06 609.93 48.13 611.43 48.38 611.68 48.68 612.10 48.81 612.42 54.20 613.66 54.48 613.45 54.77 613.12 54.97 612.52 54.42 610.55 54.31 610.36 54.35 610.10 54.80 609.52 54.89 609.04 54.79 608.12 54.81 607.97 54.74 607.01 54.40 605.41 54.34 605.29 54.31 604.87 54.21 604.49 53.81 603.80 53.44 603.44 53.25 603.14 52.96 602.90 52.54 602.68 51.76 602.57 51.51 602.05 51.27 601.74 51.34 601.42 51.64 600.94 51.71 600.39 51.65 600.09 51.44 599.72 51.14 599.63 50.87 599.68 50.80 599.45 50.61 599.29 50.02 599.19 49.94 599.08 50.06 598.82 49.93 598.37 50.08 598.15 49.90 597.99 50.00 597.63 49.95 597.18 49.51 596.83 48.95 596.70 48.73 596.33 48.75 596.21 48.33 595.62 48.40 595.51 48.83 595.52 49.04 595.34 49.33 594.91 49.90 594.70 50.22 594.49 50.53 594.37 51.14 594.00 51.32 594.01 54.33 588.81 54.25 588.58 54.42 588.28 54.74 588.12 54.74 587.03 55.06 586.68 54.80 586.36 55.01 586.05 55.14 585.69 55.33 585.69 55.43 585.93 55.70 586.05 55.90 586.04 56.19 585.79 56.07 585.59 56.19 585.28 56.34 585.19 56.55 585.29 56.70 585.57 56.24 585.94 56.13 586.13 56.48 586.29 56.35 586.62 56.69 586.49 56.91 586.19 57.27 586.32 57.68 585.97 58.02 586.00 58.16 585.69 58.30 585.56 58.67 585.43 58.81 585.46 60.53 583.63 60.80 583.14 61.19 582.84 61.78 582.53 61.87 582.32 61.69 582.02 61.54 581.97 61.30 581.42 61.28 581.15 61.51 581.16 61.59 581.41 61.99 581.48 62.57 581.25 62.60 581.40 62.86 581.40 63.22 581.25 63.47 580.95 63.61 580.50 63.75 580.36 63.69 580.14 63.52 580.01 63.87 579.84 63.91 579.75 64.53 579.38 64.94 579.08 65.08 579.10 65.36 578.92 65.64 578.66 65.82 578.61 65.98 578.27 66.22 578.00 66.45 577.61 66.66 577.09 66.80 576.96 67.37 575.96 67.74 575.01 67.87 574.38 67.84 574.11 67.92 573.70 67.76 573.27 67.40 573.26 67.13 573.17 67.18 571.32 67.17 570.74 67.58 570.57 67.71 570.42 67.69 570.19 68.10 569.91 68.05 569.64 68.16 569.46 68.02 569.31 68.20 569.16 68.13 569.12 68.12 569.01 68.01 568.82 68.47 568.60 69.16 568.17 69.15 568.02 69.50 567.87 69.63 567.65 69.87 566.60 69.80 566.10 69.79 565.56 69.29 565.51 69.19 564.42 68.10 563.06 68.01 562.92 67.98 561.77 68.42 561.40 68.56 561.07 68.53 560.58 69.06 560.05 69.27 559.92 69.21 559.45 69.25 559.19 69.05 558.80 69.11 558.60 68.98 558.06 69.18 557.69 69.23 557.43 69.00 557.00 68.81 556.94 68.76 556.52 68.55 556.27 68.15 556.19 67.84 556.37 67.68 556.31 67.38 556.42 67.08 556.28 66.84 556.29 66.46 556.11 66.25 556.24 65.74 556.16 65.13 555.84 64.57 555.60 64.39 555.60 64.28 555.27 63.93 555.10 63.02 554.35 62.78 554.29 62.72 554.00 62.82 553.85 62.88 553.43 62.95 553.29 62.94 552.97 63.09 552.70 62.91 549.82 62.16 549.06 62.20 548.85 61.90 548.85 61.82 548.61 61.70 545.81 61.78 545.41 60.53 543.01 60.58 542.87 60.65 542.13 60.56 541.53 60.71 541.55 61.20 536.71 60.97 536.46 61.23 535.86 60.98 535.31 60.73 535.14 60.65 534.21 60.30 533.85 59.98 533.31 59.22 531.81 59.03 531.76 58.89 532.07 58.99 532.19 58.80 532.50 59.13 532.53 58.65 532.84 58.68 532.63 58.36 532.58 58.26 532.96 57.91 533.03 57.87 533.15 57.57 533.32 57.12 533.32 57.37 532.98 58.05 532.72 58.07 532.59 58.39 532.27 58.50 532.25 58.90 531.61 59.06 531.48 58.74 530.77 59.07 530.48 58.99 528.58 58.99 528.26 58.72 528.18 58.71 527.92 58.37 527.72 58.28 527.43 58.45 527.24 58.36 527.08 58.50 526.31 58.63 524.80 58.74 524.43 58.59 523.26 58.67 523.19 59.47 522.92 59.55 521.70 59.83 521.48 60.32 521.34 60.60 520.97 60.60 520.59 60.28 520.18 60.09 520.12 59.94 519.07 60.12 518.86 60.19 518.61 60.46 518.29 61.34 516.99 61.15 515.65 59.16 513.52 59.12 513.38 59.40 512.46 59.19 512.35 58.87 512.31 58.70 512.47 58.53 512.35 58.31 512.41 58.05 512.25 58.07 512.11 58.40 512.00 58.59 511.85 58.57 511.57 58.79 511.67 58.79 511.91 59.01 511.88 59.54 512.07 59.83 511.24 60.40 510.80 60.43 510.66 60.77 510.56 60.94 510.30 61.08 509.86 60.74 509.60 60.80 509.12 61.10 508.88 61.30 508.83 61.66 508.54 61.70 508.21 61.96 508.03 62.01 507.65 61.59 507.42 61.58 507.31 61.27 507.16 61.09 507.19 61.02 507.01 61.08 506.46 60.42 506.27 60.01 505.93 59.52 506.01 59.28 505.84 58.46 505.75 58.49 505.11 58.42 504.44 58.24 503.87 57.97 503.53 57.76 503.72 57.41 503.71 57.47 503.49 57.81 503.23 57.74 503.11 57.96 502.73 57.73 502.58 57.59 502.35 57.29 502.42 57.22 501.56 57.00 501.29 56.77 501.25 56.59 500.97 56.55 500.76 56.77 500.25 57.04 500.20 57.26 500.33 57.60 500.07 57.70 499.84 58.31 498.74 58.60 498.17 58.89 497.33 59.35 495.88 59.51 495.73 59.48 495.46 59.69 495.24 59.94 495.18 60.06 494.82 59.91 494.54 59.09 491.27 58.92 491.18 58.72 490.91 58.59 490.60 57.56 489.89 57.45 489.15 58.06 489.00 58.34 488.82 58.71 488.36 58.86 487.98 59.01 487.98 59.98 486.76 60.18 486.39 60.28 484.97 60.42 484.44 60.30 484.31 60.34 483.47 60.12 483.29 60.39 482.91 60.36 482.76 59.94 482.70 59.66 482.49 59.62 482.27 60.43 482.28 60.53 480.68 60.87 480.49 60.95 480.33 60.66 479.85 60.48 479.79 60.34 479.05 60.43 478.78 60.01 478.86 60.02 478.57 59.82 478.45 59.72 478.21 59.95 478.16 60.23 478.24 59.03 475.85 55.55 468.98 55.29 469.00 55.38 468.65 54.99 467.74 54.75 467.71 54.84 467.37 52.84 462.39 50.40 459.16 50.41 459.10 50.68 455.77 50.84 455.61 50.86 455.23 50.71 454.97 50.86 454.75 51.23 454.47 51.31 454.01 51.40 453.85 51.29 453.52 50.99 453.33 51.13 452.95 51.09 452.57 50.37 451.69 50.46 451.51 50.87 451.32 50.99 451.03 51.13 451.00 51.03 450.56 50.87 450.23 50.70 450.23 50.60 450.02 50.82 449.90 50.83 449.54 50.49 449.39 50.87 448.95 50.40 447.83 50.13 447.03 50.32 446.86 50.32 446.40 50.07 446.06 49.56 446.20 48.99 446.12 48.98 445.94 48.50 445.83 48.57 445.59 48.75 445.68 48.97 445.31 49.16 445.38 49.25 445.23 49.46 445.20 49.28 445.56 49.34 445.86 49.67 445.89 49.72 446.00 50.04 446.01 50.28 445.90 50.26 445.62 49.66 445.44 49.68 445.33 50.01 445.18 50.34 445.14 50.37 444.63 50.27 444.09 50.42 443.94 50.59 443.42 50.25 443.50 50.13 443.36 50.66 443.21 50.70 443.05 50.32 442.53 50.08 442.35 49.82 442.51 49.44 442.57 49.09 442.37 49.18 442.16 49.39 442.11 49.64 442.18 49.58 441.83 49.23 441.81 48.47 440.67 48.13 440.97 47.75 441.06 48.14 440.63 48.46 440.64 48.30 440.34 48.09 440.27 48.14 440.03 46.56 437.01 45.44 436.45 45.08 436.35 44.88 436.16 44.63 436.25 44.50 436.15 44.35 436.39 44.20 436.29 44.19 435.92 44.46 435.76 44.61 435.50 44.69 435.06 45.63 434.83 46.10 434.60 46.28 434.74 46.89 434.36 46.95 434.24 47.32 434.15 47.44 434.00 47.78 433.81 48.14 433.15 48.69 432.83 49.32 432.63 49.43 432.92 49.85 432.84 50.35 432.43 50.60 432.00 51.06 431.74 51.67 431.58 52.02 431.78 52.33 431.81 53.22 431.49 53.99 431.11 54.99 430.19 55.09 430.16 57.01 430.12 57.32 430.15 57.58 430.30 57.87 430.34 58.32 430.32 58.55 430.11 59.05 430.12 59.43 430.02 60.27 429.62 60.31 429.51 60.93 429.34 61.22 429.43 61.53 429.34 62.17 429.04 62.32 428.94 62.87 428.89 63.45 428.92 63.65 429.00 63.94 428.98 64.28 428.82 64.56 428.82 65.11 428.69 65.35 428.55 65.78 428.59 66.16 428.48 66.42 428.29 66.67 428.25 66.97 428.37 67.17 428.26 67.51 428.35 67.62 428.22 68.02 428.18 68.28 428.23 68.88 427.99 69.28 427.62 69.65 427.61 69.88 427.91 70.34 427.92 71.00 427.42 71.30 427.06 71.69 426.96 71.85 426.39 71.80 425.91 72.21 425.79 72.80 425.46 73.13 425.37 73.30 425.53 73.58 425.28 73.45 424.89 74.02 424.86 74.09 424.67 74.83 424.43 75.24 424.34 75.56 424.06 75.64 424.25 75.89 424.29 76.28 424.51 76.52 424.49 76.99 424.61 77.12 424.33 77.48 424.27 77.84 424.13 78.15 423.82 78.65 423.92 79.03 423.79 79.24 423.52 79.53 423.34 79.91 423.35 80.05 423.46 80.58 423.46 81.03 423.17 81.54 422.89 82.15 422.85 82.17 422.60 82.58 422.54 82.86 422.34 83.58 422.04 84.25 421.30 84.73 421.05 84.78 420.89 85.12 420.77 85.41 420.93 85.71 420.84 85.90 420.69 86.44 420.49 90.59 420.94 94.54 421.37 98.49 421.79 102.43 422.21 106.39 422.62 110.34 423.02 114.30 423.41 118.25 423.80 122.21 424.19 126.16 424.56 130.12 424.93 134.08 425.30 149.91 426.69 165.75 427.97 181.60 429.16 197.45 430.24 213.32 431.22 229.19 432.09 245.07 432.87 260.95 433.54 276.83 434.10 292.70 434.57 308.61 434.93 324.50 435.19 340.40 435.34 355.32 435.39ZM60.48 478.60 60.46 479.05 60.91 479.40 60.56 479.78 61.19 479.87 61.56 480.01 61.75 479.97 61.69 480.34 61.45 480.28 61.50 480.76 61.29 480.81 61.21 480.55 60.85 480.65 61.00 480.90 61.00 481.15 61.14 481.20 61.36 481.49 61.41 481.94 62.11 481.93 62.27 482.09 62.62 481.87 62.94 482.01 63.08 481.91 63.26 482.04 63.87 482.24 64.42 482.28 64.44 482.37 64.86 482.53 65.17 482.56 65.42 482.74 65.73 483.22 66.04 483.47 66.18 483.69 66.37 484.25 66.59 484.43 66.95 485.11 67.25 485.51 67.53 486.21 68.21 485.89 65.19 479.58 64.95 479.91 64.52 480.04 63.84 479.81 63.89 479.45 63.56 479.62 63.22 479.46 62.57 479.28 62.50 478.81 62.03 478.81 61.73 479.06 61.39 478.99 61.21 479.05 60.63 478.74 60.48 478.60ZM65.93 484.37 65.66 484.28 65.31 484.56 65.29 485.13 65.34 485.19 65.95 485.34 66.16 485.54 66.30 486.00 66.51 486.13 66.61 486.32 66.56 486.67 66.60 486.80 67.18 487.25 67.63 487.42 68.39 487.83 69.05 488.05 69.61 488.45 70.44 488.59 70.95 488.95 71.37 488.90 71.60 489.01 71.79 489.36 72.14 489.49 72.72 489.41 72.98 489.45 73.35 489.38 73.62 489.52 74.01 490.18 74.48 490.24 74.89 490.66 75.49 490.91 75.87 491.45 75.94 491.79 76.43 492.10 76.36 491.80 76.40 491.63 76.71 491.09 76.58 490.47 75.96 490.40 75.53 489.85 75.57 489.47 75.29 489.43 74.41 489.38 73.91 489.52 73.58 489.37 73.11 489.24 72.79 488.94 72.20 488.65 71.38 488.49 70.97 488.45 70.53 488.05 69.68 487.71 69.08 487.63 68.68 487.49 68.15 487.25 67.59 487.11 67.16 486.67 66.97 486.34 66.94 485.99 66.68 485.74 66.43 485.40 66.39 485.20 66.45 484.91 66.20 484.58 65.93 484.37ZM77.63 490.20 77.51 490.21 77.47 490.57 76.69 490.48 76.77 490.91 76.74 491.08 78.58 492.96 82.90 493.92 87.29 493.33 87.57 493.05 89.82 492.91 89.99 491.35 89.58 491.21 89.37 491.38 89.15 491.23 88.60 491.34 88.53 491.29 88.16 491.40 87.74 491.76 87.34 491.79 87.23 491.88 87.03 491.76 86.83 491.85 86.77 491.63 87.43 491.66 87.59 491.42 87.08 491.34 87.05 491.51 86.60 491.52 86.07 491.32 85.86 491.00 85.29 490.87 84.37 490.54 83.85 490.59 83.81 490.74 83.61 490.90 83.32 490.86 83.13 490.64 83.12 490.46 82.92 490.27 82.48 490.23 81.83 490.44 81.28 490.56 81.09 490.53 80.57 490.60 80.22 490.75 79.89 490.81 79.31 490.82 79.34 491.05 78.86 490.91 78.90 490.81 78.21 490.63 78.26 490.47 78.02 490.27 77.63 490.20ZM80.42 490.37 80.12 490.44 79.71 490.40 79.61 490.62 80.16 490.59 80.42 490.37ZM86.50 493.48 82.90 493.96 78.56 493.00 76.72 491.11 76.42 491.65 76.41 491.88 76.65 492.33 77.23 492.89 77.34 493.13 77.63 493.37 77.97 493.48 78.89 493.46 79.08 493.48 79.45 493.67 79.75 493.62 80.20 493.86 80.56 493.91 80.89 494.21 81.06 494.25 81.90 494.09 82.13 494.14 82.38 494.41 82.78 494.45 83.28 494.57 83.61 494.50 83.97 494.53 84.21 494.38 84.73 494.36 85.07 494.22 85.33 494.23 87.37 493.95 87.69 494.12 88.22 494.07 88.55 494.17 88.95 494.12 89.41 494.23 89.70 494.05 89.82 492.95 87.59 493.08 87.31 493.36 86.50 493.48ZM87.50 494.21 87.39 494.12 85.39 494.39 85.12 494.37 84.74 494.54 84.30 494.53 84.09 494.68 83.59 494.63 83.34 494.73 82.78 494.62 82.39 494.61 82.04 494.29 81.93 494.26 81.08 494.42 80.79 494.35 80.44 494.04 80.11 494.00 79.81 493.81 79.41 493.84 79.07 493.66 78.86 493.63 77.95 493.65 77.67 493.60 77.22 493.25 77.11 493.02 76.20 492.14 75.91 492.00 75.77 491.85 75.66 491.41 75.40 491.07 74.91 490.86 74.64 490.68 74.37 490.38 74.11 490.39 73.86 490.27 73.47 489.61 73.32 489.56 73.00 489.62 72.73 489.58 72.27 489.68 71.73 489.52 71.40 489.07 70.98 489.13 70.77 489.08 70.41 488.76 69.58 488.62 69.31 488.48 68.99 488.21 68.42 488.04 67.53 487.56 67.08 487.39 66.49 486.93 66.38 486.64 66.44 486.39 66.17 486.12 65.99 485.58 65.91 485.51 65.30 485.36 65.12 485.13 65.14 484.56 65.22 484.36 65.48 484.19 65.35 484.07 65.35 483.83 65.05 483.91 64.83 484.15 64.67 484.20 64.09 484.05 63.61 483.45 63.34 483.80 62.94 483.73 62.44 483.56 61.98 483.60 61.67 483.97 61.07 483.86 61.00 484.23 60.85 484.50 60.68 484.47 60.47 484.58 60.60 484.95 60.92 484.81 61.66 485.00 61.86 485.10 61.69 485.41 61.58 485.99 61.40 486.13 61.21 486.12 61.16 486.42 60.94 486.61 60.68 486.57 60.46 486.34 60.23 486.44 60.18 486.58 60.48 486.80 60.35 487.24 60.45 487.45 60.74 487.51 60.74 487.85 61.26 488.17 61.66 488.17 61.86 488.27 61.82 488.66 61.05 488.59 60.52 488.92 60.07 488.78 59.97 488.97 60.64 489.13 60.82 488.95 61.02 488.98 61.15 489.50 61.90 489.84 62.18 489.77 62.20 490.01 61.99 490.00 61.33 489.76 60.96 489.54 60.72 489.65 60.39 489.45 60.40 489.27 59.79 489.22 59.61 489.26 59.82 489.65 60.43 490.14 60.67 490.05 60.86 490.20 60.81 490.55 61.14 490.60 61.24 490.82 61.41 490.63 61.76 490.66 62.34 490.57 62.31 491.00 62.41 491.40 62.13 491.57 61.99 491.79 61.68 491.97 61.58 491.87 61.35 491.95 61.00 491.81 60.69 491.82 60.97 492.33 61.36 492.33 61.46 492.58 61.30 492.77 61.00 492.82 60.95 492.69 60.60 492.95 61.19 493.13 61.48 493.09 62.16 493.26 62.18 493.68 61.89 493.61 61.55 493.73 61.50 494.03 61.65 494.30 61.55 494.45 61.16 494.33 61.33 494.66 61.25 494.75 60.91 494.72 60.77 494.90 60.54 494.94 60.42 494.83 60.34 494.55 60.76 494.28 60.95 494.02 61.09 494.15 61.40 493.87 61.09 493.78 60.73 493.91 60.62 493.77 60.30 494.31 59.99 494.52 60.10 494.94 60.13 495.24 59.81 495.33 59.51 495.48 59.51 495.78 59.93 495.90 60.10 495.70 60.53 495.80 60.87 496.10 60.98 495.86 61.27 495.68 61.00 495.55 61.00 495.38 61.43 495.23 61.58 495.07 61.42 494.81 61.73 494.76 61.86 494.56 62.10 494.64 61.85 495.17 62.00 495.21 62.23 495.02 62.49 495.14 62.56 495.39 62.37 495.62 62.46 495.82 62.75 495.67 63.28 495.67 63.37 495.76 63.30 496.03 62.84 496.41 63.27 496.58 63.18 496.83 63.03 496.95 63.35 497.10 63.58 497.09 63.77 497.37 63.81 497.75 64.04 497.62 64.08 497.38 64.37 497.38 64.77 497.67 64.94 497.59 65.20 497.71 65.17 497.89 65.37 498.30 65.62 498.34 65.92 498.26 66.15 498.30 66.47 498.66 66.82 498.84 67.27 498.83 67.46 498.96 67.37 499.14 67.66 499.46 67.91 499.56 68.78 499.53 68.96 499.46 69.35 499.54 69.79 499.42 69.93 499.46 70.36 499.75 70.53 499.59 70.93 499.61 71.95 500.17 71.97 500.59 72.16 500.77 72.34 500.75 72.42 500.59 72.62 500.52 72.81 500.59 73.79 500.61 74.29 500.44 74.71 500.35 74.92 500.38 75.02 500.54 75.52 500.75 75.91 501.13 76.26 501.14 76.76 500.97 76.82 500.86 77.24 500.95 77.35 501.06 77.70 501.13 77.98 501.05 78.09 500.92 78.38 500.81 78.78 500.94 79.59 500.82 80.20 500.62 80.63 500.64 80.84 500.89 85.58 501.40 85.93 498.10 89.23 498.45 89.68 494.30 89.38 494.40 88.93 494.31 88.48 494.34 88.17 494.23 87.72 494.29 87.50 494.21ZM60.06 490.64 60.55 490.43 60.11 490.05 59.88 490.01 59.74 489.73 59.48 489.66 59.57 489.47 59.45 489.28 59.10 489.01 58.70 488.86 58.58 489.13 57.75 489.11 57.83 489.38 57.76 489.67 58.24 489.47 58.81 489.55 58.98 489.84 59.05 490.16 59.23 490.22 59.61 490.16 59.82 490.25 60.06 490.64ZM63.22 483.67 63.34 483.63 63.49 483.30 63.74 483.30 64.12 483.83 64.33 484.00 64.60 484.08 64.71 483.71 64.10 483.45 63.99 483.45 63.74 482.78 63.56 482.63 62.77 482.63 62.21 482.81 61.91 482.84 61.72 482.77 61.24 482.82 61.15 483.03 61.42 483.49 61.84 483.34 62.43 483.28 62.71 483.47 63.22 483.67ZM59.20 524.30 58.90 524.32 58.92 524.56 58.76 524.74 59.22 524.93 59.48 524.84 59.54 524.64 59.88 524.48 60.33 524.60 60.55 524.74 60.83 525.03 61.02 525.48 60.97 525.93 60.61 526.46 60.40 526.34 60.24 526.49 60.05 526.51 59.86 526.29 59.56 526.38 59.14 526.29 59.01 526.38 59.59 526.55 59.81 526.84 59.48 527.05 59.03 527.06 58.82 526.99 58.62 527.09 58.43 527.40 58.48 527.68 58.80 527.78 58.87 528.12 59.09 528.16 59.18 528.38 59.34 528.50 59.75 528.52 59.96 528.44 60.05 528.56 59.87 528.84 60.29 528.99 60.78 529.01 60.39 529.40 60.79 529.43 61.55 529.38 61.81 529.72 62.11 529.66 62.41 529.00 61.99 529.09 62.09 528.88 62.61 528.97 62.70 528.77 62.28 528.35 62.87 528.01 63.17 527.97 63.21 528.19 62.94 528.42 63.10 528.68 63.50 529.11 63.85 528.97 64.03 529.01 64.08 529.26 63.90 529.38 63.56 529.30 63.26 529.43 62.94 529.29 62.70 529.52 63.26 529.67 63.50 529.64 64.48 529.75 64.58 529.88 64.33 530.05 64.11 529.99 63.91 530.29 63.33 530.25 63.14 530.44 63.63 530.89 63.86 530.82 64.44 530.93 64.93 530.91 65.15 531.05 64.94 531.23 65.16 531.59 64.81 531.75 64.48 531.69 64.24 531.83 64.04 531.63 63.98 531.38 63.41 531.33 63.38 531.63 63.11 531.71 62.65 531.96 62.59 531.87 62.14 531.89 61.87 532.06 61.90 532.38 62.03 532.64 61.79 532.79 61.63 532.71 61.17 532.92 61.02 533.17 60.61 533.26 60.45 533.63 60.50 533.87 61.26 533.70 61.48 533.83 61.71 534.20 61.47 534.56 61.23 534.74 61.12 534.97 61.21 535.13 61.45 534.96 61.50 535.31 61.63 535.48 61.63 535.71 62.14 535.25 62.36 535.34 62.35 535.69 62.06 535.82 61.76 535.84 61.55 536.09 61.56 536.24 61.84 536.26 62.27 536.02 62.34 535.85 62.62 535.88 62.57 536.17 62.87 536.17 63.04 536.65 63.03 536.88 63.28 537.00 63.56 536.86 63.72 537.08 63.91 537.04 64.59 537.05 64.70 537.12 65.07 536.72 65.42 536.85 65.74 536.74 66.21 536.73 66.52 536.41 66.59 536.54 66.87 536.38 67.02 536.16 66.84 535.87 66.95 535.54 66.83 535.42 66.92 535.02 66.55 534.60 66.55 534.48 66.25 534.10 66.23 533.81 66.49 533.68 66.71 533.29 66.97 533.12 67.09 533.26 67.05 533.46 67.33 533.54 67.42 533.38 67.93 533.26 68.12 533.14 68.28 533.22 68.62 533.21 68.51 533.55 68.66 533.68 68.95 533.75 69.32 533.69 69.44 533.88 69.68 533.97 69.89 533.90 70.36 533.51 70.95 533.28 71.04 532.91 71.35 532.57 71.73 532.32 72.13 532.15 72.34 532.01 72.84 531.88 73.05 531.91 73.14 531.75 73.40 531.82 73.81 531.60 74.50 525.37 68.34 524.68 63.70 524.15 59.73 523.69 59.20 524.30ZM70.00 567.86 69.83 567.88 69.50 568.08 68.92 568.52 68.81 568.45 68.06 568.84 68.20 568.93 68.15 569.02 68.17 569.12 68.24 569.17 68.20 569.23 68.27 569.38 68.43 569.66 68.33 569.97 68.53 570.15 68.53 570.37 68.42 570.62 68.53 570.70 68.77 570.61 69.08 570.63 69.32 570.76 69.47 570.67 70.50 570.55 70.74 570.62 70.86 570.54 71.14 570.60 71.68 570.89 71.89 571.23 72.35 571.74 72.63 571.93 72.86 572.24 73.08 572.35 73.79 572.39 74.05 570.39 71.61 567.86 70.14 567.70 70.00 567.86ZM72.15 572.38 71.55 572.00 70.99 571.81 70.54 571.72 70.29 571.43 69.73 571.36 69.28 571.59 69.03 571.61 68.69 571.79 68.42 571.80 68.18 571.90 67.95 571.84 67.99 572.23 67.84 572.58 67.70 572.75 67.84 572.98 68.04 573.05 68.08 573.25 68.28 573.50 68.38 574.14 68.38 574.53 68.13 575.05 68.07 575.38 67.75 575.93 67.69 576.19 69.38 576.37 69.46 575.64 76.58 576.42 80.56 576.85 80.26 579.67 79.97 580.07 80.19 580.31 80.10 581.22 87.78 582.03 88.39 576.10 88.52 574.94 88.37 574.76 87.47 574.63 87.07 574.51 86.81 574.53 85.87 574.30 85.23 574.02 85.03 573.74 84.72 573.68 84.39 573.56 84.38 573.36 84.08 573.03 83.91 573.08 83.60 573.00 83.24 573.16 82.73 573.24 82.47 573.41 82.37 573.25 81.96 573.22 81.65 573.41 80.38 573.29 79.99 573.42 79.39 573.68 79.18 573.53 78.21 573.36 77.78 573.21 77.43 573.14 76.83 573.10 76.28 573.11 75.68 573.23 74.54 572.99 74.30 572.90 73.73 572.85 73.38 572.77 72.97 572.76 72.55 572.63 72.15 572.38ZM139.26 606.89 138.83 607.36 138.56 607.50 138.19 607.47 137.97 607.82 138.07 607.99 137.61 608.05 136.54 609.22 136.50 609.40 136.26 609.62 136.16 609.89 136.19 610.45 136.30 610.63 136.19 610.88 135.87 610.91 135.39 611.34 135.46 611.65 135.75 611.56 136.30 611.68 136.61 611.61 136.69 611.77 137.13 612.10 137.25 612.35 137.41 613.23 137.69 613.15 138.44 613.38 138.78 613.22 139.58 613.03 139.91 613.05 140.18 613.33 140.42 613.36 140.75 613.21 140.52 612.90 140.59 612.12 140.17 611.97 140.02 611.77 140.13 611.45 140.00 611.14 140.19 611.00 140.65 610.92 141.02 610.73 141.59 610.31 142.01 609.83 142.28 609.73 142.55 609.93 142.67 609.92 142.81 609.59 143.33 608.90 143.62 608.62 144.06 608.40 144.09 608.24 144.29 608.05 144.38 607.81 144.35 607.61 144.10 607.40 144.12 607.19 143.87 606.99 143.66 607.01 143.38 606.74 143.59 606.29 143.60 606.05 143.79 605.68 140.60 605.42 139.26 606.89ZM60.03 613.39 59.82 613.29 59.42 613.21 59.18 612.73 58.58 612.64 58.44 612.51 58.47 612.17 57.62 612.08 57.25 611.96 56.86 611.76 56.46 612.00 56.16 612.28 55.86 612.47 55.09 613.35 54.34 613.98 54.10 614.29 53.39 615.03 52.92 615.63 52.59 615.83 52.30 615.85 51.87 616.20 51.45 616.45 51.34 616.59 51.11 617.31 51.51 618.15 51.71 618.27 52.05 618.35 52.25 618.57 52.88 618.75 53.03 618.83 53.20 619.15 53.16 619.37 53.33 619.56 53.25 619.78 53.59 620.23 54.85 620.75 55.45 620.83 56.14 621.01 56.63 621.20 56.89 621.21 57.58 621.46 58.11 621.58 58.32 621.56 59.15 621.71 59.49 621.82 59.76 621.83 60.15 622.02 60.31 621.74 60.87 621.83 61.08 621.97 61.41 622.08 61.66 622.24 61.96 622.30 62.36 622.20 62.50 622.39 62.86 622.37 63.13 622.56 63.42 622.59 63.61 622.72 63.57 622.92 63.68 623.28 63.95 623.31 64.56 617.82 64.30 617.49 64.24 617.08 63.86 616.62 63.74 616.08 63.84 615.83 63.63 615.75 63.06 615.38 62.81 615.26 62.58 614.97 62.22 614.72 62.05 614.52 61.72 614.37 61.50 614.16 60.89 613.73 60.53 613.55 60.03 613.39ZM57.94 623.34 58.02 622.64 63.36 623.24 63.39 622.97 63.06 622.87 62.75 622.63 62.62 622.65 62.21 622.39 61.99 622.49 61.79 622.46 61.08 622.18 60.85 622.25 60.55 622.14 59.96 622.24 59.72 622.13 59.20 622.10 58.83 622.02 58.40 621.84 58.28 621.73 57.81 621.76 57.10 621.68 56.49 621.50 56.04 621.17 55.31 621.11 54.56 620.86 53.93 620.74 53.45 620.51 53.17 620.25 53.04 619.94 53.15 619.65 52.89 619.38 52.88 619.27 52.44 618.99 52.28 619.15 51.95 619.08 51.73 619.25 51.87 619.48 51.72 620.05 51.41 620.49 51.07 620.85 50.61 621.13 50.48 621.31 50.20 622.09 50.16 622.59 49.91 623.08 49.60 623.78 49.38 624.14 49.36 625.08 49.29 625.29 49.38 625.86 49.58 626.29 49.83 626.63 50.50 627.03 50.88 627.43 51.10 628.00 51.00 628.45 51.20 628.58 51.29 628.77 51.08 629.16 51.30 629.47 51.52 629.64 52.00 629.85 52.24 629.89 52.78 630.19 52.97 630.20 53.21 630.68 53.20 631.42 53.37 631.63 53.70 631.66 54.16 632.12 54.61 632.26 54.98 632.70 54.88 633.05 55.04 633.10 55.23 633.41 55.12 633.66 55.59 633.96 56.04 633.90 56.72 634.22 57.21 629.87 57.94 623.34ZM59.20 611.18 59.47 608.82 58.64 608.02 58.07 607.84 54.82 607.47 54.93 609.03 54.83 609.53 54.38 610.12 54.39 610.46 54.97 610.98 55.30 611.20 55.79 611.43 56.12 611.48 56.96 611.21 57.58 611.17 58.29 611.30 58.73 611.62 58.97 611.69 59.16 611.58 59.20 611.18ZM230.19 663.57 230.14 663.89 229.51 663.57 229.22 664.12 229.52 664.30 229.38 664.60 229.21 664.65 228.94 665.11 228.85 665.35 229.02 665.65 229.23 665.80 229.08 665.94 229.01 666.45 228.71 666.84 228.13 666.86 227.98 667.21 227.92 667.59 227.60 668.46 227.82 668.22 227.96 667.78 228.10 667.89 228.34 667.81 228.23 668.18 228.06 668.17 227.63 668.77 227.41 668.94 227.35 668.74 226.83 668.73 226.60 669.32 226.48 669.49 226.53 669.66 226.37 669.90 226.05 670.59 225.69 670.75 225.54 670.90 225.29 671.35 225.31 671.63 225.08 672.24 225.00 672.02 224.80 672.34 224.53 672.65 224.44 672.85 224.78 672.91 224.58 673.13 224.56 673.42 224.45 673.54 224.53 673.77 224.46 674.17 224.52 674.26 224.32 674.55 224.04 674.76 223.91 674.56 224.03 674.36 223.93 674.21 224.16 674.03 224.36 673.71 224.30 673.30 224.01 673.50 223.62 673.49 223.27 673.99 223.54 674.11 223.82 674.07 223.79 674.29 223.47 674.57 223.10 674.81 223.23 675.19 223.04 675.41 223.21 675.66 222.85 676.27 222.67 676.66 222.63 676.95 222.52 677.13 222.64 677.27 222.55 677.58 222.78 677.62 222.99 677.77 223.01 678.12 222.85 678.22 222.82 678.41 223.10 678.51 222.74 678.99 222.68 679.50 222.73 679.59 222.56 680.60 222.69 680.68 223.04 680.46 223.26 680.01 223.47 679.81 223.50 680.20 222.97 681.25 222.93 681.68 222.64 681.73 222.37 681.47 222.33 681.73 222.90 682.03 222.83 682.12 222.44 682.17 222.34 682.27 222.31 682.75 222.11 683.90 222.32 683.89 222.42 683.67 223.14 683.47 222.79 684.21 222.78 684.55 222.90 684.85 223.13 685.01 223.16 685.28 223.13 685.77 223.34 685.81 223.46 685.63 223.56 685.27 223.25 685.00 223.24 684.73 223.67 684.65 223.80 684.87 223.72 685.44 223.94 685.41 224.30 685.63 224.54 685.97 224.42 686.13 224.19 685.98 224.03 686.22 223.71 686.03 223.41 686.70 223.44 686.87 223.36 687.34 223.64 687.39 223.70 687.22 224.00 687.22 223.77 687.55 224.17 687.52 224.29 687.36 224.53 687.25 226.05 684.60 228.82 683.46 228.98 683.20 229.30 682.93 229.31 682.81 229.72 682.48 229.95 682.17 230.36 681.40 230.83 680.77 231.03 680.38 230.93 679.99 231.04 679.67 231.49 679.04 231.80 679.03 232.69 678.26 232.82 678.19 233.16 677.57 233.29 677.40 233.87 676.90 234.08 676.60 234.76 676.05 235.14 675.92 235.15 675.81 235.41 675.47 235.58 674.90 235.98 674.72 236.13 674.44 236.22 673.64 236.30 673.46 236.88 672.92 237.00 672.72 237.15 672.67 237.74 671.99 237.82 671.76 238.06 671.43 238.25 671.35 238.61 670.99 238.70 670.79 239.25 670.09 239.40 669.62 239.87 669.11 238.22 668.32 238.13 668.57 237.61 668.77 237.83 668.45 237.84 668.26 237.73 668.08 234.88 666.73 234.66 667.18 234.66 667.53 234.08 667.57 233.89 667.91 233.76 667.56 234.13 667.27 233.75 667.19 233.39 667.35 233.29 667.91 233.07 667.94 232.76 668.13 232.44 668.09 232.49 668.34 232.37 668.48 232.10 668.54 232.18 668.16 232.42 667.82 232.59 667.94 233.16 667.69 232.84 667.38 233.09 667.05 233.35 666.96 233.65 666.74 233.67 666.23 234.43 666.09 233.19 665.46 233.11 665.31 232.91 665.32 231.57 664.63 231.46 664.54 231.24 664.72 231.00 665.09 230.89 665.42 230.95 665.63 230.69 665.76 230.12 666.28 229.89 666.17 229.70 666.61 229.56 666.51 229.56 666.06 229.83 665.26 230.08 665.26 229.89 665.72 230.12 665.64 230.21 665.32 230.46 665.24 230.67 664.91 230.89 664.28 230.31 663.98 230.31 663.54 230.19 663.57ZM222.67 687.98 222.54 687.61 222.57 687.28 222.47 686.79 222.57 686.59 222.46 686.14 222.57 685.89 222.59 685.50 222.44 685.09 221.93 684.83 221.78 684.61 222.17 684.39 221.86 684.05 222.03 683.43 221.84 683.51 221.67 683.75 221.54 683.48 221.57 683.23 221.81 682.96 222.00 682.51 221.89 681.73 221.69 681.57 221.34 682.34 221.36 683.22 220.95 683.42 220.46 683.99 220.33 684.05 220.32 684.50 220.57 684.57 220.81 684.79 220.93 685.02 221.17 685.12 221.23 685.42 221.46 685.75 221.67 685.88 221.71 686.23 221.86 686.47 221.86 686.73 221.71 687.51 221.93 687.67 222.20 687.66 222.21 687.84 222.01 687.99 221.98 688.22 222.08 688.47 221.92 688.65 222.02 688.85 222.23 688.94 222.37 688.78 222.56 688.91 222.75 689.33 223.05 689.34 223.11 688.09 222.84 688.16 222.67 687.98ZM219.93 689.34 219.84 688.95 220.10 688.26 219.98 688.04 219.86 688.59 219.66 688.87 219.66 689.14 219.49 689.19 219.03 689.02 219.17 688.77 219.05 688.62 219.02 688.36 219.13 688.17 218.90 687.64 218.68 687.43 218.93 687.08 218.88 686.80 218.76 686.72 218.89 686.37 218.99 686.37 219.19 686.71 219.44 686.79 219.33 687.03 219.63 687.42 219.95 687.69 220.14 687.20 220.42 687.14 220.46 687.51 220.55 687.67 220.43 688.12 221.06 687.86 221.11 687.36 220.97 687.22 220.79 687.28 220.97 686.81 220.88 686.70 220.91 686.07 220.75 686.04 220.77 685.76 220.63 685.61 220.37 685.04 220.13 685.37 219.89 685.36 219.76 685.54 219.51 685.35 219.32 685.43 219.09 685.33 219.46 685.04 219.37 684.89 219.74 684.68 219.46 684.56 219.78 684.21 220.09 684.38 220.28 684.22 220.21 684.10 220.34 683.71 220.46 683.62 220.66 683.07 220.85 682.80 220.84 682.56 220.56 682.32 220.69 682.12 220.63 681.95 220.29 681.88 220.51 681.64 220.67 680.98 220.91 680.50 221.03 680.11 221.26 679.87 221.23 679.49 221.34 679.29 221.12 679.02 220.66 679.12 220.82 678.76 221.04 678.43 220.98 678.19 221.32 677.55 221.29 677.23 221.50 676.72 221.49 676.34 221.63 676.22 222.05 675.45 222.08 675.08 222.29 674.62 222.59 674.25 222.63 674.06 223.02 673.70 223.14 673.51 223.33 673.66 223.38 673.41 223.32 673.02 223.18 672.74 223.41 672.55 223.36 672.33 223.72 671.96 223.83 671.74 223.59 671.28 223.91 671.14 223.80 670.97 223.82 670.63 224.04 670.08 223.97 669.95 223.67 670.26 223.49 670.24 223.32 670.47 223.30 670.71 222.99 671.16 222.87 671.20 222.45 671.84 222.19 672.72 221.98 672.79 221.95 672.52 222.29 671.95 221.99 672.14 221.80 672.56 221.90 672.62 221.62 673.14 221.63 673.53 221.52 673.74 221.33 673.71 221.46 673.14 221.34 672.97 221.39 672.79 221.30 672.53 221.04 672.68 220.87 673.09 220.77 673.74 220.50 673.91 220.82 674.07 220.61 674.41 220.16 674.97 220.44 675.35 220.54 675.58 220.30 675.62 220.17 676.08 220.47 676.18 220.12 676.78 220.02 676.38 219.71 676.37 219.95 675.84 220.00 675.59 219.79 675.34 219.60 675.84 219.25 676.29 219.10 676.85 218.98 677.51 219.14 677.73 218.99 678.14 218.96 678.41 218.50 678.70 218.30 679.11 218.67 679.00 219.10 679.01 218.85 679.35 218.96 679.51 218.95 679.82 218.58 680.27 218.45 680.81 218.79 680.69 219.05 681.16 219.35 680.46 219.47 680.46 219.77 680.20 219.92 679.97 220.09 680.03 220.21 679.78 220.20 679.52 220.45 679.57 220.28 680.19 220.06 680.57 219.88 680.74 219.80 680.96 219.83 681.42 218.92 682.32 219.07 682.58 219.19 682.48 219.44 682.50 219.38 683.00 219.22 683.06 218.96 682.88 218.78 683.22 218.92 683.37 218.94 683.65 218.79 683.96 218.24 683.91 218.20 683.77 218.48 683.42 218.52 683.05 218.31 683.14 218.02 682.72 218.04 682.47 217.93 682.33 217.84 681.93 217.38 681.64 217.21 681.69 217.32 681.10 217.03 680.88 217.00 680.54 216.72 680.34 216.53 680.38 216.15 680.60 216.05 680.74 215.44 681.06 215.26 681.26 214.89 681.40 214.69 681.61 214.49 681.95 213.82 682.52 213.23 683.16 212.94 683.53 212.42 683.82 212.32 684.29 212.14 684.61 211.96 684.76 211.89 685.32 211.72 685.43 211.60 685.69 211.68 686.10 211.60 686.23 211.60 686.71 211.41 686.94 211.55 687.16 211.28 687.53 210.98 687.52 210.97 687.78 211.17 687.82 211.38 687.72 211.58 688.02 210.96 688.14 210.85 688.28 210.11 688.54 210.00 688.93 209.59 689.63 209.54 689.93 209.60 690.21 209.29 690.05 209.21 690.37 208.98 690.44 208.84 690.30 208.63 690.41 208.60 690.68 208.14 691.08 207.91 691.41 207.69 691.59 210.08 692.68 213.32 694.13 213.62 694.11 213.66 694.26 213.88 694.38 215.99 695.32 220.47 695.54 220.62 693.01 220.58 692.79 220.06 692.49 219.80 692.48 219.68 692.61 219.36 692.45 219.51 691.85 219.65 691.67 219.28 691.54 219.53 691.40 219.71 691.10 219.73 690.84 219.45 690.58 219.57 690.37 219.63 690.06 219.40 689.77 219.67 689.24 219.93 689.34ZM218.31 681.52 218.16 681.72 218.34 682.01 218.45 681.58 218.31 681.52ZM144.69 708.16 144.62 708.29 144.09 715.12 143.60 715.08 143.54 715.84 141.95 715.72 142.01 714.91 136.10 714.44 131.36 714.05 128.14 713.79 127.98 715.73 127.83 715.72 127.75 716.69 126.05 716.55 125.87 716.86 125.97 717.49 126.26 717.40 126.57 717.91 126.85 717.86 127.16 717.63 127.59 717.07 127.46 716.94 127.67 716.76 127.75 717.03 127.71 717.40 128.27 717.08 128.41 717.13 128.61 716.76 128.75 716.84 129.75 716.79 130.24 717.05 130.85 717.16 130.98 717.38 131.16 717.29 131.60 717.21 132.10 717.36 132.43 717.38 133.24 717.35 133.51 717.43 134.26 717.30 134.59 717.32 134.74 717.23 135.09 717.29 136.06 717.37 136.13 717.48 137.40 717.45 137.63 717.24 137.79 717.40 138.08 717.35 138.10 717.62 138.74 717.67 139.12 717.33 139.34 717.25 139.66 717.31 139.93 717.63 140.11 717.39 140.23 717.60 140.09 717.85 140.15 718.01 140.45 718.08 141.13 718.32 141.45 718.20 141.71 718.42 141.73 718.56 142.00 718.63 142.22 718.55 142.53 718.56 142.59 718.42 142.95 718.31 143.32 718.33 143.58 718.18 143.66 717.91 144.19 717.80 144.01 718.13 144.14 718.60 143.73 718.93 143.72 719.28 143.99 719.29 144.07 718.93 144.29 718.46 145.03 717.74 145.82 717.32 146.08 717.23 146.54 716.96 147.47 716.27 147.65 715.86 147.94 715.52 147.82 715.07 147.89 714.63 148.22 714.12 148.74 713.86 149.24 713.24 149.40 712.78 149.51 712.65 150.27 712.09 150.47 712.04 151.78 712.19 152.62 712.32 152.77 712.39 153.54 713.04 154.44 713.25 154.87 713.20 155.04 711.02 154.82 710.90 154.81 710.72 155.00 710.35 155.09 710.33 155.22 708.68 148.56 708.18 144.65 707.88 144.69 708.16ZM186.32 708.78 185.50 709.34 185.25 708.97 184.86 709.23 185.15 709.26 185.25 709.53 185.75 709.71 186.57 709.15 186.32 708.78ZM148.02 714.73 147.97 714.92 148.10 715.31 148.09 715.61 147.80 715.93 147.55 716.44 147.34 716.55 146.66 717.08 146.18 717.37 145.85 717.49 145.11 717.88 144.56 718.44 144.29 718.63 144.07 719.33 144.42 719.46 144.71 719.21 145.03 719.22 145.74 719.05 146.16 719.32 146.62 719.53 147.44 719.83 148.07 719.71 148.25 719.46 148.62 719.32 148.74 719.16 148.40 718.31 148.01 718.21 147.93 717.92 148.09 717.79 148.15 718.10 148.46 718.20 148.57 717.88 148.86 717.63 149.25 717.68 149.36 717.46 149.39 716.84 149.70 716.60 149.77 716.66 150.12 716.54 150.55 716.63 151.15 716.51 148.88 713.94 148.36 714.21 148.02 714.73ZM146.95 719.83 146.47 719.74 146.36 719.57 146.15 719.60 145.99 719.48 145.07 719.39 144.68 719.55 144.49 719.81 144.75 719.96 144.95 720.21 145.06 720.21 145.30 720.48 145.56 720.52 146.05 720.72 146.22 720.62 146.81 720.82 147.26 719.92 146.95 719.83ZM128.14 720.68 128.29 720.53 129.72 718.40 131.42 718.54 131.66 718.21 131.58 717.81 131.78 717.66 131.54 717.53 130.90 717.64 130.66 717.39 130.09 717.31 129.88 717.19 129.53 717.12 129.14 717.17 129.11 717.47 129.24 717.71 128.89 718.10 129.00 718.28 128.90 718.55 128.73 718.65 128.83 719.16 128.71 719.60 128.45 719.99 128.26 720.07 128.04 719.90 127.80 719.88 127.92 720.22 127.95 720.55 128.14 720.68ZM127.37 718.92 127.44 718.48 127.66 718.08 127.61 717.83 127.30 717.87 127.13 718.02 127.09 718.39 127.01 718.61 127.16 718.68 127.15 719.13 127.37 718.92ZM137.81 717.78 137.71 717.92 136.80 718.01 136.41 717.98 135.96 718.09 135.82 717.93 135.15 718.02 134.75 718.11 133.76 717.95 133.27 717.99 132.65 717.96 132.24 718.00 132.07 718.09 131.91 718.36 131.59 718.55 139.07 719.16 139.37 718.94 139.79 718.76 139.65 718.51 139.70 718.31 139.57 718.11 139.36 718.08 139.08 717.91 138.27 718.03 137.87 718.05 137.81 717.78ZM139.93 718.43 139.99 718.63 139.80 718.95 139.41 719.00 139.25 719.17 141.10 719.32 141.16 719.34 141.66 718.92 141.70 718.78 141.06 718.52 140.61 718.47 140.19 718.63 140.13 718.39 139.93 718.43ZM142.75 718.64 142.61 718.76 142.70 718.96 142.44 719.39 142.28 719.44 142.10 719.06 141.91 718.91 141.66 719.04 141.55 719.39 141.33 719.40 143.58 720.19 143.87 719.81 143.94 719.51 143.46 719.36 143.27 719.03 143.07 718.89 142.88 718.61 142.75 718.64Z\"},\"11\":{\"name\":\"Gaspésie - Îles-de-la-Madeleine\",\"path\":\"M701.43 762.32 705.34 784.84 709.93 811.27 698.98 831.26 691.11 837.38 679.80 856.32 679.02 865.76 656.59 868.15 645.34 869.34 618.15 855.44 603.10 831.14 583.39 798.98 560.37 800.75 536.21 818.84 520.90 824.84 517.98 819.25 508.47 814.91 497.21 814.02 496.58 814.09 495.71 814.28 494.06 814.80 493.09 815.03 492.11 815.17 491.89 815.09 491.62 814.70 491.42 814.22 491.12 813.71 490.76 813.20 490.34 812.75 490.13 812.61 489.49 812.37 488.84 812.24 488.36 812.23 486.49 812.44 485.77 812.60 485.19 812.81 484.72 813.05 484.49 813.37 484.11 814.29 483.91 814.57 483.55 814.81 480.33 816.19 479.24 816.60 479.00 816.64 478.70 816.57 478.35 816.94 477.91 817.12 477.62 817.33 476.98 817.30 476.44 817.48 476.32 817.63 476.08 817.62 475.94 817.82 475.72 817.85 475.48 817.60 475.23 817.63 474.34 818.24 473.95 818.24 473.86 818.04 473.55 818.07 472.41 817.72 472.33 817.81 471.81 817.85 471.14 818.23 470.54 818.34 469.46 818.87 469.22 819.31 469.04 819.35 468.79 819.57 468.75 820.02 468.60 820.52 468.10 820.97 468.00 821.24 468.00 821.95 467.86 822.67 468.13 822.89 468.49 822.94 468.69 823.07 468.83 823.32 468.66 823.71 468.36 823.92 467.80 823.93 467.55 823.86 466.93 823.47 466.64 823.13 465.22 822.28 465.05 822.09 464.96 821.83 464.62 821.69 464.45 821.73 464.25 822.25 464.05 822.47 463.35 822.50 463.31 822.63 462.84 822.97 461.99 822.89 461.77 823.12 461.89 823.47 461.86 823.84 461.60 824.14 461.31 824.28 461.14 824.26 460.95 824.06 460.70 823.96 460.58 824.06 460.45 824.39 460.45 824.60 460.26 824.78 459.91 824.82 459.48 825.04 459.04 825.18 458.83 825.07 458.43 824.57 458.23 824.58 457.97 824.84 457.84 824.88 457.49 824.68 457.35 824.47 457.09 824.35 456.89 824.43 456.55 824.33 456.23 824.01 455.85 824.00 455.82 824.22 455.98 824.40 455.96 824.57 455.67 824.75 455.19 824.64 454.55 824.56 454.26 824.33 454.41 824.92 454.45 825.46 454.30 825.76 454.16 825.76 454.09 825.50 453.85 825.54 453.93 825.73 453.86 825.92 453.57 826.21 453.46 826.43 453.64 826.60 453.74 826.86 453.45 827.06 453.10 827.04 452.77 826.96 452.55 826.83 452.81 826.61 452.87 826.39 452.38 826.28 452.42 826.00 452.18 825.89 452.06 825.72 451.67 825.53 451.40 825.46 451.30 825.31 451.06 825.35 450.69 825.21 450.55 824.95 450.17 824.75 449.91 824.75 449.68 824.57 449.43 824.51 449.09 824.25 449.02 824.05 448.73 824.04 448.09 823.75 448.00 823.54 447.59 823.43 447.32 823.49 446.86 823.34 446.61 823.09 446.20 823.23 445.72 823.06 445.33 822.78 445.00 822.99 444.90 822.97 444.77 822.53 444.35 822.32 444.45 822.05 444.30 821.64 444.54 821.45 444.37 821.28 444.32 820.94 444.66 820.76 444.69 820.37 444.54 820.30 444.49 820.08 444.10 820.01 444.18 819.67 444.17 819.33 444.64 819.03 444.60 818.84 444.89 818.69 444.78 818.45 444.96 818.20 444.77 818.14 444.86 817.56 444.64 817.38 444.89 817.01 444.98 816.74 445.00 816.35 444.90 816.13 444.54 815.76 444.16 815.46 444.05 815.44 443.85 815.16 443.69 815.20 443.18 814.57 442.88 814.57 442.57 814.45 442.47 814.09 442.55 813.95 442.17 813.16 442.13 812.84 441.91 812.65 441.88 812.43 452.45 807.90 453.57 810.46 453.92 811.25 454.56 812.73 456.32 816.73 459.11 815.46 460.73 814.82 462.81 813.92 462.81 813.54 463.65 813.21 464.94 812.75 466.42 812.11 467.94 811.50 470.27 810.58 470.70 810.40 468.59 808.06 469.80 806.96 470.74 807.88 472.00 809.52 469.49 805.57 466.88 801.44 473.31 798.45 475.48 797.49 484.93 793.40 488.62 791.80 490.76 790.88 491.75 790.45 497.11 788.14 500.08 786.84 503.58 785.27 502.35 784.10 502.21 783.92 501.34 783.12 498.14 780.28 495.13 777.56 492.47 775.15 490.87 773.74 488.74 771.78 487.38 770.58 485.37 768.72 481.83 765.47 481.22 764.92 475.33 768.19 474.94 767.85 475.13 767.45 475.57 767.26 475.61 767.09 475.42 766.80 475.63 766.49 475.45 766.23 475.57 765.95 475.44 765.67 475.57 765.50 475.35 765.27 475.45 764.74 475.34 764.63 475.39 764.31 475.16 764.08 475.25 763.98 475.22 763.71 475.29 763.45 475.03 763.18 475.04 762.88 474.01 761.96 470.52 763.88 469.02 762.52 458.54 753.16 462.14 749.68 470.22 741.93 475.85 736.01 477.64 734.25 478.86 733.12 479.85 732.29 481.47 731.01 482.06 730.59 484.49 728.96 485.30 728.44 486.95 727.50 488.13 726.87 489.80 726.08 490.98 725.57 492.95 724.80 495.72 723.89 498.48 723.12 500.46 722.72 502.70 722.35 504.88 722.07 507.06 721.86 509.08 721.74 511.03 721.68 513.17 721.69 515.08 721.76 517.00 721.87 519.95 722.16 522.24 722.45 525.12 722.89 527.78 723.40 530.79 724.07 532.80 724.59 535.17 725.25 537.52 725.97 539.71 726.74 542.13 727.66 544.39 728.58 547.02 729.75 549.08 730.71 551.12 731.74 553.20 732.82 555.89 734.27 558.64 735.85 561.56 737.56 563.66 738.92 565.24 739.96 569.29 743.31 569.62 743.57 570.98 744.78 571.58 745.27 573.46 746.94 575.38 748.55 577.49 750.27 579.66 752.01 581.21 753.23 581.74 753.60 583.75 755.11 584.89 756.00 586.96 757.53 589.82 759.48 592.26 761.07 595.00 762.73 597.76 764.32 600.43 765.75 601.74 766.44 603.57 767.32 606.59 768.75 608.77 769.71 609.91 770.23 610.09 772.15 619.13 771.31 628.16 770.44 637.19 769.55 646.22 768.62 655.25 767.67 664.27 766.68 673.29 765.67 682.31 764.63 691.32 763.56 701.43 762.32Z\"},\"12\":{\"name\":\"Chaudière-Appalaches\",\"path\":\"M370.30 871.33 356.38 891.71 354.13 906.99 353.69 907.26 353.37 907.38 352.66 907.36 352.66 907.55 352.44 907.83 352.42 908.06 352.00 908.56 351.41 909.05 351.44 909.43 351.36 909.57 351.05 909.58 350.89 909.97 350.62 910.15 350.11 910.05 349.95 910.23 349.79 910.12 349.62 910.19 349.01 910.74 348.83 911.15 348.34 911.75 348.45 912.06 348.40 912.30 348.56 912.61 348.44 912.83 348.46 913.36 348.04 913.68 347.47 913.86 347.43 914.21 347.15 914.51 347.12 914.85 346.82 915.17 346.59 915.90 346.71 916.18 346.56 916.33 346.37 917.19 346.25 917.25 346.01 917.87 345.83 918.03 345.96 918.21 345.75 918.43 345.71 918.63 345.46 918.90 345.31 919.18 345.13 919.31 345.21 919.66 345.39 919.70 345.52 920.01 345.70 920.24 345.94 920.38 346.18 920.61 346.20 920.78 346.76 921.29 346.89 921.53 347.12 921.55 347.23 921.87 347.14 921.96 347.11 922.32 346.98 922.76 346.72 923.25 346.54 923.83 346.64 923.92 346.62 924.32 346.26 924.31 345.84 924.21 345.43 924.44 345.22 924.62 345.15 925.02 344.81 925.22 344.74 925.39 344.73 925.95 344.41 926.26 344.56 926.45 345.12 926.49 345.42 926.37 345.65 926.72 345.60 926.94 345.23 927.26 345.04 927.56 344.92 927.57 344.74 928.06 344.76 928.29 344.29 928.58 344.24 928.88 344.41 928.98 344.58 929.27 344.60 929.59 344.72 929.88 345.04 929.97 345.33 930.22 345.01 930.56 344.82 930.58 344.54 930.75 344.35 931.23 344.32 931.88 344.62 931.72 344.86 931.84 345.31 931.75 345.52 931.78 345.77 931.66 345.78 931.92 346.13 931.85 346.27 932.00 346.38 932.30 346.60 932.25 346.81 932.59 347.00 932.74 347.11 933.11 346.58 933.51 346.47 933.71 346.20 933.98 346.34 934.25 346.35 934.77 346.57 934.89 346.55 935.16 346.33 935.33 346.10 935.65 346.36 935.77 346.24 935.94 345.92 936.14 345.78 936.40 344.90 937.22 344.64 937.33 344.48 937.54 344.02 937.71 343.67 937.75 343.52 937.85 343.17 937.89 342.50 938.81 342.15 938.78 342.12 939.05 341.40 939.72 341.40 939.96 341.11 940.25 341.02 940.54 341.08 940.82 340.88 940.97 340.61 940.88 340.41 940.97 340.11 940.37 338.19 941.35 337.12 939.28 333.50 941.14 332.03 941.86 331.39 940.55 331.17 940.54 331.24 940.79 331.02 941.32 330.84 941.58 329.58 941.62 328.22 941.64 325.60 941.65 321.92 941.68 321.85 938.30 321.84 935.81 321.95 935.63 320.74 934.78 319.94 934.24 319.41 934.74 319.18 935.01 318.02 934.17 317.83 934.38 315.82 932.91 315.38 933.52 313.08 931.85 311.77 933.63 312.00 934.03 312.15 934.54 312.05 935.61 312.12 935.95 312.29 936.35 312.80 937.18 312.06 938.10 312.26 938.25 311.86 938.74 311.11 939.62 310.48 939.01 309.19 937.91 308.54 938.68 307.95 938.18 307.47 938.77 305.42 937.00 304.64 936.37 304.51 936.79 304.49 937.04 304.69 937.22 304.89 937.54 305.01 938.17 305.01 938.51 304.85 939.11 304.92 939.57 304.79 940.04 304.48 940.58 304.07 941.09 303.62 941.52 303.17 941.77 303.01 941.73 302.84 942.02 302.24 941.38 300.25 939.35 300.07 939.07 300.30 937.79 300.54 936.31 298.92 935.09 298.79 935.25 296.92 933.83 296.49 934.37 295.05 933.30 291.82 930.94 293.16 929.18 293.97 928.08 295.43 926.15 295.87 925.55 297.83 922.93 298.75 921.74 297.84 921.07 298.26 920.48 298.02 920.31 298.92 919.12 299.83 917.96 299.65 917.82 299.75 917.56 300.48 916.62 301.28 917.24 301.70 916.67 302.28 917.09 304.13 914.67 302.84 913.67 301.37 912.52 300.60 911.94 299.86 911.36 299.01 910.72 300.06 909.77 299.59 909.19 299.06 908.63 300.19 907.59 298.24 905.44 296.90 906.55 295.95 905.53 295.00 904.43 293.00 906.14 291.24 907.53 289.49 909.12 288.62 908.19 288.19 907.69 285.23 904.49 283.19 902.26 281.63 900.59 280.20 899.04 280.14 899.09 279.59 898.51 279.44 898.48 279.32 898.23 278.63 897.52 279.03 897.46 279.69 897.25 279.99 897.01 280.72 896.12 281.45 895.36 281.84 895.04 282.43 894.68 283.32 894.31 283.54 894.19 284.02 893.71 284.57 892.87 284.89 892.44 285.24 892.09 285.72 891.82 286.09 891.75 286.67 891.79 287.23 892.07 288.42 893.07 288.74 893.30 289.14 893.48 289.45 893.56 289.89 893.59 292.12 893.54 292.57 893.49 293.16 893.36 293.58 893.20 294.21 892.88 295.23 892.20 295.66 892.00 296.07 891.91 296.81 891.84 297.33 891.68 297.75 891.43 298.22 891.21 299.47 890.73 300.16 890.50 300.98 890.28 302.02 890.08 302.79 890.03 303.43 889.94 304.94 889.62 305.28 889.48 305.62 889.18 306.21 888.84 306.93 888.66 307.91 888.50 308.36 888.32 308.81 888.00 309.22 887.63 309.61 887.37 309.98 887.07 310.48 886.53 310.85 886.05 311.10 885.65 311.28 885.25 311.41 884.71 311.60 884.26 311.34 883.98 311.87 883.63 312.18 883.31 312.71 883.32 313.31 883.55 313.81 883.61 314.58 883.48 315.26 883.55 315.76 883.55 317.22 883.27 318.32 883.21 318.79 883.08 319.40 882.69 319.97 882.15 320.37 881.68 320.92 881.18 321.23 881.00 321.83 880.78 322.63 880.27 323.42 879.86 324.31 879.44 324.64 879.23 325.28 878.71 326.80 877.38 328.16 876.24 329.41 875.23 329.76 874.89 329.98 874.55 330.12 874.14 330.46 872.65 330.67 871.94 330.84 871.57 331.08 871.22 331.46 870.81 331.67 870.65 333.05 869.70 333.90 869.04 334.37 868.56 335.98 866.73 336.67 865.92 337.25 865.14 337.59 864.55 338.14 863.09 338.39 862.52 338.66 861.99 338.98 861.48 339.30 861.08 340.01 860.33 340.51 859.87 340.99 859.49 341.58 859.06 342.21 858.68 342.82 858.35 343.84 857.88 344.24 857.67 345.08 857.10 345.53 856.69 348.93 852.44 352.78 856.43 353.33 856.99 356.15 859.76 357.28 859.04 358.80 860.53 360.77 862.43 361.94 863.56 363.48 865.03 365.54 866.92 367.85 869.08 370.30 871.33Z\"},\"13\":{\"name\":\"Laval\",\"path\":\"M220.97 943.29 220.78 943.58 220.64 943.97 220.26 944.37 219.72 944.62 219.34 944.95 218.50 945.44 217.86 945.88 217.63 945.96 217.15 946.38 216.67 946.90 216.34 947.50 216.26 947.81 216.03 948.38 215.85 948.61 215.47 949.26 215.13 949.72 215.10 950.18 214.72 950.80 214.47 951.03 213.87 951.14 213.45 951.40 213.31 951.57 212.94 951.70 212.60 951.99 212.15 952.23 211.88 952.64 211.61 952.69 211.34 952.98 211.15 953.06 210.04 952.96 209.91 952.82 209.45 952.63 209.08 952.72 208.70 952.54 208.15 952.52 207.90 952.84 207.67 952.69 207.43 952.42 206.85 952.35 206.67 952.25 206.40 952.25 206.18 952.04 206.48 951.84 206.80 951.48 206.62 950.77 206.78 950.17 207.25 950.07 207.54 949.88 207.68 949.65 208.11 949.33 208.47 949.22 208.82 948.77 208.87 948.33 209.08 948.18 209.13 947.70 209.37 947.70 209.76 947.53 209.95 947.57 210.33 947.30 210.62 946.84 210.60 946.57 211.02 946.19 211.11 945.86 211.93 945.05 212.17 944.78 212.21 944.57 212.36 944.49 212.67 944.30 212.79 944.07 213.07 943.88 213.41 943.81 213.69 943.93 213.90 943.89 214.25 943.68 214.67 943.24 214.90 943.21 215.37 943.27 215.79 943.42 216.04 943.60 216.33 943.49 216.86 943.56 217.02 943.42 217.46 943.39 217.91 943.63 218.15 943.61 218.82 943.36 219.66 943.10 220.26 943.22 220.59 943.16 220.97 943.29Z\"},\"14\":{\"name\":\"Lanaudière\",\"path\":\"M242.22 921.48 241.75 921.37 241.25 921.43 240.85 921.58 240.43 921.63 240.23 921.72 239.89 922.11 239.39 922.90 239.16 923.33 238.96 923.56 238.48 923.96 238.18 924.12 237.61 924.31 236.94 924.48 236.25 924.56 235.84 924.82 235.59 925.19 235.26 925.93 234.84 927.31 234.55 928.16 234.23 928.86 233.57 929.79 233.25 930.55 232.84 931.16 232.55 931.72 232.39 932.15 232.28 932.81 232.18 933.07 231.79 933.73 231.11 934.61 230.93 935.02 230.86 935.39 230.67 935.81 230.22 936.39 229.57 936.96 228.93 937.73 228.69 937.88 228.23 938.06 227.76 938.48 227.57 938.51 227.25 938.71 227.03 938.75 226.62 938.50 226.47 938.53 225.10 940.41 225.03 940.55 224.93 941.20 224.06 942.30 223.43 942.97 222.84 943.25 222.82 942.85 222.39 943.08 222.14 942.96 221.88 942.97 221.13 943.19 220.97 943.29 220.59 943.16 220.26 943.22 219.66 943.10 218.82 943.36 218.15 943.61 217.91 943.63 217.46 943.39 217.02 943.42 216.86 943.56 216.33 943.49 216.04 943.60 215.79 943.42 215.37 943.27 214.90 943.21 214.67 943.24 214.25 943.68 213.90 943.89 213.69 943.93 213.41 943.81 213.07 943.88 212.79 944.07 212.67 944.30 212.36 944.49 211.95 943.76 211.87 943.84 211.58 943.51 211.37 943.72 211.18 943.64 210.93 943.78 208.69 941.44 209.04 941.40 209.58 941.54 210.35 941.61 211.26 941.97 211.74 942.02 212.08 941.78 212.00 941.21 212.52 941.00 212.36 939.99 213.18 939.82 209.71 936.19 210.38 936.01 208.76 934.22 207.75 933.14 206.99 932.37 207.70 932.21 207.25 931.72 205.69 930.12 205.24 929.60 205.88 929.01 205.19 928.47 205.40 928.29 204.42 927.18 204.47 927.14 203.44 926.02 203.42 925.97 204.13 925.39 204.39 925.13 203.43 924.04 205.22 922.38 204.75 921.80 203.70 920.61 203.06 921.13 202.80 921.38 202.33 920.83 201.83 920.36 200.92 919.29 202.70 917.66 200.76 915.50 198.53 913.13 197.30 911.79 196.54 912.51 194.51 914.25 194.29 914.47 193.94 914.47 191.98 912.26 188.73 908.64 189.59 907.85 191.88 905.80 189.69 903.32 188.07 901.54 186.76 900.01 188.01 898.86 190.61 896.39 191.10 895.96 192.12 895.09 191.35 894.29 190.87 893.72 189.63 892.13 188.53 890.96 188.35 891.12 188.30 891.61 188.05 891.68 187.64 891.47 187.15 891.64 186.77 892.28 186.53 892.50 186.34 892.20 186.44 891.77 186.49 891.02 186.58 890.65 186.61 890.02 186.28 889.75 186.18 889.46 186.35 889.11 186.51 888.97 186.23 888.40 186.20 888.02 186.09 887.66 186.15 887.49 186.54 887.33 186.78 886.66 186.64 886.42 186.66 886.24 187.09 885.96 187.20 885.73 186.79 885.49 186.96 885.14 187.25 885.04 187.27 884.76 186.95 884.62 186.89 884.14 186.96 883.65 186.90 883.23 187.18 883.25 187.54 882.80 187.50 882.48 187.61 882.12 187.67 881.68 188.05 881.66 188.04 880.99 187.94 880.56 187.99 880.31 187.95 879.97 188.01 879.59 187.90 879.21 187.73 878.95 187.84 878.15 187.79 877.84 187.82 877.38 188.08 877.09 188.17 877.46 188.40 877.54 188.53 877.29 188.70 877.20 188.99 876.76 188.91 876.54 189.71 875.95 190.05 875.91 188.70 874.40 184.85 870.07 185.97 869.11 186.67 868.54 187.63 867.80 188.42 867.23 189.87 865.95 191.15 864.77 189.36 862.75 190.61 861.62 188.76 857.83 182.67 856.96 182.68 856.66 182.59 856.40 183.01 855.93 183.33 856.01 183.44 856.20 183.61 856.24 183.80 856.08 184.06 856.11 184.26 855.52 184.20 855.34 184.44 854.90 184.67 854.16 185.14 854.09 185.34 853.83 185.29 853.62 185.34 853.22 185.32 852.86 185.53 852.82 185.53 853.25 185.80 853.25 185.93 852.93 186.16 852.57 186.44 852.02 186.67 851.96 186.77 852.09 187.06 851.43 187.15 851.43 187.55 850.49 187.73 850.27 187.80 849.56 188.19 848.45 188.35 848.24 188.45 847.84 189.15 846.81 189.38 846.78 190.08 846.07 190.19 845.85 190.72 845.25 190.92 844.83 191.17 844.66 191.35 844.28 191.20 844.19 191.27 843.81 191.65 843.28 191.72 843.08 192.02 842.64 191.99 842.52 191.51 842.42 191.32 842.30 191.02 842.52 190.89 842.75 190.35 842.35 190.04 842.46 189.91 842.25 189.54 842.13 188.96 842.17 189.03 842.45 188.78 842.65 188.41 842.33 188.12 842.18 187.82 842.11 187.70 841.78 187.37 841.52 187.24 841.30 187.37 841.04 187.13 840.57 186.89 840.41 186.62 840.40 186.34 840.18 186.31 839.91 186.18 839.72 185.82 839.44 185.60 838.93 185.23 838.37 184.92 837.71 184.79 837.53 184.50 836.78 184.03 836.20 183.95 836.02 183.40 835.63 182.74 835.23 182.67 834.87 182.34 835.00 179.23 831.49 177.58 829.54 175.74 827.50 189.67 828.34 190.65 829.46 191.31 830.20 193.67 832.86 200.84 840.88 204.80 845.27 207.87 848.64 209.06 849.97 208.85 850.22 209.00 850.45 208.63 850.53 208.65 850.69 208.47 850.87 208.37 851.17 208.20 851.36 208.02 851.38 207.75 851.79 207.60 851.78 207.38 852.32 207.59 852.67 207.48 852.89 207.55 853.07 207.41 853.27 207.48 853.40 207.21 853.83 207.07 853.83 206.50 857.42 205.81 861.34 207.94 863.71 209.86 865.82 210.00 865.88 212.28 863.14 213.89 865.43 215.72 867.94 215.77 868.19 219.45 875.14 219.32 875.17 218.76 875.67 218.80 877.42 218.87 877.72 218.66 877.78 218.58 878.14 218.43 878.18 218.27 878.40 218.27 878.70 218.48 879.06 219.23 879.26 219.46 879.26 219.96 879.15 220.16 879.29 220.29 879.58 220.73 879.60 220.83 879.10 220.95 878.85 221.22 878.79 221.53 878.85 221.82 879.01 222.07 878.98 222.14 878.85 222.12 878.54 222.45 878.32 222.71 878.53 222.66 878.72 223.02 879.19 223.23 879.30 223.70 879.35 223.64 879.13 223.75 878.88 223.72 878.57 224.10 878.01 224.25 877.88 224.31 877.65 224.90 877.49 224.95 877.31 224.86 877.03 225.07 876.85 225.47 877.13 225.68 877.20 226.38 877.11 226.63 877.36 226.73 877.55 227.02 877.82 227.66 878.04 227.82 878.29 226.91 880.70 227.07 881.50 226.19 883.81 226.49 884.92 226.36 885.75 225.62 888.00 226.46 890.28 226.33 891.23 226.14 893.36 226.13 894.24 227.79 894.17 229.36 893.28 230.28 894.14 231.13 895.69 231.28 896.72 231.59 897.30 232.14 897.95 230.16 899.76 231.63 901.39 233.61 903.54 234.17 904.09 236.17 906.37 235.88 906.61 236.08 906.83 235.62 907.27 235.37 907.02 234.73 907.62 235.16 908.12 234.70 908.55 235.70 909.61 235.46 909.69 235.36 909.59 234.92 909.70 234.64 909.52 234.52 909.64 234.28 909.46 234.09 909.54 233.71 909.88 234.90 911.18 234.06 911.98 234.53 912.49 235.93 913.90 236.88 914.90 238.37 916.42 239.76 917.98 240.14 918.46 240.63 918.96 241.31 918.79 241.75 918.54 242.06 918.55 242.32 918.68 242.64 918.46 242.90 918.43 243.12 918.52 244.44 919.41 243.94 920.16 243.48 921.13 243.26 921.39 242.92 921.58 242.60 921.59 242.22 921.48Z\"},\"15\":{\"name\":\"Laurentides\",\"path\":\"M175.74 827.50 177.58 829.54 179.23 831.49 182.34 835.00 182.67 834.87 182.74 835.23 183.40 835.63 183.95 836.02 184.03 836.20 184.50 836.78 184.79 837.53 184.92 837.71 185.23 838.37 185.60 838.93 185.82 839.44 186.18 839.72 186.31 839.91 186.34 840.18 186.62 840.40 186.89 840.41 187.13 840.57 187.37 841.04 187.24 841.30 187.37 841.52 187.70 841.78 187.82 842.11 188.12 842.18 188.41 842.33 188.78 842.65 189.03 842.45 188.96 842.17 189.54 842.13 189.91 842.25 190.04 842.46 190.35 842.35 190.89 842.75 191.02 842.52 191.32 842.30 191.51 842.42 191.99 842.52 192.02 842.64 191.72 843.08 191.65 843.28 191.27 843.81 191.20 844.19 191.35 844.28 191.17 844.66 190.92 844.83 190.72 845.25 190.19 845.85 190.08 846.07 189.38 846.78 189.15 846.81 188.45 847.84 188.35 848.24 188.19 848.45 187.80 849.56 187.73 850.27 187.55 850.49 187.15 851.43 187.06 851.43 186.77 852.09 186.67 851.96 186.44 852.02 186.16 852.57 185.93 852.93 185.80 853.25 185.53 853.25 185.53 852.82 185.32 852.86 185.34 853.22 185.29 853.62 185.34 853.83 185.14 854.09 184.67 854.16 184.44 854.90 184.20 855.34 184.26 855.52 184.06 856.11 183.80 856.08 183.61 856.24 183.44 856.20 183.33 856.01 183.01 855.93 182.59 856.40 182.68 856.66 182.67 856.96 188.76 857.83 190.61 861.62 189.36 862.75 191.15 864.77 189.87 865.95 188.42 867.23 187.63 867.80 186.67 868.54 185.97 869.11 184.85 870.07 188.70 874.40 190.05 875.91 189.71 875.95 188.91 876.54 188.99 876.76 188.70 877.20 188.53 877.29 188.40 877.54 188.17 877.46 188.08 877.09 187.82 877.38 187.79 877.84 187.84 878.15 187.73 878.95 187.90 879.21 188.01 879.59 187.95 879.97 187.99 880.31 187.94 880.56 188.04 880.99 188.05 881.66 187.67 881.68 187.61 882.12 187.50 882.48 187.54 882.80 187.18 883.25 186.90 883.23 186.96 883.65 186.89 884.14 186.95 884.62 187.27 884.76 187.25 885.04 186.96 885.14 186.79 885.49 187.20 885.73 187.09 885.96 186.66 886.24 186.64 886.42 186.78 886.66 186.54 887.33 186.15 887.49 186.09 887.66 186.20 888.02 186.23 888.40 186.51 888.97 186.35 889.11 186.18 889.46 186.28 889.75 186.61 890.02 186.58 890.65 186.49 891.02 186.44 891.77 186.34 892.20 186.53 892.50 186.77 892.28 187.15 891.64 187.64 891.47 188.05 891.68 188.30 891.61 188.35 891.12 188.53 890.96 189.63 892.13 190.87 893.72 191.35 894.29 192.12 895.09 191.10 895.96 190.61 896.39 188.01 898.86 186.76 900.01 188.07 901.54 189.69 903.32 191.88 905.80 189.59 907.85 188.73 908.64 191.98 912.26 193.94 914.47 194.29 914.47 194.51 914.25 196.54 912.51 197.30 911.79 198.53 913.13 200.76 915.50 202.70 917.66 200.92 919.29 201.83 920.36 202.33 920.83 202.80 921.38 203.06 921.13 203.70 920.61 204.75 921.80 205.22 922.38 203.43 924.04 204.39 925.13 204.13 925.39 203.42 925.97 203.44 926.02 204.47 927.14 204.42 927.18 205.40 928.29 205.19 928.47 205.88 929.01 205.24 929.60 205.69 930.12 207.25 931.72 207.70 932.21 206.99 932.37 207.75 933.14 208.76 934.22 210.38 936.01 209.71 936.19 213.18 939.82 212.36 939.99 212.52 941.00 212.00 941.21 212.08 941.78 211.74 942.02 211.26 941.97 210.35 941.61 209.58 941.54 209.04 941.40 208.69 941.44 210.93 943.78 211.18 943.64 211.37 943.72 211.58 943.51 211.87 943.84 211.95 943.76 212.36 944.49 212.21 944.57 212.17 944.78 211.93 945.05 211.11 945.86 211.02 946.19 210.60 946.57 210.62 946.84 210.33 947.30 209.95 947.57 209.76 947.53 209.37 947.70 209.13 947.70 209.08 948.18 208.87 948.33 208.82 948.77 208.47 949.22 208.11 949.33 207.68 949.65 207.54 949.88 207.25 950.07 206.78 950.17 206.62 950.77 206.80 951.48 206.48 951.84 206.18 952.04 205.62 952.26 205.25 952.64 204.70 952.95 203.86 953.96 203.36 954.76 202.86 955.23 202.12 955.57 201.65 955.76 200.82 956.05 200.43 956.09 200.07 956.04 199.24 955.68 198.53 955.67 198.18 955.54 197.37 954.99 197.03 954.82 196.50 954.46 195.99 953.89 195.84 953.79 195.20 953.53 194.39 953.02 193.96 952.80 193.25 952.64 192.48 952.57 191.82 952.47 191.30 952.36 190.92 952.33 190.47 952.38 189.97 952.33 189.61 952.21 189.32 952.04 189.08 951.77 188.79 950.79 188.55 949.84 188.17 949.34 187.94 949.10 187.62 948.93 187.40 948.81 186.39 948.46 185.56 948.13 184.78 947.58 184.35 947.17 184.07 946.99 183.53 946.95 183.15 947.12 182.42 947.15 181.89 947.04 181.57 946.92 180.73 946.26 180.31 945.96 179.78 945.74 178.81 945.16 178.41 944.66 178.18 944.48 177.67 944.30 177.38 944.30 176.92 944.43 176.10 944.56 175.57 944.57 174.98 944.43 173.71 944.20 172.48 943.93 171.48 943.89 172.03 941.99 173.16 937.86 173.31 937.27 173.94 935.43 174.73 933.30 174.99 932.35 175.33 932.37 175.60 931.28 175.89 930.43 176.00 929.51 176.21 928.07 176.43 927.19 176.79 925.90 174.33 925.70 174.25 927.18 172.83 927.12 172.89 926.36 172.63 926.37 172.59 925.57 171.72 925.51 171.84 923.88 171.60 923.86 171.64 923.11 170.87 923.06 170.92 922.42 171.00 920.66 169.58 920.52 167.92 920.41 168.07 918.01 166.63 917.93 165.01 917.88 164.74 917.93 162.34 917.76 162.58 916.20 162.94 914.41 163.13 912.89 163.31 911.67 161.70 911.57 161.63 913.23 160.83 913.17 160.75 914.51 160.03 914.46 159.94 916.01 159.14 915.95 159.05 917.53 157.75 917.45 157.63 917.73 156.18 917.63 150.21 917.24 149.89 921.68 149.73 924.05 146.13 923.82 143.25 923.68 142.42 923.62 142.51 922.36 141.73 922.31 141.68 922.96 140.08 922.84 140.07 923.32 139.90 923.50 137.78 923.36 137.16 923.30 136.96 923.14 136.80 923.14 136.63 923.44 136.17 923.88 135.58 924.13 135.33 923.76 135.36 923.49 135.60 923.52 135.76 923.17 135.44 923.18 135.76 922.76 135.55 922.59 135.84 922.37 135.99 922.38 136.77 921.79 137.04 921.48 137.63 920.96 138.03 920.80 138.10 920.89 138.53 920.72 138.70 920.55 138.34 920.48 137.27 920.39 136.39 920.36 136.48 919.30 136.48 918.17 136.60 916.41 136.62 915.33 136.68 914.61 136.83 912.08 136.00 912.02 135.82 912.20 135.67 911.98 135.64 911.76 135.76 911.61 135.66 911.47 135.44 911.42 135.33 910.89 135.39 910.06 135.61 909.91 135.70 909.59 135.44 909.37 135.34 909.16 135.47 908.63 135.96 908.10 136.14 907.37 136.39 906.87 136.49 906.50 136.66 906.34 136.70 905.90 136.55 905.63 136.04 905.12 135.89 905.08 135.62 904.71 137.00 904.76 137.98 904.77 139.71 904.86 139.75 904.44 139.96 901.20 140.11 899.28 140.25 898.15 140.27 897.78 138.79 897.70 138.89 896.10 139.13 892.25 139.19 891.48 139.20 890.65 139.26 889.17 139.36 887.44 139.43 886.56 139.47 885.35 139.57 885.09 139.83 882.72 139.97 880.99 140.38 875.47 137.98 875.29 137.84 875.57 137.85 875.82 137.55 876.19 137.22 876.36 136.56 876.51 136.23 876.77 136.06 876.83 135.84 876.74 135.58 876.52 135.43 876.62 135.05 876.70 134.64 876.51 134.49 876.17 134.31 875.43 134.18 875.14 133.97 874.88 133.40 874.32 132.91 873.76 132.83 873.57 132.54 873.39 132.43 873.24 132.07 872.96 131.48 872.72 131.29 872.42 130.63 872.44 130.44 872.25 130.36 872.02 130.14 871.89 129.69 872.16 129.38 871.98 129.07 871.39 128.73 871.49 128.23 871.16 128.05 870.89 127.71 870.87 127.50 870.55 127.32 870.74 127.14 870.72 127.00 870.44 126.79 870.26 126.44 870.22 126.41 869.86 126.32 869.75 126.24 869.12 126.24 868.65 126.35 868.45 126.29 867.94 126.43 867.70 126.44 867.45 126.25 867.18 126.28 866.99 126.59 866.86 126.67 866.69 126.30 866.14 126.36 865.80 126.06 865.59 126.17 865.23 126.37 865.22 126.80 864.80 127.20 864.80 127.36 864.60 127.86 864.31 127.74 864.14 127.89 863.98 127.91 863.38 128.11 863.25 128.09 862.39 128.20 861.86 128.29 860.70 128.26 860.57 128.40 859.88 128.53 859.52 128.51 859.32 128.71 858.88 128.69 858.19 128.49 857.75 128.56 857.52 128.49 857.02 128.62 856.82 128.47 856.43 128.85 855.74 129.25 855.70 129.46 855.75 129.90 855.60 130.35 855.27 130.54 855.38 130.78 855.36 130.93 855.53 131.22 855.58 131.26 855.88 131.54 855.86 131.67 855.74 131.97 855.66 132.25 855.40 132.57 855.46 132.64 855.28 133.28 855.24 133.94 854.47 134.25 854.25 134.33 853.92 134.86 853.43 135.08 853.40 135.21 853.12 135.43 853.11 135.79 852.61 136.06 852.37 136.34 851.96 136.67 851.87 136.79 851.66 137.10 851.35 137.14 851.19 137.79 850.66 137.99 850.73 138.37 850.50 138.50 850.35 139.32 849.67 140.17 849.43 140.50 849.45 141.00 850.03 141.21 850.21 141.43 850.24 141.96 850.69 142.20 850.96 142.22 851.15 142.15 851.48 142.10 852.08 142.43 852.03 142.85 852.36 143.01 852.30 143.44 852.31 143.46 851.78 143.40 851.47 143.76 851.66 144.19 851.96 144.52 851.94 144.64 851.61 144.77 851.58 145.18 851.65 145.58 851.85 145.85 851.87 145.65 852.41 145.78 852.70 145.78 853.40 146.05 853.62 146.13 853.79 146.22 854.29 146.40 854.49 146.45 854.96 146.31 855.30 146.41 855.68 146.35 856.00 146.50 856.11 146.40 856.36 146.25 856.46 146.19 856.81 146.23 857.26 146.30 857.42 146.90 857.40 147.44 857.28 147.73 856.89 148.22 856.42 148.32 856.20 148.53 856.13 148.79 856.19 148.96 855.95 149.30 855.66 149.59 855.27 149.95 854.66 150.37 854.11 150.40 853.87 150.79 853.51 151.03 853.51 151.59 852.77 151.77 852.76 152.11 852.61 152.34 852.30 152.40 852.06 152.60 851.79 152.64 851.24 152.71 851.00 152.99 850.68 153.07 850.39 152.99 850.00 152.74 849.75 152.54 849.21 152.68 848.72 153.11 847.84 153.15 847.66 153.39 847.28 153.61 847.19 154.34 846.58 154.64 846.11 154.71 845.87 155.25 845.35 155.59 844.96 156.01 844.58 156.17 844.13 156.30 843.90 156.30 843.38 156.42 843.10 156.41 842.85 156.62 842.23 157.04 841.75 157.03 841.49 157.53 841.06 157.73 840.60 158.10 840.09 158.34 839.88 158.72 839.35 159.09 838.66 159.49 838.24 159.32 837.79 159.16 837.90 158.96 837.73 158.76 837.35 158.38 837.23 158.23 836.81 157.77 837.05 157.54 836.62 157.51 835.93 157.61 835.34 157.83 835.07 158.02 834.70 157.99 834.47 157.66 834.19 157.53 833.75 157.13 833.96 156.96 834.42 156.73 834.64 156.69 834.87 156.45 835.08 156.43 835.26 156.60 835.43 156.60 835.72 156.51 835.81 156.18 835.86 155.72 835.72 155.58 835.17 155.45 835.03 155.44 834.57 155.28 834.18 155.69 833.44 155.61 833.17 155.39 832.97 154.79 831.91 154.82 831.53 154.56 831.32 154.50 831.02 154.04 830.93 153.80 830.79 153.86 830.62 153.53 830.24 153.44 829.97 153.16 829.89 152.77 829.49 152.70 829.08 152.50 828.80 152.20 828.80 152.04 828.35 152.00 828.02 152.17 827.76 151.88 827.42 152.06 827.08 152.01 826.78 151.64 826.21 151.81 825.85 152.45 825.89 152.45 825.92 160.40 826.48 168.34 827.02 175.74 827.50Z\"},\"16\":{\"name\":\"Montérégie\",\"path\":\"M267.17 950.46 266.09 950.43 266.08 950.72 265.81 950.70 265.80 950.98 265.45 950.94 265.37 952.15 264.70 952.18 264.62 954.19 263.69 954.23 263.57 955.58 263.52 956.86 263.53 957.44 263.50 958.57 262.12 958.46 261.57 958.39 261.71 957.56 261.85 956.09 260.30 955.98 256.58 955.66 256.72 954.17 255.85 954.11 255.92 953.47 254.02 953.36 253.18 953.32 253.19 953.73 252.61 953.69 252.62 954.12 251.28 954.03 249.42 953.95 249.46 953.21 248.42 953.19 247.86 955.45 247.62 956.75 246.85 956.57 246.68 956.63 246.29 956.48 245.99 956.44 245.55 956.53 245.21 956.86 245.04 956.80 244.57 956.28 244.30 956.65 244.19 957.09 243.57 956.94 243.39 957.70 242.72 957.57 241.86 957.37 241.90 957.80 241.86 958.22 241.90 958.37 243.16 958.67 242.92 959.69 243.26 959.77 243.39 960.00 243.57 959.65 243.20 961.18 242.61 961.03 242.28 962.35 241.65 961.68 241.60 962.53 241.42 963.22 241.34 963.14 241.08 964.08 240.68 963.66 240.68 964.08 239.97 963.35 240.11 961.99 239.91 961.78 239.34 961.90 238.60 961.10 238.01 961.57 236.94 962.75 236.34 962.11 236.14 963.84 236.73 964.48 236.39 967.66 237.50 968.82 237.41 969.69 237.18 969.74 237.76 970.54 236.44 971.49 236.63 971.75 236.60 972.83 236.52 974.58 235.93 974.56 236.01 976.66 235.95 976.74 235.63 976.49 235.59 976.89 235.27 976.88 235.26 977.72 235.68 977.73 235.38 978.21 234.15 981.38 230.79 981.33 229.00 981.29 226.56 981.25 222.95 981.17 220.45 981.15 217.31 981.14 214.29 981.13 213.31 981.09 212.14 981.02 209.11 980.88 206.86 980.81 205.25 980.80 200.98 980.80 194.83 980.78 192.70 980.63 191.01 980.53 187.59 980.35 186.29 980.19 183.60 979.87 182.60 979.77 178.32 979.42 176.28 979.28 175.00 979.20 174.92 979.23 174.69 978.85 175.44 977.55 176.48 977.61 177.45 977.14 178.86 976.86 179.27 976.55 180.19 976.04 181.10 975.32 181.66 976.01 183.92 972.49 184.84 971.97 186.52 971.32 188.85 969.62 187.98 968.64 187.14 967.67 184.05 963.91 183.31 963.03 185.36 956.71 186.02 954.58 186.50 952.96 187.25 950.33 187.62 948.93 187.94 949.10 188.17 949.34 188.55 949.84 188.79 950.79 189.08 951.77 189.32 952.04 189.61 952.21 189.97 952.33 190.47 952.38 190.92 952.33 191.30 952.36 191.82 952.47 192.48 952.57 193.25 952.64 193.96 952.80 194.39 953.02 195.20 953.53 195.84 953.79 195.99 953.89 196.50 954.46 197.03 954.82 197.37 954.99 198.18 955.54 198.53 955.67 199.24 955.68 200.07 956.04 200.43 956.09 200.82 956.05 201.65 955.76 202.12 955.57 202.34 956.33 202.44 956.77 202.55 957.77 202.76 958.03 203.22 958.25 203.39 958.55 203.75 958.74 204.56 958.94 204.95 958.96 205.16 958.87 205.52 958.54 205.86 958.38 206.34 958.42 206.63 958.53 207.38 958.92 207.80 959.20 208.65 959.86 209.00 959.37 209.28 959.06 209.71 958.69 210.26 958.32 210.56 958.20 210.98 958.12 212.86 958.04 213.77 958.03 214.62 958.12 215.17 958.39 215.61 958.79 215.79 958.87 216.57 958.86 216.85 958.81 217.54 958.57 218.33 958.58 218.78 958.52 219.19 958.37 219.61 958.08 219.91 957.78 220.16 957.40 220.39 956.84 220.47 956.29 220.47 955.89 220.37 955.11 220.20 954.58 220.61 954.40 220.60 954.18 220.25 952.12 220.58 951.81 220.90 951.39 221.14 950.77 221.60 949.89 221.68 949.62 221.59 948.82 221.60 948.41 221.70 948.02 221.86 947.67 222.24 947.12 222.61 946.35 222.64 946.14 222.40 945.63 222.30 945.12 222.35 944.20 222.60 943.70 222.73 943.32 222.84 943.25 223.43 942.97 224.06 942.30 224.93 941.20 225.03 940.55 225.10 940.41 226.47 938.53 226.62 938.50 227.03 938.75 227.25 938.71 227.57 938.51 227.76 938.48 228.23 938.06 228.69 937.88 228.93 937.73 229.57 936.96 230.22 936.39 230.67 935.81 230.86 935.39 230.93 935.02 231.11 934.61 231.79 933.73 232.18 933.07 232.28 932.81 232.39 932.15 232.55 931.72 232.84 931.16 233.25 930.55 233.57 929.79 234.23 928.86 234.55 928.16 234.84 927.31 235.26 925.93 235.59 925.19 235.84 924.82 236.25 924.56 236.94 924.48 237.61 924.31 238.18 924.12 238.48 923.96 238.96 923.56 239.16 923.33 239.39 922.90 239.89 922.11 240.23 921.72 240.43 921.63 240.85 921.58 241.25 921.43 241.75 921.37 242.22 921.48 243.64 923.02 243.97 923.34 245.35 924.84 246.34 925.90 246.56 925.70 246.80 925.96 247.12 925.47 248.23 926.68 248.31 926.09 248.76 926.48 249.13 927.00 249.38 927.09 249.25 927.27 249.19 928.02 249.70 928.33 249.12 928.87 249.11 928.92 249.59 929.42 249.54 929.47 251.03 931.07 249.39 933.00 249.09 933.08 248.37 933.73 248.31 933.67 247.88 934.05 247.64 933.78 247.17 934.19 247.02 934.46 247.22 934.68 247.03 935.26 248.93 937.30 250.38 938.93 252.52 941.23 253.47 940.33 254.74 941.47 256.51 939.51 257.50 940.36 257.39 940.49 257.94 941.02 257.35 941.74 261.33 945.32 262.37 946.26 264.09 947.79 264.91 948.54 266.28 949.74 267.17 950.46Z\"},\"17\":{\"name\":\"Nunavik\",\"path\":\"M560.92 426.83 554.75 427.34 550.79 427.66 546.83 427.97 542.87 428.28 538.90 428.58 534.94 428.87 530.98 429.16 527.01 429.44 523.05 429.71 519.09 429.98 515.12 430.24 511.16 430.49 507.19 430.74 503.22 430.98 499.26 431.22 495.29 431.45 491.32 431.67 487.35 431.89 483.36 432.10 479.42 432.30 475.12 432.51 475.08 432.20 474.91 432.01 474.63 431.49 474.38 431.19 474.19 430.85 473.93 430.67 473.70 430.67 473.38 430.30 473.18 429.79 473.04 429.54 472.61 428.98 472.10 428.38 471.53 427.85 471.31 427.52 470.65 426.81 470.42 426.63 470.14 426.22 469.86 425.99 469.80 425.72 469.42 425.22 469.24 425.29 468.92 425.06 468.39 424.38 468.00 423.73 467.64 422.86 467.32 422.31 467.34 422.08 467.12 421.64 466.65 421.87 466.80 422.22 466.54 422.29 466.26 421.59 466.07 421.27 466.02 421.06 465.78 420.65 465.65 420.34 465.42 419.98 465.25 419.83 465.03 420.01 464.73 419.91 464.50 419.53 464.38 419.11 464.14 418.78 463.90 418.63 463.37 418.12 463.18 417.76 462.86 417.85 463.10 418.26 463.05 418.39 462.55 418.43 462.35 418.31 462.22 418.68 462.24 418.85 461.96 419.14 461.61 418.62 461.45 418.20 461.17 417.86 460.89 417.78 460.52 417.37 460.34 416.98 460.34 416.69 460.57 416.45 460.23 416.00 460.26 415.88 459.98 415.70 459.75 415.44 459.40 415.40 459.24 415.59 459.07 415.13 458.78 414.75 458.62 414.80 458.34 414.60 457.84 413.86 457.56 413.87 457.10 413.75 456.93 413.57 456.64 413.81 456.81 414.15 456.69 414.28 457.01 414.73 457.13 414.82 457.15 415.07 457.38 415.76 457.27 415.81 457.12 415.52 456.91 415.69 456.76 415.71 456.32 415.27 456.30 415.46 456.48 415.57 456.42 415.75 456.71 416.11 456.58 416.38 457.21 417.26 457.57 417.87 457.81 418.02 457.97 418.24 458.50 418.76 458.96 419.07 459.05 419.21 459.52 419.60 459.72 419.84 459.96 419.99 460.66 420.79 461.08 421.36 461.21 421.62 461.26 422.01 461.58 422.70 461.41 422.75 461.73 423.34 461.49 423.33 461.40 423.07 461.06 422.89 460.96 422.65 460.61 422.29 460.59 422.09 460.08 421.67 459.33 421.53 459.00 421.57 459.18 421.86 459.20 422.25 459.34 422.31 459.69 422.63 459.38 422.89 459.00 422.81 458.87 423.03 459.09 423.34 459.13 423.72 458.98 423.78 459.15 424.17 459.10 424.32 459.19 424.75 459.53 425.16 459.01 425.16 458.66 425.08 458.49 425.35 458.56 425.62 458.83 425.69 458.90 426.09 459.13 426.33 459.35 426.68 459.37 426.89 459.65 427.44 460.15 428.32 460.29 428.45 460.61 428.92 460.78 429.07 461.32 429.70 461.19 429.80 460.57 429.12 460.35 429.22 460.06 428.94 459.74 428.55 459.56 428.42 459.34 428.46 460.00 429.66 460.19 430.36 460.21 430.79 460.46 430.92 460.62 431.26 460.76 431.24 461.05 431.53 461.31 431.54 461.31 431.34 461.60 431.31 461.93 431.68 462.16 431.76 462.42 432.23 462.61 432.72 462.87 432.97 463.31 433.56 463.48 433.67 463.54 434.01 463.17 434.05 463.10 434.25 462.93 434.37 462.49 434.04 462.34 433.68 462.16 433.53 461.66 433.40 461.48 433.03 461.29 432.87 460.96 432.91 460.60 433.18 460.36 433.18 460.08 432.96 459.67 432.75 459.55 432.90 459.64 433.07 459.54 433.22 455.60 433.38 451.63 433.54 444.66 433.80 444.46 433.59 443.70 433.22 443.62 432.93 443.11 432.72 442.43 432.29 442.81 432.03 443.02 432.01 443.06 431.73 442.92 431.25 442.94 431.09 443.49 430.77 443.48 430.54 443.16 430.20 442.94 430.12 442.76 429.79 442.33 429.55 442.12 429.66 441.53 429.40 440.98 429.03 440.44 429.34 440.05 429.04 439.72 428.98 439.61 429.27 439.21 429.36 439.16 429.59 438.69 429.19 438.66 429.04 438.43 428.94 438.18 429.08 438.22 429.24 438.11 429.54 437.98 429.58 437.81 429.84 437.52 429.93 437.54 430.25 437.74 430.64 437.70 430.78 437.43 430.78 437.16 430.53 436.84 430.85 436.86 431.57 437.43 431.80 437.60 432.10 438.00 432.30 437.97 432.50 437.61 432.71 437.73 433.17 437.60 433.34 437.71 433.55 437.98 433.39 438.09 433.57 438.44 433.85 438.35 434.02 431.78 434.23 427.80 434.35 423.83 434.46 419.86 434.57 415.89 434.67 411.92 434.76 407.94 434.85 403.97 434.93 400.00 435.00 396.02 435.07 392.05 435.13 388.06 435.19 384.10 435.24 380.13 435.28 376.16 435.31 372.18 435.34 368.21 435.36 364.24 435.38 360.26 435.39 355.32 435.39 340.40 435.34 324.50 435.19 308.61 434.93 292.70 434.57 276.83 434.10 260.95 433.54 245.07 432.87 229.19 432.09 213.32 431.22 197.45 430.24 181.60 429.16 165.75 427.97 149.91 426.69 134.08 425.30 130.12 424.93 126.16 424.56 122.21 424.19 118.25 423.80 114.30 423.41 110.34 423.02 106.39 422.62 102.43 422.21 98.49 421.79 94.54 421.37 90.59 420.94 86.44 420.49 86.94 420.30 87.31 420.37 87.79 420.23 87.93 420.11 88.41 420.10 88.96 419.77 89.01 419.38 89.44 419.74 90.27 419.61 90.62 419.45 91.05 419.40 91.59 419.20 91.62 419.08 92.09 418.93 92.35 418.78 92.68 418.80 92.88 418.59 93.03 418.24 93.38 418.19 93.89 417.79 93.90 417.58 94.16 416.99 94.54 416.67 94.99 416.55 95.41 416.29 96.10 415.76 96.21 415.82 96.55 415.66 96.65 415.52 96.80 414.99 97.12 414.77 97.36 414.71 98.58 414.07 99.22 413.57 99.70 413.45 99.90 413.34 100.11 413.37 100.30 413.21 100.61 413.10 100.65 412.99 101.12 412.85 101.32 412.68 101.85 412.59 102.24 412.37 102.37 412.42 102.63 412.16 102.97 411.93 103.19 411.85 103.70 411.52 103.80 411.39 104.49 411.00 104.99 410.89 105.25 410.73 105.52 410.78 105.85 410.52 106.34 410.48 106.87 409.95 106.92 409.64 107.37 409.62 107.98 409.19 108.01 408.92 108.27 408.96 108.60 408.77 108.67 408.54 108.82 408.50 109.06 408.70 109.37 408.53 109.51 408.43 109.56 408.45 110.19 408.16 110.56 408.06 111.04 407.70 111.45 407.12 111.67 406.57 111.91 406.50 112.10 406.22 112.12 405.95 112.23 405.78 112.57 405.60 112.64 405.12 112.86 405.02 112.91 404.77 113.28 404.86 113.79 404.59 113.98 404.17 114.37 404.05 114.50 403.76 114.74 403.50 114.92 403.41 115.38 402.97 115.90 402.54 116.46 402.14 117.22 402.22 117.51 402.18 117.60 402.31 117.83 402.25 118.37 401.80 118.61 401.68 119.02 401.09 119.59 400.66 119.85 400.38 120.14 400.21 120.89 399.49 121.76 398.61 121.84 398.41 122.24 398.00 122.45 397.92 122.95 397.48 123.02 397.28 123.30 397.04 123.71 396.57 123.97 396.42 124.29 396.35 124.66 395.94 124.94 395.91 125.50 395.45 125.67 395.02 126.09 394.79 126.24 394.65 126.26 394.27 126.57 394.04 127.36 393.35 127.72 393.15 128.16 393.01 128.48 392.58 128.75 392.41 129.05 392.44 129.58 391.94 129.61 391.76 129.96 391.26 129.96 391.15 130.20 390.94 130.49 390.96 130.78 390.73 130.89 390.33 131.09 390.15 131.54 389.53 131.79 389.29 131.43 388.41 131.07 388.36 131.30 388.07 131.20 387.86 131.29 387.63 131.49 387.55 131.60 387.25 131.72 387.16 132.07 387.07 132.11 386.90 132.34 386.60 132.52 386.54 133.04 386.17 133.65 385.55 133.99 385.04 134.19 385.02 134.37 384.71 134.57 384.54 134.92 383.98 135.44 383.58 135.65 383.36 135.83 383.03 136.14 382.94 136.59 382.42 136.72 382.15 137.25 381.59 137.85 381.15 138.09 380.88 138.42 379.92 138.84 379.70 139.20 379.32 139.57 379.10 139.53 378.68 139.79 378.40 139.95 378.31 140.26 377.94 140.27 377.68 140.73 377.42 140.86 377.11 141.07 377.08 141.76 376.42 142.12 375.95 142.21 375.44 142.44 375.15 142.59 374.72 142.80 374.78 143.39 374.64 143.58 374.67 143.99 374.52 144.13 374.02 144.42 373.40 144.80 372.94 144.89 372.35 145.00 372.10 144.95 371.87 144.99 371.61 145.28 371.41 145.33 371.13 145.28 370.66 146.04 370.13 146.52 370.13 147.42 369.90 147.66 369.74 147.93 369.43 148.11 369.12 148.24 369.09 148.61 368.44 148.87 368.12 149.01 367.57 149.19 366.67 149.21 366.20 149.45 365.98 149.43 365.82 149.63 365.40 149.68 365.18 149.93 364.99 150.48 364.17 150.63 363.35 150.79 363.06 150.76 362.83 150.38 362.02 150.71 361.57 150.68 361.02 150.77 360.54 150.45 360.44 151.16 360.33 151.58 360.46 151.77 360.15 151.87 360.14 151.85 359.55 151.89 359.23 151.71 358.78 151.79 358.09 151.95 357.69 152.28 357.31 152.53 357.14 152.64 357.21 153.18 356.74 153.58 356.19 153.81 355.99 153.99 355.47 153.89 355.20 154.16 355.14 154.46 354.74 154.48 354.36 154.56 354.01 154.47 353.62 154.62 353.13 154.55 352.73 154.63 352.56 154.41 352.13 154.47 351.98 154.83 351.78 155.07 351.32 155.10 351.11 155.26 351.03 155.43 350.48 155.33 349.38 155.11 348.76 155.16 348.65 155.43 348.65 155.81 347.76 155.63 347.49 155.77 347.19 155.76 346.96 155.88 346.70 156.02 346.65 156.01 346.22 156.07 346.14 155.93 345.75 155.67 345.46 155.44 345.40 155.20 345.12 155.33 343.98 155.48 343.38 155.29 343.00 155.38 342.53 155.75 342.15 155.79 341.81 155.62 341.15 155.50 341.04 155.33 340.59 155.77 340.06 155.94 339.21 156.05 339.04 156.20 338.38 156.16 338.27 155.87 338.10 155.96 337.07 156.08 336.88 156.03 336.70 156.54 336.09 156.57 335.64 156.54 335.41 156.35 334.92 156.43 334.22 156.59 333.55 156.70 332.37 156.76 332.05 156.72 331.46 156.84 331.11 156.77 330.96 156.84 330.35 157.05 329.73 157.03 329.26 156.96 329.08 157.09 327.80 157.25 327.15 157.25 326.61 157.33 325.74 157.28 325.37 157.15 324.95 157.22 324.55 157.15 323.99 157.25 323.94 157.25 323.44 157.12 322.11 157.18 321.64 156.95 321.30 156.87 320.92 157.02 320.53 156.91 320.26 156.79 320.23 156.84 319.77 156.80 319.24 156.95 318.59 157.01 318.15 156.96 317.84 157.05 317.51 156.99 317.31 157.20 316.86 157.18 316.58 157.32 316.46 157.18 316.19 157.31 316.03 157.33 315.73 157.15 315.39 157.14 314.94 157.05 314.67 157.07 314.46 157.24 314.04 157.21 313.73 157.28 312.75 157.54 312.76 157.68 312.48 157.71 312.07 157.64 311.22 157.84 310.65 157.62 309.70 157.47 309.17 157.37 308.69 157.40 308.19 157.31 307.45 157.28 306.34 157.37 305.75 157.51 305.50 157.36 305.24 157.29 304.93 157.29 304.26 157.12 303.97 157.08 303.55 157.13 303.29 156.87 302.83 156.91 302.37 156.79 302.08 156.88 301.57 156.79 301.21 156.84 300.74 156.78 300.53 156.81 299.98 156.65 299.49 156.45 299.20 156.63 298.85 156.59 298.49 156.42 298.20 156.06 297.26 155.79 296.90 155.98 296.86 156.11 296.68 156.00 296.15 156.20 295.76 156.08 295.23 155.93 295.13 155.87 294.90 155.67 294.70 155.41 294.25 155.74 294.11 155.71 293.98 155.86 293.67 155.48 293.16 155.32 293.18 155.18 292.85 155.19 292.44 155.27 292.21 155.04 292.04 155.22 291.76 155.24 291.41 154.96 291.31 154.89 290.89 154.72 290.76 154.44 290.72 153.96 290.25 153.71 290.09 153.65 289.88 153.59 289.08 153.44 288.60 153.47 288.42 153.28 288.14 153.21 287.69 153.47 287.22 153.34 286.94 153.27 286.60 152.98 286.05 152.96 285.84 153.06 285.68 152.72 285.04 152.75 284.88 152.62 284.71 152.52 284.27 152.25 284.02 152.23 283.81 152.33 283.59 152.23 283.40 152.20 283.11 152.10 282.98 151.85 282.33 151.77 281.80 151.61 281.20 151.49 281.14 151.39 280.66 151.25 280.44 151.57 280.28 151.86 280.30 152.05 280.02 152.09 279.77 152.01 279.52 152.06 279.24 151.79 279.07 151.63 278.62 151.53 277.80 151.57 277.28 151.38 277.16 151.39 276.93 151.03 276.69 151.07 276.47 150.86 276.24 150.91 275.67 150.83 275.31 150.69 275.22 150.77 274.93 150.66 274.87 150.50 274.48 150.35 273.85 150.25 273.75 150.31 273.42 150.12 272.99 149.56 272.55 149.62 272.23 149.42 272.11 149.35 271.82 149.08 271.05 148.84 270.72 148.87 270.48 148.68 270.16 148.67 269.80 148.37 269.59 148.21 268.69 148.23 268.46 148.05 267.85 147.70 267.64 147.36 267.27 147.28 266.94 147.01 266.63 146.91 266.05 147.24 265.48 147.16 265.21 146.97 265.07 146.83 265.14 146.26 264.53 146.23 263.90 146.07 263.83 146.09 263.49 146.03 263.30 146.21 263.20 146.15 263.04 145.25 262.20 144.99 262.02 144.63 261.47 144.50 261.42 144.32 260.88 143.91 260.16 144.01 259.35 143.73 259.12 143.53 258.86 143.27 258.78 143.10 258.21 142.79 258.30 142.34 258.32 142.42 258.07 142.18 257.97 142.17 257.76 142.41 257.68 142.96 257.75 142.72 257.26 142.34 257.08 142.07 256.50 141.89 256.34 141.81 255.91 141.42 255.79 140.90 255.54 140.84 255.40 140.81 254.87 140.54 254.67 140.41 254.41 140.08 254.25 140.07 254.08 139.72 253.91 139.59 253.66 139.12 253.41 139.01 253.49 138.72 253.37 138.62 253.18 138.05 252.85 137.98 252.54 138.07 252.33 137.97 251.91 137.98 251.66 137.88 251.58 137.77 251.11 137.61 250.94 137.23 250.87 137.11 250.59 136.91 250.34 136.68 250.43 136.31 250.10 135.88 250.01 135.81 249.86 135.50 249.73 135.23 249.49 135.00 249.15 134.61 249.10 134.64 248.87 133.77 246.15 133.60 246.12 133.30 245.68 132.95 245.52 133.09 245.19 133.04 244.95 132.83 245.00 132.65 244.91 132.39 244.62 132.11 244.66 131.82 244.44 132.26 244.44 131.93 244.02 131.77 243.53 131.38 243.31 131.47 242.95 131.10 242.62 130.76 242.51 130.45 242.29 130.17 242.32 129.78 242.06 129.46 242.11 128.93 241.66 128.44 241.37 128.08 241.28 128.04 240.90 127.88 240.71 127.26 240.42 127.01 240.05 126.41 239.87 126.16 239.69 126.09 239.52 125.77 239.40 125.60 239.15 125.40 239.20 125.00 238.87 124.49 238.64 124.23 238.29 124.24 238.01 123.57 237.89 123.20 237.93 122.85 237.73 122.59 237.48 122.32 237.48 122.23 237.30 122.02 237.24 121.98 237.01 121.73 236.93 121.50 236.64 121.00 236.31 120.78 236.03 119.73 235.89 119.45 235.78 119.16 235.83 119.02 235.54 118.85 235.52 118.71 235.31 118.52 235.31 118.27 235.14 117.91 235.00 117.72 235.02 117.68 234.73 117.33 234.52 117.14 234.18 116.91 234.03 116.68 234.06 116.58 233.77 116.34 233.77 115.98 233.45 115.80 231.45 115.43 231.23 115.17 230.87 115.20 230.66 114.98 230.27 115.48 230.39 115.73 230.59 115.53 228.32 115.25 228.11 114.94 228.06 114.98 227.91 114.49 227.78 114.57 227.60 114.05 227.19 113.68 227.08 112.22 225.91 111.65 225.70 111.37 225.38 110.95 225.23 110.42 225.11 110.44 224.79 110.06 224.67 109.93 224.18 109.57 223.74 109.64 223.56 109.37 223.23 109.10 223.14 109.03 222.97 109.10 222.29 109.22 222.05 109.32 221.48 109.25 221.07 109.11 220.68 108.56 220.28 108.65 219.95 108.23 219.60 108.23 219.49 107.88 219.32 107.40 219.02 107.21 219.11 106.94 218.97 106.51 218.94 106.48 218.72 106.28 218.55 106.42 218.36 106.43 217.51 106.30 217.04 107.63 216.29 107.69 216.01 107.52 215.95 107.55 215.69 107.74 215.74 108.18 214.32 108.15 213.94 108.28 213.95 108.37 213.53 108.35 213.26 108.45 213.09 108.28 212.93 107.79 212.66 107.79 212.47 107.30 211.93 107.29 211.57 107.10 211.15 107.00 211.09 106.88 210.48 106.66 210.43 106.45 209.99 106.24 209.83 106.17 209.38 106.27 209.21 106.91 209.56 107.10 209.39 107.45 209.58 107.60 209.42 107.50 209.24 107.73 208.88 107.97 208.75 108.51 207.88 108.56 207.64 108.42 207.22 108.50 207.11 108.38 206.59 108.45 206.36 108.29 206.03 108.42 205.12 108.32 204.87 108.17 204.74 108.35 203.72 109.19 203.01 109.50 202.70 109.52 202.46 109.38 202.18 109.73 201.87 110.05 201.94 115.60 197.94 115.94 197.64 116.15 197.55 116.95 196.95 117.18 196.93 117.35 196.46 118.85 193.98 119.08 193.69 118.95 193.46 119.04 193.17 119.23 193.15 119.29 193.39 120.68 191.51 120.80 191.48 120.95 191.20 120.97 190.95 120.86 190.73 121.08 190.52 121.08 190.31 121.32 190.35 121.39 190.63 121.83 190.05 121.68 190.04 121.84 189.58 122.06 189.74 122.26 189.60 122.47 189.00 122.66 188.30 124.06 188.36 124.31 188.33 124.56 188.06 125.19 187.93 126.21 187.21 126.42 186.91 127.31 186.34 127.36 186.12 127.19 186.07 127.45 185.77 129.23 178.54 129.22 178.17 129.42 177.96 129.69 177.03 129.81 176.97 129.73 176.68 130.65 174.34 130.87 174.07 130.88 173.84 131.13 173.12 131.03 172.90 131.41 172.95 131.61 172.74 131.78 172.70 131.81 172.44 132.16 172.38 132.26 172.24 132.38 171.71 132.28 171.49 133.04 170.51 133.01 169.44 133.36 168.98 133.54 168.56 133.62 167.83 133.44 167.22 132.84 166.83 132.53 166.51 132.61 165.83 132.97 165.47 133.14 165.20 133.13 164.97 133.35 164.81 133.39 164.36 133.26 163.95 133.28 163.39 133.33 163.32 133.47 162.64 133.81 161.99 133.82 161.16 134.02 160.81 134.93 160.06 135.40 159.78 135.75 159.64 136.42 159.19 136.68 159.09 137.30 159.05 141.05 159.84 141.50 159.92 141.83 159.86 142.09 160.05 142.31 159.92 142.87 160.02 143.85 159.15 144.13 159.05 144.34 159.06 144.88 158.58 144.92 158.39 145.18 158.11 144.98 157.81 145.74 151.72 145.83 151.53 145.83 151.24 142.43 143.78 142.22 143.48 142.09 143.10 141.60 142.67 141.48 142.51 141.16 142.41 140.89 142.48 141.05 142.16 141.31 142.10 141.58 142.17 142.13 141.84 142.18 141.54 142.55 140.98 142.83 140.75 142.69 140.43 142.66 140.00 142.78 139.73 144.32 135.85 144.39 135.76 144.38 135.24 144.19 135.04 142.92 131.93 143.06 131.70 143.04 131.15 143.56 130.96 143.73 130.34 143.90 130.05 143.90 129.85 143.72 129.63 143.62 129.25 143.33 128.98 143.27 128.63 142.95 128.37 143.04 128.03 142.90 127.65 142.45 127.50 142.47 127.27 142.15 126.71 141.84 126.41 141.44 126.19 141.05 125.37 140.56 124.99 140.46 124.49 140.30 124.24 140.08 124.08 139.77 124.13 139.82 123.75 139.96 123.33 139.93 123.05 140.27 122.94 140.25 122.50 140.58 122.18 140.40 121.80 140.37 121.52 140.58 121.28 141.12 120.90 141.18 120.46 141.05 120.38 140.87 119.97 140.56 119.74 140.53 119.28 138.13 114.44 137.92 114.07 137.49 113.50 137.23 113.46 137.22 112.97 137.31 112.18 137.20 112.02 137.32 111.69 137.26 111.48 137.86 111.30 139.27 109.56 139.40 109.18 139.37 108.81 139.41 108.53 133.76 100.47 133.42 100.39 132.19 99.99 131.96 100.07 131.52 100.09 131.40 100.18 131.01 100.12 130.87 100.38 130.63 100.56 130.28 100.60 129.97 100.76 129.70 100.55 129.65 100.18 129.87 99.09 129.82 99.02 130.00 98.65 130.30 98.47 130.27 98.30 130.50 98.07 130.47 97.85 130.69 97.45 130.99 97.30 131.09 96.97 130.80 96.71 131.01 96.52 131.07 96.30 131.28 96.22 131.53 96.02 132.07 95.74 132.26 95.49 132.45 95.48 132.62 95.03 132.63 94.60 132.88 94.32 133.21 94.28 133.39 94.06 133.40 93.77 133.51 93.66 133.57 93.28 133.71 93.31 134.08 92.66 134.49 92.64 134.81 92.25 135.04 92.33 135.60 92.13 135.88 91.77 136.05 91.67 136.12 91.41 135.96 91.22 136.04 90.95 136.30 90.46 137.15 90.06 137.36 89.71 137.44 89.40 137.75 89.30 137.86 89.16 138.10 88.63 138.29 88.52 138.61 88.60 138.75 88.32 139.66 87.32 139.74 86.99 139.94 87.11 140.30 87.08 140.81 86.81 140.99 86.40 141.09 86.29 141.32 86.40 141.68 86.40 142.05 86.24 142.20 85.93 142.25 85.41 142.16 85.26 142.15 84.87 142.37 84.50 142.51 83.97 142.64 83.75 142.65 83.25 142.48 82.89 142.57 82.55 142.52 82.34 142.79 82.00 142.80 81.77 142.66 81.45 142.75 81.18 143.13 81.13 143.31 80.93 143.30 80.64 143.52 80.36 143.79 80.19 143.89 79.69 144.15 76.12 144.30 75.98 145.21 75.69 145.22 75.52 145.61 75.13 145.49 74.69 145.30 74.64 144.97 74.10 144.91 73.73 145.06 73.48 145.26 73.34 145.38 72.61 145.02 72.28 145.10 72.10 144.95 72.00 144.85 71.72 145.19 71.37 145.06 70.97 145.22 70.78 145.05 68.37 145.22 68.22 145.16 67.68 145.26 67.40 145.04 66.99 144.97 66.31 145.01 66.02 144.65 65.42 144.61 65.11 144.71 65.01 144.60 64.56 144.67 64.25 144.85 64.10 144.77 63.72 145.08 63.28 143.81 54.21 143.60 54.02 143.60 53.75 143.86 53.39 143.34 53.19 142.75 53.04 142.65 52.95 142.63 52.49 142.39 52.19 142.46 51.96 142.17 51.54 141.89 51.52 141.83 51.28 141.44 51.07 141.53 50.96 141.19 50.59 141.20 50.19 141.01 49.99 140.95 49.64 140.81 49.47 140.88 49.29 140.69 49.16 140.84 48.92 140.80 48.75 140.54 48.28 140.62 47.86 140.56 47.70 140.62 46.68 140.70 46.53 140.81 45.98 140.66 45.62 140.73 45.19 140.72 44.79 140.35 44.32 140.36 43.92 140.48 43.71 140.32 43.32 140.30 42.70 140.42 42.21 140.30 41.80 140.00 41.31 139.98 41.08 139.72 40.60 139.47 40.41 139.52 40.09 139.46 39.82 139.68 39.54 139.48 38.69 139.66 38.50 139.90 37.29 139.64 37.15 139.63 36.88 140.11 36.52 140.11 36.32 139.82 35.86 139.40 35.48 139.65 35.16 139.71 34.75 139.39 34.42 139.50 34.25 139.48 33.96 139.23 33.88 139.26 33.59 139.03 33.01 138.82 32.86 138.86 32.68 138.66 32.34 138.77 31.99 138.66 31.63 138.79 31.38 139.07 31.11 139.18 30.78 139.17 30.53 139.24 30.01 139.15 29.62 139.21 29.13 139.05 28.81 139.16 28.46 139.17 28.15 139.10 27.47 139.12 27.28 139.29 26.86 139.24 26.20 139.37 25.86 139.32 25.60 138.98 24.82 139.03 24.39 138.96 23.76 139.08 23.33 139.28 23.11 139.33 22.63 139.47 22.31 139.43 22.00 139.29 21.68 139.45 21.28 139.44 20.94 139.66 20.92 139.86 20.60 139.94 19.76 139.85 19.50 139.52 19.11 139.21 17.74 139.39 17.41 139.56 17.39 139.92 17.05 139.93 16.84 140.10 16.81 140.21 16.54 140.06 16.33 140.11 15.92 140.38 15.71 140.46 15.34 140.77 15.07 140.82 14.67 141.03 14.51 141.08 14.28 141.32 13.99 141.81 13.88 141.93 13.50 141.90 13.35 142.42 12.87 142.57 12.41 142.78 12.12 142.76 11.92 143.27 11.78 143.41 11.64 143.62 11.89 144.31 11.97 144.48 11.76 144.81 11.66 145.02 11.68 145.09 11.29 145.50 11.22 145.93 10.83 147.11 9.08 147.40 8.81 147.81 8.59 148.70 8.61 148.95 8.66 149.24 8.58 149.50 8.68 149.92 8.69 149.97 8.51 150.31 8.19 150.39 8.04 150.72 7.86 151.10 7.74 151.08 7.55 151.33 7.27 151.78 7.03 152.31 7.05 152.52 6.94 153.06 6.89 153.39 6.50 153.57 6.18 153.87 6.01 153.95 5.84 153.99 5.37 154.12 5.02 154.53 4.53 154.67 4.44 154.94 4.67 155.18 4.60 155.29 4.44 155.48 4.47 155.57 4.26 155.80 4.10 155.89 4.21 156.34 3.97 157.42 3.64 157.76 3.21 158.26 2.94 158.29 2.75 158.44 2.57 158.81 2.55 158.95 2.03 158.95 1.59 159.19 1.39 159.29 1.00 159.57 1.24 159.89 1.19 160.07 1.36 160.29 1.22 160.65 1.17 161.03 1.33 161.23 1.27 161.51 1.31 162.89 2.65 163.12 2.68 163.39 2.97 164.04 3.05 164.29 2.90 165.24 3.36 165.41 3.35 165.75 3.71 166.15 3.77 166.42 3.73 166.60 3.81 166.65 4.11 166.94 4.09 167.24 3.94 167.44 3.96 167.49 4.17 167.87 4.30 168.07 4.49 168.95 4.68 169.33 4.58 169.60 4.61 170.18 4.84 170.91 4.90 171.47 5.03 171.78 5.15 171.91 5.02 172.22 4.95 172.58 5.11 172.77 4.98 173.46 4.99 173.69 4.92 174.14 4.93 175.10 5.31 175.82 5.84 176.01 5.81 176.53 6.05 177.00 6.08 177.26 6.04 177.37 6.17 177.60 6.14 177.94 6.43 178.36 6.56 179.19 7.19 179.53 7.38 179.87 7.75 179.92 7.93 180.80 8.34 180.95 8.54 181.17 8.51 181.19 8.72 181.41 8.99 181.67 9.05 183.67 10.37 183.79 10.61 183.98 10.72 184.85 11.01 184.91 11.27 185.05 11.37 185.31 11.20 185.49 11.18 185.66 11.44 185.90 11.43 186.10 11.58 186.16 11.90 186.44 11.96 186.56 12.35 186.72 12.50 186.98 12.38 187.24 12.10 187.41 12.33 187.73 12.14 187.95 12.29 187.99 12.45 188.18 12.54 188.34 12.47 188.50 12.72 188.87 12.93 189.60 13.06 189.95 13.09 190.29 13.22 191.35 14.29 191.67 14.34 191.84 14.44 192.13 14.40 192.54 14.73 193.00 15.19 193.48 15.35 193.86 15.35 194.23 15.60 194.51 15.63 194.90 15.83 196.84 17.29 197.10 17.32 198.36 17.72 198.71 17.87 198.90 17.66 199.12 17.62 199.77 18.01 199.81 18.22 200.07 18.39 200.70 18.99 200.85 18.99 200.92 19.23 201.26 19.53 201.79 19.69 202.30 19.99 202.62 20.11 203.30 20.53 203.61 20.60 204.08 20.59 204.60 20.77 204.74 20.91 205.07 20.81 205.13 20.95 205.39 21.08 205.56 21.36 205.89 21.30 206.15 21.45 206.43 21.32 206.77 21.46 206.82 21.69 207.04 21.66 207.14 21.83 207.44 21.75 208.54 22.07 208.94 21.95 209.35 21.62 211.98 21.37 213.06 21.14 213.38 21.30 213.69 20.98 214.00 20.97 214.25 20.85 214.84 20.80 215.21 20.98 215.62 21.05 215.92 21.41 216.12 21.46 216.40 21.69 216.52 21.88 217.10 21.98 217.59 22.01 218.58 22.32 218.97 22.58 220.00 22.81 220.18 22.80 221.00 23.14 221.80 23.97 222.36 23.86 222.80 24.17 223.14 24.24 223.65 24.25 223.74 24.31 224.11 24.25 224.23 24.34 224.70 24.41 224.84 24.53 225.72 24.94 226.01 25.04 226.16 25.22 226.63 25.66 227.20 25.97 227.56 25.88 228.07 25.98 228.51 25.99 228.87 26.07 231.52 25.42 231.69 25.41 231.91 25.56 232.37 25.40 232.51 25.54 233.07 25.58 233.74 25.32 234.25 25.33 234.50 25.56 234.91 25.67 235.25 25.69 235.77 25.82 236.23 25.88 236.85 26.09 237.56 26.18 238.58 26.11 239.24 26.22 239.53 26.18 240.38 25.65 240.75 25.70 241.07 25.53 241.25 25.19 241.35 24.85 241.47 24.67 241.89 24.37 242.13 24.43 242.44 24.29 243.15 23.21 243.24 22.84 243.20 22.61 243.47 22.49 243.65 22.14 244.15 22.01 244.24 22.09 244.89 21.79 245.19 21.78 245.26 21.56 245.56 21.38 245.76 21.18 246.06 21.23 246.74 21.07 247.26 20.86 247.71 20.64 247.89 20.76 248.28 20.72 248.49 20.61 249.11 20.53 249.70 20.07 250.03 20.08 250.31 19.81 250.56 19.37 250.84 19.32 251.11 19.15 251.36 18.87 251.86 18.15 252.13 18.03 252.27 17.79 252.45 17.80 252.93 17.12 253.06 16.87 252.98 16.74 253.47 16.19 253.63 16.20 254.07 15.76 254.31 15.65 254.56 15.26 254.50 15.16 254.83 14.84 255.11 14.79 255.27 15.00 255.59 15.02 255.71 14.90 256.00 14.94 256.30 14.90 256.56 14.64 256.86 14.71 257.20 14.52 257.54 14.45 258.00 14.22 258.06 14.32 258.38 14.39 258.49 14.30 258.55 13.91 259.01 13.94 259.26 14.14 259.57 14.13 259.91 14.54 259.86 14.70 260.11 15.14 260.08 15.41 260.23 15.62 260.47 15.71 260.97 16.41 261.27 17.11 261.45 17.19 261.26 17.41 261.28 17.59 261.61 17.99 262.45 18.57 263.41 19.05 264.15 19.48 264.25 19.62 264.52 19.54 264.77 19.58 264.90 19.97 265.30 20.02 266.75 20.35 267.11 20.89 267.18 21.11 267.35 21.19 267.68 21.51 267.84 21.56 268.02 21.79 268.37 22.08 268.49 22.43 268.77 22.60 269.15 22.94 269.71 23.12 269.82 23.29 270.45 23.54 270.81 23.54 271.39 23.79 271.83 24.12 272.00 24.55 272.35 25.12 272.36 25.71 272.45 26.32 272.37 26.79 272.46 27.08 272.89 27.67 272.99 27.92 273.65 28.62 273.98 28.84 274.05 29.16 274.42 29.85 274.79 30.01 275.26 30.39 275.36 30.64 275.49 30.74 276.18 30.95 276.60 31.16 276.80 31.39 276.88 31.69 277.40 32.00 277.66 32.24 277.83 32.56 278.05 32.75 278.61 32.86 279.20 33.20 279.37 33.39 279.69 33.57 279.83 33.85 280.07 34.10 281.78 34.63 282.26 34.68 282.50 34.46 283.10 34.25 283.62 34.35 284.00 34.49 285.24 35.05 285.65 35.48 285.97 35.53 286.12 35.82 286.36 36.10 286.65 36.14 286.85 36.53 286.81 36.78 287.02 37.17 286.86 37.49 286.99 37.80 286.76 38.09 286.78 38.47 286.92 38.76 287.05 39.24 287.37 39.53 287.40 39.83 287.25 39.87 287.08 41.04 287.07 41.82 287.28 42.57 287.20 43.06 287.48 43.65 287.36 43.74 287.56 44.07 287.82 44.26 289.61 46.64 290.09 46.91 290.22 47.26 290.36 47.43 290.59 47.49 290.92 47.99 291.13 48.08 291.40 48.07 291.70 48.19 292.16 48.51 292.29 48.69 292.55 48.71 292.86 48.62 293.10 48.74 293.36 48.70 294.00 49.10 294.44 48.97 294.61 49.08 294.90 49.09 295.23 49.03 295.54 49.10 295.77 49.36 295.79 49.50 296.18 49.58 296.55 49.50 296.58 49.70 296.77 49.89 297.06 50.00 297.05 50.16 297.42 50.48 297.46 50.75 297.75 51.06 297.84 51.41 297.84 52.02 297.90 52.33 298.32 52.70 298.32 52.95 298.53 53.30 298.75 53.48 298.81 53.71 299.14 53.92 299.20 54.07 299.55 54.43 299.61 54.59 300.56 56.75 301.11 57.23 301.33 57.49 301.26 57.80 301.73 58.38 302.07 58.41 302.27 58.53 304.80 59.57 305.25 59.81 305.44 60.34 305.89 60.23 306.20 60.09 306.73 60.16 307.08 60.33 307.25 60.33 307.66 60.52 307.74 60.65 308.33 61.01 308.54 61.07 309.29 61.46 309.46 61.72 309.73 61.80 309.87 62.00 310.11 62.14 310.44 62.04 310.67 62.28 311.07 62.42 311.14 62.36 311.49 62.57 311.85 62.57 312.18 62.81 312.49 62.94 312.62 63.46 313.53 64.06 313.72 64.07 313.84 64.29 314.10 64.51 314.24 64.81 314.52 65.13 314.92 65.36 315.12 65.25 315.40 65.42 315.54 65.86 315.36 66.26 315.35 66.52 315.23 66.80 315.29 66.97 315.04 67.64 314.63 68.04 313.95 69.10 313.84 76.75 313.71 77.11 313.40 77.80 311.75 81.51 311.80 82.19 312.05 82.06 312.75 82.24 312.59 82.72 312.04 82.87 311.85 82.85 311.93 84.01 312.48 85.05 313.06 85.52 313.28 85.62 314.55 86.51 316.45 87.25 316.73 87.24 317.20 87.41 317.07 87.56 317.06 87.86 317.21 88.10 316.92 88.61 316.85 89.18 316.94 89.34 316.71 89.64 316.96 89.68 317.15 89.82 318.13 90.16 318.14 90.42 319.58 91.16 319.66 91.22 320.11 91.11 320.16 91.34 320.42 91.43 320.86 91.09 321.79 91.20 322.19 91.05 323.04 90.95 324.56 92.04 324.96 92.04 325.06 92.21 325.56 92.54 325.77 92.54 326.86 92.79 327.18 92.80 327.51 92.71 327.75 92.51 328.47 92.80 328.56 92.94 328.97 92.89 329.43 93.08 330.25 93.63 330.70 93.71 330.80 93.96 331.12 94.26 331.10 94.48 331.31 94.55 332.04 95.27 331.99 95.41 332.06 95.72 332.35 95.72 333.51 95.84 333.57 95.76 335.42 95.58 335.66 95.63 335.76 95.50 336.06 95.48 336.79 95.76 337.27 96.27 337.33 96.56 337.47 96.68 337.44 96.98 337.78 97.00 338.03 97.17 338.43 97.03 345.03 95.47 345.27 95.26 345.42 95.37 345.70 95.37 347.94 94.67 348.04 94.65 348.97 94.80 349.20 94.81 349.70 95.14 351.71 95.29 352.09 95.22 352.42 95.40 352.57 95.24 352.78 95.35 353.37 96.48 353.39 97.05 353.36 97.41 353.03 98.07 352.76 98.17 352.28 98.82 352.30 99.06 352.10 99.34 352.05 99.79 352.25 100.25 352.49 100.42 352.87 100.94 353.11 101.16 353.24 101.55 353.48 101.88 353.69 102.04 353.90 102.56 354.19 102.64 354.43 102.41 354.48 102.72 356.50 103.27 356.53 102.88 356.31 102.57 356.17 102.04 356.01 101.74 355.97 101.45 355.73 101.02 355.62 100.51 356.20 100.18 356.36 99.94 356.77 99.61 356.79 99.46 356.58 99.18 356.75 99.02 356.67 98.85 356.72 98.57 357.07 98.58 357.24 98.46 357.30 98.27 357.68 98.09 357.95 98.34 358.06 98.59 358.37 98.56 358.45 98.69 358.30 98.93 358.28 99.20 358.50 99.35 358.55 99.53 358.31 99.91 358.62 100.11 358.65 100.38 358.33 100.56 358.27 100.85 358.02 101.02 357.52 101.62 357.77 101.64 357.86 102.22 357.66 102.44 357.48 102.80 357.58 103.05 357.57 103.26 357.27 103.29 357.25 103.48 362.81 105.00 365.00 103.59 364.94 103.39 364.95 102.63 365.08 102.52 364.91 101.58 364.93 101.43 364.60 101.05 364.65 100.81 364.58 100.62 364.95 99.47 365.24 98.89 365.87 97.98 365.88 97.32 366.01 97.09 366.34 97.03 366.39 96.91 366.77 96.78 366.94 96.66 366.95 96.08 366.85 95.94 367.39 95.74 367.72 95.82 367.89 95.78 368.13 96.01 368.55 95.88 369.01 96.01 369.10 96.16 369.32 96.18 369.64 96.33 369.92 96.55 369.95 96.76 370.27 97.61 370.47 98.62 370.52 99.59 370.78 99.85 370.90 100.33 371.00 100.53 370.89 100.84 371.17 101.04 371.28 101.28 371.20 101.41 371.30 101.86 371.42 102.09 371.54 102.79 372.12 103.07 372.36 103.33 372.90 104.28 373.15 104.46 373.24 104.63 373.51 104.78 373.59 105.07 373.45 105.33 373.51 105.51 373.37 106.11 373.38 106.64 373.44 106.77 373.09 107.39 373.12 107.85 373.39 108.18 373.57 108.49 373.37 109.67 373.51 110.07 373.47 110.14 373.87 110.50 374.01 110.80 373.88 111.34 373.64 111.78 373.44 111.82 372.56 112.45 372.42 112.39 372.12 112.73 371.76 112.59 371.56 112.77 371.41 113.01 371.38 113.25 370.85 113.61 370.44 113.52 370.05 113.87 369.89 114.42 369.58 114.41 369.37 114.24 369.11 114.56 368.90 115.38 368.64 115.79 368.56 116.06 368.19 116.25 366.16 117.06 365.27 118.83 365.23 119.04 365.36 119.32 365.46 119.94 366.02 120.99 366.12 121.29 366.09 121.85 366.44 122.56 366.76 123.39 366.67 123.69 366.79 123.91 366.69 124.15 366.15 124.54 365.91 124.86 366.01 125.26 365.31 126.20 364.31 130.82 364.38 131.23 364.15 131.49 364.13 131.65 363.82 132.09 363.94 132.31 363.89 132.46 364.15 133.76 364.46 133.98 364.58 134.45 364.71 134.63 364.92 134.66 365.28 135.69 365.42 136.29 365.71 136.69 365.46 137.95 365.54 138.06 366.10 141.04 366.46 142.25 366.23 142.44 366.33 142.62 366.51 142.55 366.59 142.81 366.48 143.13 366.57 143.41 366.89 143.69 366.95 143.83 367.44 144.02 367.53 143.88 367.74 143.90 367.89 144.30 367.67 144.78 367.80 145.01 367.55 145.53 367.69 146.14 367.67 146.49 367.82 146.63 367.77 147.20 368.39 147.52 368.56 147.82 368.59 148.29 368.45 148.38 368.27 148.80 367.89 149.31 367.90 149.82 367.78 150.01 367.88 150.23 368.45 150.40 368.60 150.72 368.53 150.82 368.74 151.10 368.92 151.18 369.12 151.44 368.93 151.60 368.98 151.92 368.61 152.57 368.70 152.72 367.86 158.14 367.80 158.93 367.64 159.05 367.33 159.04 366.97 159.22 366.97 159.96 367.24 160.23 367.08 160.42 367.15 160.75 366.93 160.86 366.81 161.05 366.85 161.43 367.00 161.84 366.99 161.97 368.20 162.75 368.36 162.73 368.82 162.94 369.34 163.03 370.22 163.31 370.69 163.89 370.68 164.21 370.42 164.30 370.21 164.72 370.21 165.03 370.07 165.43 370.07 165.69 369.83 165.93 369.64 166.40 369.59 166.70 369.61 167.03 369.92 167.61 370.31 167.81 370.48 168.18 371.09 167.90 371.27 167.94 371.07 168.57 370.64 168.91 370.14 169.72 369.73 170.12 369.72 170.29 369.53 170.36 369.50 170.81 369.32 171.07 369.34 171.34 370.15 173.89 370.35 174.18 370.55 174.71 370.91 175.18 370.77 175.68 370.81 176.24 370.93 176.46 370.83 176.79 370.97 177.23 370.88 177.69 370.68 177.84 370.59 178.09 370.62 178.58 370.58 178.68 370.23 178.90 369.55 179.53 369.35 179.90 369.26 180.27 369.30 180.90 369.14 181.05 368.70 181.17 367.99 181.49 367.57 181.92 367.17 182.55 366.91 182.75 366.61 183.22 366.55 183.48 366.70 183.61 366.62 184.01 366.78 184.17 366.66 184.88 366.85 185.12 366.92 185.44 366.81 185.98 366.87 186.33 367.01 186.52 367.56 186.98 368.03 187.09 368.41 187.02 368.56 187.12 368.62 187.41 373.35 191.62 373.30 191.85 373.40 192.23 373.72 192.46 374.27 192.72 374.55 192.78 374.98 192.72 375.28 192.85 375.44 192.82 375.64 192.59 375.84 192.57 377.52 192.99 377.79 193.11 377.91 193.26 378.09 193.24 378.26 193.38 378.19 193.57 378.26 193.86 378.23 194.78 378.34 195.23 378.28 195.54 378.40 195.61 378.58 196.03 378.82 196.28 378.69 196.57 378.78 196.83 378.98 196.97 378.93 197.20 378.50 197.20 378.43 197.74 378.46 198.07 378.74 198.49 378.77 198.97 378.72 199.29 378.82 199.58 378.92 199.63 378.96 199.97 379.11 200.25 381.14 203.18 381.28 203.30 381.67 204.67 382.10 205.20 382.38 205.49 382.52 205.91 382.61 205.93 382.74 206.37 382.72 206.55 382.87 206.93 383.08 207.00 382.97 206.54 383.21 206.55 383.17 206.82 383.29 207.32 383.79 207.83 383.69 208.33 383.72 208.78 384.15 209.54 384.31 209.64 384.50 210.12 385.04 211.07 385.34 211.05 385.53 211.14 385.88 211.46 386.22 212.05 386.31 212.40 386.25 212.78 386.12 213.04 388.35 216.93 388.81 216.93 389.71 216.80 389.96 216.66 390.25 216.61 391.10 216.60 391.65 216.46 391.84 216.47 392.42 216.28 393.53 216.24 393.83 216.13 394.62 216.13 394.93 216.02 395.35 216.13 395.65 216.03 396.21 215.91 396.27 215.95 396.77 215.86 397.38 215.81 398.21 215.81 398.57 215.91 400.03 216.75 400.75 217.29 401.24 217.45 401.56 217.64 401.92 218.12 402.10 218.57 402.33 218.82 403.01 218.91 403.62 219.23 404.14 219.44 404.69 219.86 405.17 220.33 406.08 221.59 406.71 222.25 406.80 222.61 406.80 222.96 406.58 223.89 406.53 224.24 406.43 225.51 406.31 226.32 406.70 226.68 406.80 226.90 406.79 227.22 406.49 227.62 406.44 227.78 406.57 228.16 406.42 228.79 406.57 229.25 406.58 229.45 406.44 230.40 406.76 230.62 406.65 230.87 406.70 231.17 406.90 231.43 406.85 231.99 406.70 232.40 406.82 232.61 406.60 232.75 406.62 233.17 406.79 233.59 406.76 233.78 406.98 233.94 407.16 234.49 407.58 235.13 407.57 235.64 407.83 235.72 408.11 235.96 408.69 235.96 408.91 236.08 409.33 236.15 411.95 236.21 412.15 236.07 412.64 236.05 412.93 235.94 413.39 236.07 413.56 235.95 413.55 235.77 413.77 235.66 413.92 235.46 413.92 235.27 414.26 235.30 414.58 235.07 414.79 235.22 415.03 235.76 415.41 235.88 415.70 236.04 416.07 236.61 415.99 236.74 416.10 237.28 416.51 237.62 416.59 237.82 417.12 238.30 417.43 238.36 417.94 238.55 418.33 238.79 421.35 239.93 422.54 240.36 422.87 240.57 423.24 241.03 423.55 241.16 423.50 241.41 423.93 241.67 424.51 241.96 424.71 242.01 424.81 242.41 424.82 242.89 426.03 244.01 426.13 243.73 426.46 243.68 426.74 243.41 427.21 243.42 427.44 243.23 427.87 243.19 428.15 243.43 428.37 244.03 428.21 244.34 428.14 244.86 427.88 244.77 427.69 245.13 427.91 245.75 428.12 245.94 428.32 245.72 428.16 245.55 428.30 245.04 428.31 244.66 428.45 244.56 428.59 244.27 428.60 243.93 428.69 243.78 428.55 243.27 428.63 242.98 428.61 242.64 428.74 242.24 428.89 242.15 429.00 241.84 429.39 241.77 429.77 242.17 430.03 242.17 430.34 242.59 430.65 243.28 430.65 243.68 430.80 243.99 430.76 244.27 430.61 244.44 430.92 244.67 430.77 245.22 430.98 245.16 431.12 245.47 431.34 245.66 431.66 245.79 431.29 247.29 431.16 247.54 431.20 247.72 431.47 247.52 431.48 247.31 431.75 246.83 432.07 246.49 432.18 246.50 432.35 247.14 432.59 247.17 432.54 247.55 432.65 247.71 432.53 247.86 431.87 247.62 431.62 247.64 431.58 247.83 431.78 248.12 431.98 248.24 431.66 248.79 431.47 248.99 431.75 249.24 432.38 249.30 432.72 249.83 433.11 250.07 433.42 250.10 433.74 249.93 434.05 249.43 434.14 249.10 434.42 248.61 434.74 248.40 435.41 247.50 435.79 247.47 436.02 247.27 436.27 247.24 436.69 247.37 436.86 247.48 437.30 247.33 437.72 247.05 437.83 246.71 438.43 245.94 438.36 245.66 438.45 245.40 438.45 244.95 438.88 244.66 439.15 244.64 439.95 244.09 440.25 243.98 440.61 243.98 440.85 243.74 441.07 243.17 441.16 242.56 441.47 242.08 441.66 241.89 442.46 241.98 442.65 241.87 442.77 241.34 443.31 241.07 443.43 240.65 443.56 240.52 443.54 240.24 443.43 239.91 443.60 239.61 443.66 239.25 443.57 239.07 443.65 238.82 443.92 238.81 444.30 239.12 444.57 239.06 444.76 238.88 445.04 238.82 445.41 238.44 445.82 238.22 446.05 238.23 449.71 238.66 449.95 238.60 450.27 239.03 450.57 238.75 450.88 238.63 451.22 238.24 451.49 238.02 451.69 237.97 452.39 236.37 452.36 236.20 452.62 235.81 452.64 235.38 452.76 234.99 452.52 234.64 452.49 234.30 452.59 234.23 452.91 234.50 453.19 233.57 453.20 233.36 453.41 233.35 453.56 233.08 453.35 232.58 452.91 231.09 452.87 230.86 453.04 230.76 453.31 230.86 453.72 230.81 455.74 229.62 455.92 229.47 455.92 229.06 455.82 228.94 456.10 228.76 456.04 228.59 456.55 227.77 456.74 227.21 456.75 226.94 456.68 226.51 456.87 226.42 456.97 226.06 457.00 225.75 457.22 225.69 457.27 225.31 457.47 225.19 457.45 224.95 457.54 224.40 457.85 223.94 458.09 223.72 458.14 223.12 458.09 222.87 457.69 222.07 457.29 221.70 457.51 221.61 457.85 221.15 457.77 220.84 457.95 220.74 457.89 220.56 457.98 219.69 458.07 219.28 458.25 218.83 458.17 218.58 458.34 218.38 458.50 218.06 458.70 218.18 458.72 218.48 458.91 218.54 459.38 218.51 459.50 218.37 459.94 218.25 460.32 218.31 460.46 218.05 461.44 217.87 461.62 218.16 461.89 218.29 467.96 217.89 467.96 217.75 468.19 217.47 468.48 217.61 468.58 217.85 469.47 217.80 471.99 214.74 472.38 214.45 473.31 212.18 473.05 212.37 472.95 212.78 472.77 213.03 472.70 213.44 472.43 213.29 471.99 213.22 471.70 213.23 471.46 212.99 471.06 213.00 470.85 212.65 470.81 212.41 470.58 212.08 470.29 211.93 470.58 211.36 470.75 211.22 471.14 211.11 471.69 211.15 471.98 211.05 472.24 210.83 472.40 210.85 472.56 210.71 472.72 210.76 472.90 211.23 473.34 211.22 473.56 211.58 473.81 210.96 473.67 210.61 474.05 210.15 473.98 209.73 473.79 209.61 473.78 209.14 473.97 209.00 474.13 208.52 473.91 207.72 474.06 207.38 474.07 207.00 473.86 206.76 473.87 206.51 475.65 202.39 475.64 202.11 475.41 202.12 475.38 201.91 475.58 201.64 475.73 201.80 475.79 202.04 476.09 201.35 476.04 201.21 476.23 200.97 476.15 200.74 475.96 200.63 475.91 200.46 476.16 200.25 476.64 199.18 476.77 198.29 476.94 198.07 476.68 197.87 476.32 197.50 476.00 197.33 475.74 197.14 475.33 196.51 474.96 196.13 475.13 195.73 475.13 195.48 475.00 194.90 475.34 194.47 475.31 194.13 475.19 193.96 475.33 193.81 480.66 186.60 480.68 186.44 480.86 186.22 481.21 186.06 482.23 184.85 482.25 184.64 481.91 184.64 481.91 184.31 482.30 184.30 482.64 184.15 482.79 184.23 482.94 184.06 482.69 183.85 482.89 183.72 483.06 183.92 483.86 182.98 483.94 182.86 484.08 182.01 484.27 181.90 484.40 181.56 484.17 181.30 484.18 181.18 484.45 180.94 484.59 181.05 486.05 177.14 486.16 176.97 486.11 176.55 485.99 176.41 485.98 175.93 485.78 175.70 485.50 175.19 485.37 174.67 484.90 174.63 484.45 173.88 484.40 173.71 484.09 173.45 484.10 173.17 483.88 173.02 483.52 172.58 483.18 172.27 483.04 172.05 483.17 171.80 482.95 171.34 482.87 171.05 482.53 170.91 482.12 170.43 482.32 170.24 482.16 169.99 482.17 169.75 482.42 169.64 482.45 169.47 482.18 169.10 481.99 168.68 482.35 168.29 482.18 168.00 482.18 167.67 482.56 167.23 482.66 167.02 483.40 166.18 483.88 164.66 484.30 164.28 484.67 163.22 485.05 162.97 485.56 162.96 486.64 161.79 486.54 161.60 486.66 161.40 486.85 161.39 488.03 160.64 487.96 160.52 488.04 160.24 487.98 160.01 488.02 159.59 488.10 159.48 488.35 159.50 488.68 159.37 489.05 158.82 490.14 157.43 489.90 157.15 490.02 156.81 490.39 156.75 490.66 156.78 490.83 156.41 490.76 156.00 491.23 155.51 491.32 155.05 491.47 154.73 491.30 154.35 491.51 153.81 491.68 153.80 491.73 153.52 491.92 153.37 492.93 151.10 493.02 150.78 493.01 150.21 493.13 149.82 492.98 149.63 492.84 148.99 492.90 148.79 493.09 148.68 494.57 146.63 495.18 145.75 495.52 145.20 496.18 143.32 496.66 142.84 496.25 142.66 496.42 142.27 496.73 142.22 497.01 142.49 497.28 142.22 497.39 141.38 497.32 141.13 497.47 140.99 497.67 139.53 497.55 138.77 497.36 138.45 497.36 138.12 497.21 137.92 497.25 137.63 497.42 137.50 497.56 136.87 497.82 137.00 497.99 136.92 498.30 136.47 498.29 136.33 499.05 136.08 499.59 135.80 499.80 135.44 499.78 135.23 499.92 135.02 500.05 134.56 500.22 133.48 500.49 132.82 500.38 132.52 500.11 132.19 500.09 132.06 499.77 131.78 499.78 131.19 500.02 131.01 500.68 131.14 502.39 131.18 502.57 131.14 503.19 131.17 503.75 131.54 504.06 131.68 504.84 131.89 504.98 132.06 505.16 132.09 505.21 132.28 505.51 132.30 505.67 132.07 506.26 132.16 506.61 132.41 507.13 132.62 507.33 132.84 507.55 132.88 507.74 133.04 507.98 133.36 508.38 133.50 508.62 133.85 508.83 133.86 509.16 134.20 509.26 134.47 509.11 134.65 508.97 134.60 508.88 134.38 508.27 134.16 508.21 134.05 507.85 133.90 507.63 134.04 507.45 134.41 507.22 134.69 507.03 134.76 506.73 134.62 506.30 134.87 506.06 134.79 505.68 134.94 505.44 134.92 505.23 134.75 504.81 134.88 504.55 135.11 504.49 135.38 504.36 135.47 504.20 135.97 503.87 136.00 503.69 135.94 503.47 135.59 503.32 135.47 502.97 135.70 502.52 135.83 502.10 135.90 501.99 136.21 501.75 136.36 501.52 136.31 501.18 136.88 500.94 136.73 500.65 136.74 500.09 136.86 500.00 137.10 500.03 137.40 500.29 137.70 500.19 137.82 500.23 138.28 500.41 138.45 500.29 138.68 500.38 139.00 500.33 139.19 500.47 139.30 500.90 139.29 501.13 139.69 501.18 139.89 501.48 140.07 501.87 140.08 502.20 140.24 502.36 140.48 502.35 140.64 502.55 140.84 503.33 141.15 503.59 141.53 503.47 141.70 503.49 141.96 503.22 142.02 503.39 142.22 503.79 142.32 503.93 142.44 504.14 142.32 504.06 141.97 504.51 142.03 504.82 141.87 504.80 141.54 504.96 141.37 505.44 141.57 505.62 141.73 505.77 142.02 506.17 141.95 506.29 142.04 506.84 142.10 506.99 141.87 507.19 141.83 507.76 142.06 507.51 142.31 507.46 142.56 507.84 142.74 507.90 142.91 507.84 143.19 507.58 143.36 507.82 143.89 508.29 143.96 508.17 144.88 507.83 144.86 507.63 145.17 507.20 145.49 506.77 145.63 506.73 145.16 506.05 145.22 505.94 145.36 506.01 145.59 505.63 145.74 505.33 145.64 505.05 145.67 504.74 145.51 504.51 145.58 503.83 145.54 503.78 145.71 503.58 145.76 503.27 145.71 503.22 145.86 503.41 146.07 503.79 146.11 504.21 146.41 504.53 146.56 504.88 146.97 505.07 147.44 504.83 147.53 504.88 147.97 504.71 148.08 504.67 148.43 504.45 148.50 504.19 148.48 503.85 148.34 503.54 148.53 503.14 148.41 502.94 148.55 502.50 148.61 502.35 148.92 502.18 149.01 501.76 149.01 500.93 148.81 500.70 148.70 500.45 148.46 500.21 148.62 499.80 148.42 499.60 148.67 499.42 148.43 499.22 148.31 499.04 148.33 499.07 148.66 499.51 149.02 499.69 149.08 499.92 149.30 500.13 149.72 500.13 149.89 500.31 150.08 500.18 150.34 500.33 150.80 500.57 151.09 500.62 151.34 500.92 151.50 500.94 151.64 501.19 151.76 501.21 151.91 500.86 152.21 500.59 152.51 500.60 152.77 500.73 152.96 501.12 152.83 501.44 153.17 501.72 153.25 501.74 153.43 501.53 153.66 501.84 153.89 502.12 153.48 502.84 153.45 502.91 153.16 503.14 152.88 503.34 152.77 503.51 152.88 503.47 153.13 503.80 153.13 504.24 153.27 504.44 153.57 504.40 153.80 504.25 154.05 504.48 154.28 505.08 154.28 505.27 153.86 505.43 153.83 505.64 153.97 505.93 153.95 506.42 154.15 506.71 154.33 506.78 154.56 506.85 155.09 506.81 155.41 507.39 155.40 507.63 155.32 507.84 155.50 507.58 155.95 507.59 156.25 507.44 156.79 507.13 156.94 507.04 157.12 507.08 157.60 506.88 157.95 506.52 158.30 506.22 158.41 506.19 158.20 505.91 158.09 505.69 158.13 505.38 157.93 505.11 157.97 504.81 157.87 504.66 157.97 504.24 157.87 504.08 158.01 504.23 158.28 504.22 158.49 504.01 158.56 503.98 158.85 504.28 158.82 504.59 158.90 504.77 159.03 505.03 159.06 505.30 159.43 504.70 159.66 504.46 159.92 504.20 159.98 504.10 160.23 503.64 160.24 503.54 160.60 503.39 160.76 503.47 160.93 503.39 161.13 502.76 161.20 502.73 161.42 502.79 161.90 503.29 162.05 503.42 162.34 503.60 162.48 503.67 162.72 503.54 162.96 503.30 163.05 503.13 163.32 503.17 163.83 503.13 164.09 503.32 164.25 503.35 164.72 503.58 165.02 503.91 165.20 503.91 165.74 503.72 166.21 503.87 166.64 504.33 166.62 504.86 166.86 505.07 167.15 505.15 167.39 505.18 167.93 504.90 168.13 504.78 168.45 504.33 169.10 504.55 169.44 504.68 169.92 504.66 170.07 503.95 170.67 503.68 171.23 503.68 171.69 503.95 172.55 504.12 173.33 503.79 173.59 503.72 173.99 504.08 174.69 503.94 175.12 504.01 175.72 503.92 176.02 503.57 176.12 503.21 176.14 503.17 176.33 503.24 176.88 503.44 177.09 503.91 177.72 503.71 178.20 503.72 178.32 504.06 178.88 504.23 179.44 504.20 179.91 504.30 180.05 504.72 180.27 504.99 180.14 505.34 180.16 505.70 180.34 506.00 180.30 506.15 180.47 506.27 180.82 506.56 181.14 506.55 181.41 506.66 181.57 507.08 181.58 507.74 181.78 508.23 182.57 508.42 182.47 508.78 182.09 509.16 181.88 509.30 181.61 509.29 181.06 509.47 180.75 509.46 180.49 510.07 180.79 510.21 180.93 510.66 181.16 511.08 181.01 511.28 180.69 511.29 180.20 511.58 179.87 512.17 179.37 512.68 179.36 513.13 179.09 513.17 178.96 512.72 178.58 512.59 178.42 512.91 178.17 512.93 178.03 513.30 177.95 513.52 178.11 513.78 178.06 513.91 177.90 514.27 177.80 514.61 177.19 514.94 177.19 515.17 177.10 515.76 177.39 516.10 177.61 516.36 177.89 516.56 177.76 516.82 177.86 517.23 177.91 517.36 177.99 517.44 178.29 517.63 178.31 517.83 178.17 518.06 178.28 518.05 178.68 517.80 179.02 517.48 179.05 517.37 179.20 517.09 179.14 516.95 179.25 517.00 179.71 516.44 179.85 516.58 180.24 516.35 180.41 516.07 180.42 515.84 180.33 515.03 181.22 514.59 181.34 514.36 181.68 514.37 181.97 514.20 182.27 513.84 182.38 513.45 182.92 513.45 183.09 512.99 183.61 513.03 183.68 514.15 183.70 514.11 183.94 514.46 184.05 514.46 184.23 513.85 184.27 513.70 184.56 513.32 184.75 513.08 184.72 512.77 184.92 512.65 185.42 512.88 185.59 512.91 185.77 512.63 186.20 512.55 186.54 512.65 186.83 513.04 187.00 513.09 187.24 513.73 187.47 513.92 187.63 513.78 188.20 513.45 188.42 513.34 188.63 513.22 189.49 512.85 189.42 512.29 189.49 512.17 189.64 512.31 189.86 512.55 189.95 512.86 190.33 512.86 190.74 512.70 191.07 512.92 191.11 513.08 191.31 513.28 191.17 513.39 191.52 513.66 191.64 513.86 191.94 514.21 191.91 514.33 192.16 514.25 192.39 514.32 192.63 514.10 192.96 514.17 193.25 513.99 193.47 514.00 193.62 513.82 194.16 514.00 194.52 513.92 194.60 513.42 194.80 513.27 195.03 513.67 195.17 513.61 195.64 513.79 195.81 514.48 196.22 515.20 197.14 515.17 197.34 515.01 197.55 515.03 197.77 515.16 197.97 515.17 198.36 515.04 198.50 514.99 198.91 515.09 199.29 514.86 199.44 514.78 199.74 515.13 200.75 514.94 201.06 514.93 201.32 515.07 201.55 515.34 201.67 515.75 201.51 516.18 201.48 516.46 201.14 516.63 201.38 516.60 202.18 517.00 202.26 517.04 202.63 517.30 202.41 517.39 202.06 517.74 201.85 518.15 201.75 518.11 201.52 518.48 201.46 518.57 201.68 518.54 202.15 518.78 202.43 518.82 202.72 518.72 203.06 519.03 203.02 519.47 202.89 519.81 202.88 520.11 202.99 520.41 203.40 520.55 203.86 520.60 204.28 520.93 204.57 521.25 204.68 521.36 204.86 521.37 205.34 521.74 205.68 521.74 206.14 521.53 206.22 521.32 206.51 520.79 206.51 520.27 206.60 520.09 206.72 519.91 206.70 519.67 206.95 519.36 207.09 519.32 206.81 519.20 206.66 518.89 206.49 518.63 206.51 518.59 206.84 518.32 206.65 518.11 206.71 517.98 207.02 517.76 207.09 517.39 207.32 517.17 207.29 516.92 207.43 516.65 207.90 516.27 208.09 515.95 208.05 515.85 207.95 515.78 207.51 515.98 207.38 515.95 207.00 515.68 206.99 515.58 206.72 515.30 206.54 515.20 206.28 514.81 206.31 514.68 206.40 514.71 206.79 514.51 207.08 514.12 207.08 513.93 207.14 513.79 206.70 513.26 206.47 513.06 206.14 512.94 205.63 512.73 205.20 512.10 205.34 511.83 204.99 511.53 205.11 511.29 205.09 510.82 205.18 510.45 205.39 510.02 205.41 509.86 205.26 509.67 204.51 509.56 203.88 509.59 203.60 509.49 203.46 508.79 203.54 508.39 203.46 508.21 203.49 508.05 203.32 507.98 203.72 507.76 203.84 507.38 203.81 507.20 203.65 507.09 203.85 506.68 203.68 506.63 203.93 506.42 204.09 505.82 204.08 505.76 203.91 505.51 203.83 505.32 203.88 505.39 204.34 505.52 204.72 505.52 205.49 505.35 205.79 505.22 206.24 505.47 206.80 505.10 206.97 504.72 207.00 504.57 207.10 504.41 207.39 504.42 207.97 504.56 208.28 504.55 208.57 505.07 208.58 505.35 208.93 505.36 209.32 505.60 210.14 505.53 210.42 505.40 210.53 504.88 210.60 504.30 210.84 504.11 210.85 504.04 211.03 504.14 211.34 504.80 211.27 504.90 211.34 504.95 211.76 505.29 211.82 505.48 211.96 505.73 211.89 505.83 212.11 505.84 212.41 506.26 212.61 506.69 212.46 507.29 212.15 507.70 212.24 507.83 212.20 508.01 211.77 508.25 211.54 508.18 211.25 507.89 211.25 508.64 210.48 509.15 210.68 509.54 210.72 509.80 210.61 510.30 210.71 510.80 210.86 510.97 210.85 511.56 211.22 511.70 211.41 511.72 211.78 512.02 211.92 512.21 212.74 512.74 212.86 513.27 212.84 513.83 213.06 514.06 213.43 514.15 213.72 514.30 213.73 514.76 213.57 515.09 213.82 515.22 213.61 515.67 213.15 516.00 212.97 516.13 212.59 516.45 212.31 516.85 212.24 517.15 212.44 517.63 212.37 517.73 212.60 517.69 212.85 517.82 213.22 518.16 213.21 518.26 213.11 518.25 212.84 518.38 212.50 518.83 212.34 519.14 212.58 519.47 212.57 519.67 212.88 519.83 212.84 520.18 212.47 520.52 212.33 520.95 212.26 521.11 212.29 521.53 212.60 521.57 213.05 521.97 213.47 522.52 213.58 522.70 213.84 522.87 214.21 523.18 214.46 523.31 215.32 523.61 215.96 523.38 216.17 523.48 216.72 523.74 216.97 523.52 217.49 523.32 217.81 523.62 218.14 523.72 218.58 524.01 218.77 524.66 218.78 525.31 218.36 525.39 218.48 525.47 219.05 525.87 219.78 525.96 220.05 526.18 220.25 526.32 220.52 526.72 220.50 527.13 220.39 527.33 219.90 528.03 219.79 528.28 219.57 528.43 219.00 528.29 218.45 528.46 218.32 528.83 218.22 529.11 217.98 529.20 217.78 529.19 217.47 529.04 217.06 529.20 216.76 529.85 216.47 530.14 216.43 530.32 216.51 530.60 216.16 530.73 215.87 530.99 215.50 531.21 215.74 531.57 215.62 531.76 215.64 532.32 215.26 532.64 215.13 532.83 215.16 533.14 214.91 533.21 215.01 533.93 215.17 534.23 215.05 534.70 214.59 534.69 214.32 534.88 214.16 535.37 214.29 535.72 214.15 535.76 213.96 535.99 213.60 535.86 213.25 535.90 213.14 536.30 212.94 536.36 212.41 536.28 212.11 536.56 212.06 536.91 212.35 537.03 212.24 537.38 212.16 537.60 212.28 538.01 212.24 538.15 212.09 538.30 211.77 538.68 211.82 538.86 211.99 539.22 212.07 539.27 212.64 539.35 212.95 539.62 213.22 539.93 213.24 540.05 213.52 540.56 213.61 541.03 213.56 541.31 213.39 541.70 213.49 542.26 213.41 542.63 213.79 542.79 214.19 542.99 214.37 543.26 214.43 543.31 214.70 543.50 215.03 543.96 215.37 544.00 215.58 544.35 216.02 544.49 216.29 544.67 216.40 544.93 216.81 545.11 217.25 545.25 217.82 545.38 218.01 545.58 218.08 545.94 218.04 545.87 218.35 545.05 218.69 545.15 219.19 545.00 219.40 544.48 219.43 544.17 219.62 543.70 219.69 543.54 219.88 543.54 220.27 543.25 220.15 542.88 220.08 541.57 220.75 541.39 220.94 540.69 220.65 540.58 220.67 540.07 221.14 539.87 221.20 539.73 221.05 539.45 221.08 539.20 221.48 539.08 221.79 538.88 221.82 538.53 221.51 538.14 221.35 537.97 221.36 537.57 221.63 537.10 222.09 536.88 222.14 536.46 221.95 536.34 221.74 536.16 221.85 535.97 221.76 535.54 221.89 535.41 222.13 534.93 222.18 534.73 222.36 534.23 222.18 533.98 222.03 533.81 222.13 533.41 222.21 533.09 222.36 532.95 222.76 532.76 222.78 532.39 223.34 532.05 223.18 531.81 223.18 531.54 223.33 531.34 223.36 530.92 223.28 530.46 223.03 529.86 222.78 529.64 222.80 529.52 222.94 529.47 223.42 529.28 223.91 529.17 224.05 528.87 224.80 528.64 225.12 528.73 225.76 528.65 226.02 528.28 226.44 528.05 226.50 527.88 226.77 527.84 226.99 527.64 227.52 527.42 227.87 526.99 228.38 526.99 228.59 527.37 228.86 527.94 229.01 528.27 228.99 528.65 229.27 528.56 229.45 528.10 229.74 528.00 229.87 528.30 230.60 528.51 230.87 528.82 230.95 528.99 231.23 529.17 231.70 529.17 231.89 529.43 232.08 529.78 232.01 530.37 232.75 530.65 232.82 530.80 232.63 530.95 232.24 531.47 232.48 531.73 232.54 532.02 232.41 532.87 231.84 532.94 231.74 533.03 231.08 533.40 230.95 533.69 230.43 533.78 229.86 534.04 229.81 534.36 229.65 534.50 229.68 534.84 230.07 535.32 230.10 535.31 230.62 535.62 230.85 535.81 231.30 535.80 231.70 535.69 232.38 535.71 232.82 535.94 233.57 536.11 233.73 536.54 233.74 537.13 233.67 537.29 234.38 537.14 234.88 536.82 235.27 536.79 235.62 536.56 235.83 536.41 236.12 536.33 236.42 536.30 236.84 535.86 237.09 535.52 237.02 535.35 237.11 535.30 237.46 534.93 237.50 534.52 236.91 534.17 236.97 533.95 236.92 533.67 237.11 533.45 237.10 533.03 237.28 532.87 237.29 532.63 237.12 532.34 237.19 532.33 237.44 532.13 237.59 532.13 237.97 531.69 238.15 531.65 238.35 531.70 238.69 531.59 238.96 531.51 239.38 531.27 239.67 531.32 240.18 531.26 240.62 531.44 241.43 531.38 241.67 530.56 241.64 529.73 241.39 529.14 241.31 528.89 241.79 528.59 241.99 528.27 241.74 527.86 241.57 527.63 241.63 527.34 241.94 527.28 242.41 527.38 242.76 527.38 243.22 527.27 243.45 527.09 243.64 527.32 243.88 527.35 244.06 527.20 244.35 527.26 245.05 527.03 244.93 526.89 244.60 526.76 244.94 526.87 245.30 526.82 245.55 526.84 246.02 526.79 246.25 526.94 246.38 527.21 246.40 527.29 246.52 527.10 246.69 526.62 246.94 526.77 247.39 526.47 247.61 526.37 248.10 526.41 248.35 526.34 248.65 526.08 248.78 525.54 249.42 525.39 249.93 525.30 250.03 524.25 250.20 522.94 250.65 522.69 250.86 522.11 251.04 521.76 251.48 521.54 251.57 520.96 251.65 520.57 251.54 520.21 251.78 520.25 251.93 520.56 252.04 520.73 252.62 520.75 252.86 520.68 253.25 520.74 253.56 520.58 254.00 520.59 254.51 520.74 254.97 520.35 255.15 520.23 255.61 520.39 256.16 520.45 256.57 520.61 256.68 520.68 256.90 520.70 257.42 520.91 257.53 520.90 257.86 521.05 258.17 521.01 258.36 520.72 258.45 520.62 258.57 520.86 259.02 521.12 259.05 521.22 259.26 521.56 259.30 521.77 259.09 522.19 258.81 523.22 258.80 523.42 259.10 523.99 259.17 524.37 259.35 524.68 259.78 524.71 259.96 525.27 259.99 525.42 259.89 525.43 259.54 525.59 259.11 525.79 258.84 525.91 258.88 525.92 259.32 526.04 259.64 526.07 260.04 526.15 260.17 526.49 260.12 526.88 260.24 527.10 260.41 526.90 260.53 526.68 260.79 526.60 261.27 526.63 261.41 526.86 261.46 527.10 262.27 527.05 262.63 527.26 263.08 527.50 263.14 527.63 263.44 527.98 263.64 528.14 263.83 528.14 264.23 528.24 264.97 528.34 265.42 528.41 266.05 528.70 266.49 528.90 266.57 529.31 266.60 529.46 266.38 529.42 266.14 529.20 265.82 529.15 265.61 529.25 265.44 529.64 265.51 529.93 265.43 530.07 265.90 530.29 266.37 530.49 266.57 530.94 266.39 531.36 266.72 531.51 266.70 531.58 265.89 531.93 266.01 532.50 266.29 532.57 265.93 532.72 265.85 532.80 266.44 532.87 266.59 533.14 266.72 533.18 266.99 533.61 266.89 533.85 267.14 534.16 267.02 534.42 266.58 534.86 266.71 535.00 266.85 535.10 267.11 535.39 267.17 535.49 267.07 535.82 267.06 536.12 267.75 536.58 267.37 536.66 267.18 536.68 266.81 536.78 266.60 537.12 266.45 537.23 266.57 537.30 266.92 537.19 267.29 537.21 268.18 537.37 268.75 537.40 269.57 537.55 269.88 537.79 270.19 537.86 270.73 537.57 270.85 537.32 271.14 537.35 271.36 537.74 271.72 537.90 272.46 538.01 272.76 537.81 272.91 537.56 272.88 537.41 273.05 537.52 273.21 537.51 273.43 537.61 273.79 537.74 273.99 537.74 274.38 537.80 274.78 537.73 275.31 538.07 276.11 538.17 276.51 538.38 276.90 538.51 277.00 538.54 277.37 538.93 277.68 539.12 277.62 539.19 277.40 539.52 277.16 539.71 277.13 540.00 277.28 540.12 277.43 540.32 277.40 540.39 277.62 540.59 277.75 540.71 278.12 540.69 278.46 540.78 278.74 541.15 278.52 541.60 278.50 541.84 278.17 541.84 278.03 541.66 277.64 541.64 277.35 541.77 277.25 541.63 276.90 541.62 276.68 541.85 276.40 542.28 276.23 542.40 276.40 542.46 276.94 542.46 277.76 542.62 278.23 542.77 278.30 542.98 278.89 542.98 279.24 543.13 279.79 543.14 280.04 543.02 280.28 542.56 280.33 542.45 280.64 542.28 280.65 542.14 280.28 541.86 280.48 541.43 280.60 541.00 281.12 540.68 281.05 540.69 281.86 541.04 282.16 541.13 282.44 540.84 282.79 540.61 282.83 540.31 282.71 539.99 282.73 540.11 283.07 540.35 283.48 540.52 283.93 540.40 284.15 540.51 284.47 540.70 284.55 540.77 284.81 540.63 285.57 540.84 285.82 541.27 285.93 541.59 286.17 541.94 286.64 542.22 286.78 542.26 286.93 542.66 287.33 542.86 287.79 542.85 288.52 542.96 288.83 542.97 289.34 543.14 289.62 543.36 289.78 543.09 290.34 543.30 290.62 543.16 290.89 543.27 291.22 543.30 291.59 543.49 292.23 543.86 292.80 544.15 292.95 544.22 293.19 544.11 293.44 544.23 293.72 544.37 293.70 544.55 293.18 544.62 292.75 544.80 292.44 544.96 292.72 544.96 293.02 545.03 293.43 544.86 293.59 544.77 294.08 544.52 294.05 544.77 294.55 545.04 294.59 545.15 294.79 545.18 295.07 545.08 295.29 545.15 295.50 545.53 296.03 545.63 296.36 545.42 296.66 545.15 296.66 544.71 296.90 544.67 297.09 544.46 297.35 544.04 297.74 543.79 297.85 543.54 298.12 543.43 298.09 543.24 297.58 543.15 297.52 542.83 297.62 542.91 297.77 542.82 297.96 542.87 298.28 542.69 298.46 542.70 298.66 542.57 298.90 542.39 298.89 541.93 297.62 541.75 297.58 541.43 297.75 541.28 298.12 541.38 298.57 541.17 298.66 540.95 298.86 540.89 299.08 540.88 299.54 540.93 299.77 540.83 300.10 540.93 300.52 540.93 300.90 540.60 301.17 540.58 301.39 540.67 301.89 540.59 302.24 540.72 302.77 540.95 303.88 541.17 304.02 541.17 304.33 541.24 304.81 541.09 304.94 540.91 305.87 540.78 306.17 540.89 306.31 541.22 306.24 541.39 305.88 541.78 305.76 542.06 305.53 541.93 305.09 542.00 304.72 542.02 304.25 542.26 303.87 542.59 303.90 542.62 304.16 542.91 304.44 543.20 304.31 543.71 304.27 544.00 304.62 544.33 304.63 544.55 305.63 544.30 305.71 544.16 305.44 543.96 305.56 543.95 305.74 543.74 305.79 543.49 306.13 543.59 306.32 543.60 306.71 543.75 306.94 543.96 307.00 543.91 307.52 544.09 307.75 544.13 308.04 544.27 308.12 544.32 308.34 544.19 308.51 544.58 308.92 544.51 309.51 544.39 309.78 544.22 309.95 544.32 310.38 544.58 310.78 544.41 311.22 544.26 310.80 544.05 310.55 543.70 311.29 543.63 311.64 543.44 311.75 543.52 311.96 543.28 312.49 543.03 312.31 542.87 312.29 542.50 312.41 542.45 312.20 542.21 312.26 542.04 312.48 541.80 312.29 541.27 312.15 541.14 312.67 540.79 312.90 540.74 313.20 540.79 313.43 541.07 313.70 541.04 313.91 541.30 314.21 541.26 314.63 541.33 315.26 541.47 315.39 541.56 315.74 541.43 316.11 541.49 316.44 541.75 316.59 542.03 317.00 542.35 317.09 542.32 317.44 542.05 317.57 541.92 317.99 541.88 318.37 541.66 318.33 541.04 317.83 540.90 318.10 540.93 318.47 540.89 318.75 541.07 319.02 541.31 319.22 541.30 319.52 541.13 320.34 541.19 320.51 541.16 320.95 541.22 321.35 541.40 321.62 541.86 321.95 542.02 321.99 542.11 322.20 542.50 322.61 542.26 323.08 541.97 323.20 541.76 323.49 541.42 323.71 541.42 323.92 541.29 324.06 540.86 324.11 540.29 324.57 540.05 324.39 539.92 324.42 539.85 324.78 539.41 324.83 538.79 324.95 538.49 325.33 538.49 325.69 538.36 325.88 538.48 326.16 538.66 326.35 538.68 326.52 538.58 326.82 538.92 327.03 538.67 327.17 538.66 327.51 538.83 327.89 538.99 329.15 538.87 329.33 538.86 329.78 538.33 329.89 537.75 330.10 537.65 330.04 537.27 330.22 537.14 330.38 536.50 330.54 536.56 330.89 536.88 331.14 536.93 331.65 537.02 331.87 537.00 332.24 536.73 332.39 536.63 331.97 536.25 331.73 536.07 332.17 536.05 332.62 535.74 332.50 535.63 332.56 535.85 333.03 535.80 333.22 535.49 333.41 535.32 333.88 535.10 334.14 535.31 334.18 535.49 334.34 535.55 334.83 535.84 335.06 536.06 335.08 535.94 335.42 536.38 335.92 536.67 336.08 536.59 336.32 536.80 336.40 536.58 336.70 537.04 336.75 537.43 336.70 537.61 336.60 538.13 336.44 538.68 336.40 539.17 336.22 539.14 336.48 538.92 336.62 539.10 336.79 538.80 336.87 538.57 337.24 538.57 337.47 538.70 337.77 538.73 338.06 538.54 338.58 538.27 338.83 538.56 339.16 538.72 339.52 538.71 339.82 538.88 339.91 539.37 339.86 539.75 339.98 539.97 340.37 539.98 340.60 540.44 341.11 540.42 341.32 540.53 341.72 541.34 342.34 541.40 342.47 541.89 342.80 541.83 343.00 542.11 343.43 541.99 343.88 542.07 344.27 542.02 344.43 542.13 344.97 542.07 345.23 542.32 345.55 542.46 345.99 542.52 346.32 542.78 346.44 542.99 346.83 543.13 346.86 543.44 346.63 543.70 346.60 543.80 346.40 543.97 346.40 544.04 346.85 544.55 347.71 544.29 347.89 544.44 348.14 544.45 348.44 544.21 348.40 544.02 348.55 543.88 348.35 543.72 348.30 543.39 348.54 543.47 348.96 542.99 349.13 542.56 349.15 542.20 349.39 541.65 349.58 541.23 349.97 540.88 350.01 540.73 349.81 540.49 349.74 539.58 349.69 539.26 349.61 538.71 349.39 538.30 349.40 537.66 349.23 537.48 348.90 537.56 348.63 537.35 348.43 536.80 348.87 536.71 349.19 536.50 349.15 535.99 348.60 535.82 348.53 535.60 348.69 535.70 348.93 535.73 349.27 535.62 349.49 535.08 349.40 535.15 349.73 535.31 349.84 535.66 349.77 536.14 349.89 536.22 350.28 536.33 350.44 536.23 350.67 536.35 350.87 536.72 350.81 536.99 350.70 537.30 350.86 537.58 350.91 537.49 351.19 537.81 351.27 537.48 351.59 537.40 351.93 536.59 352.26 536.62 352.50 536.85 352.32 537.11 352.53 537.06 352.73 537.30 352.81 537.78 353.08 538.05 353.43 537.90 353.58 537.75 353.91 537.80 354.11 538.02 354.33 538.04 354.48 537.90 355.00 537.55 355.14 537.46 355.36 537.24 355.60 537.05 355.69 536.62 356.11 536.64 356.37 537.24 356.35 537.47 356.43 537.63 356.60 538.40 356.75 538.94 356.95 538.83 357.51 538.48 358.15 538.26 358.30 538.00 358.36 537.87 358.51 538.01 358.68 538.53 358.86 538.70 358.83 539.70 358.49 540.39 358.20 540.64 358.06 540.89 358.01 541.17 358.11 541.61 358.40 542.02 358.42 542.20 358.52 542.86 357.97 543.12 357.86 543.36 357.96 543.53 358.26 543.61 358.62 544.07 359.13 544.05 359.22 544.29 359.64 544.40 360.02 544.14 360.17 544.25 360.37 544.50 360.31 544.83 360.12 544.85 360.00 545.49 359.78 545.50 359.53 545.65 359.48 545.79 359.90 545.51 360.07 545.73 360.46 545.90 360.45 545.92 360.76 545.67 360.99 545.63 361.17 545.42 361.50 544.81 361.76 544.41 362.11 544.04 362.26 543.39 362.61 543.25 362.46 542.88 362.67 542.18 362.99 541.22 363.49 541.13 363.92 540.88 364.14 540.91 364.34 540.73 364.52 541.01 364.60 541.12 364.73 540.91 365.10 541.16 365.10 541.61 365.21 541.85 365.50 541.56 365.52 541.43 365.77 541.61 366.06 541.80 366.24 541.74 366.80 541.50 367.12 541.62 367.50 541.49 367.76 540.35 368.14 540.27 368.31 540.35 368.51 540.58 368.36 540.95 368.55 541.23 369.08 541.19 369.45 541.45 369.23 541.78 369.17 541.87 369.05 541.68 368.79 541.92 368.60 542.73 368.98 542.96 369.11 543.33 369.10 543.54 369.46 543.69 369.61 543.90 369.57 544.10 369.38 544.08 368.80 544.28 368.54 544.31 368.20 544.45 368.25 544.76 368.13 544.65 367.77 544.71 367.57 544.96 367.38 545.18 367.46 545.33 367.39 545.54 367.50 545.77 367.89 545.88 368.35 546.23 368.49 546.51 368.19 546.65 367.94 546.86 367.79 547.06 367.79 547.26 367.66 547.49 367.78 547.54 368.13 547.74 368.31 547.59 368.56 547.58 368.84 547.43 369.27 547.60 369.39 547.44 369.62 547.63 369.68 547.93 369.56 548.54 369.48 548.94 369.15 549.32 369.08 549.56 368.94 549.82 368.65 549.93 368.69 550.53 368.36 550.63 368.49 551.01 368.40 551.27 368.45 551.22 368.65 551.42 368.77 551.76 368.64 551.86 368.82 552.07 368.87 552.27 369.37 552.46 369.47 552.52 369.78 552.53 370.33 552.74 370.41 553.14 370.45 553.43 370.26 553.56 370.30 553.73 370.56 553.96 370.22 554.00 370.03 554.31 369.97 554.45 370.35 554.73 370.41 555.23 370.16 555.54 370.42 555.61 370.24 555.83 370.07 556.13 369.98 556.22 369.81 556.53 369.86 556.80 369.75 556.87 369.43 557.22 369.29 557.33 369.38 557.66 369.07 558.06 369.40 558.32 369.53 558.77 369.38 558.95 369.49 559.26 369.51 559.44 369.68 559.40 369.93 559.54 370.05 559.27 370.23 559.13 370.77 558.54 370.77 558.33 370.85 558.20 371.13 558.45 371.09 558.71 371.24 558.99 371.51 558.86 371.71 558.88 371.95 558.62 372.13 558.43 372.10 558.08 371.74 557.85 371.69 557.75 371.37 557.61 371.35 557.36 371.49 557.24 371.31 556.80 371.42 556.48 371.32 556.28 371.49 556.06 371.46 555.96 371.59 556.02 371.85 555.59 372.23 555.24 372.39 554.94 372.29 554.73 372.80 554.34 373.38 554.25 373.67 553.90 373.79 553.71 373.65 553.08 373.55 552.96 373.61 552.87 373.89 552.44 374.14 552.57 374.41 552.43 374.57 552.60 374.74 552.30 374.89 552.03 374.74 551.75 374.70 551.52 374.87 551.68 375.41 551.49 375.58 551.39 375.85 551.25 375.95 550.95 375.94 550.52 375.74 550.25 375.70 549.80 375.99 549.30 376.06 549.10 376.15 548.61 376.73 548.58 377.02 548.48 377.21 548.26 377.30 548.17 377.58 548.31 377.92 548.20 378.23 547.80 378.59 547.96 379.00 548.29 379.28 548.45 379.52 548.78 379.83 548.94 380.10 549.09 380.14 549.47 380.01 549.84 380.28 550.12 380.27 550.11 380.46 550.46 380.86 550.21 380.94 550.07 381.10 549.81 381.21 549.23 381.17 548.87 381.44 548.95 381.71 548.64 381.79 548.69 382.15 548.60 382.38 548.40 382.58 548.44 382.76 548.64 382.84 548.56 383.17 549.21 383.01 549.86 382.99 550.13 382.78 550.48 382.81 550.39 383.11 550.61 383.84 551.42 383.93 551.78 384.30 552.27 384.29 552.59 383.87 552.79 383.71 553.10 383.57 553.56 383.54 553.80 383.42 553.79 383.75 553.36 384.24 553.42 384.61 553.69 384.85 553.70 385.13 553.57 385.40 553.36 385.54 553.08 385.58 552.80 385.50 552.60 385.64 552.50 385.95 552.77 385.92 552.92 386.16 552.28 386.51 552.41 386.75 553.12 386.76 553.17 386.86 553.02 387.16 552.75 387.15 552.15 387.25 552.17 387.39 552.96 387.35 552.39 387.93 552.27 388.13 552.47 388.34 552.38 388.91 552.50 389.14 552.26 389.38 552.46 389.80 552.10 390.25 551.71 390.34 551.64 390.63 551.74 390.90 551.46 390.96 551.27 391.25 551.35 391.39 551.68 391.40 551.87 391.51 552.19 391.37 552.47 391.34 552.76 391.15 552.85 390.90 553.19 391.03 553.44 390.99 554.16 391.16 554.44 391.33 555.21 391.59 555.21 391.84 554.96 391.98 554.92 391.79 554.61 391.97 554.25 391.88 553.97 392.09 554.13 392.72 553.97 392.87 553.94 393.18 554.13 393.26 554.25 393.58 554.54 393.61 554.70 393.46 554.92 393.46 554.98 393.70 554.67 393.88 554.54 394.04 554.58 394.43 554.50 394.54 554.52 394.88 554.31 395.36 554.36 395.55 554.84 395.78 554.61 395.98 554.74 396.39 554.98 396.46 555.12 396.82 554.93 397.11 554.90 397.38 554.67 397.48 554.48 397.42 554.07 397.54 554.02 397.90 554.17 397.94 554.29 398.37 554.07 398.66 554.26 398.90 554.26 399.04 553.95 399.25 553.87 399.41 553.53 399.37 553.42 399.76 553.02 400.14 552.66 400.27 552.43 400.63 552.18 400.78 551.82 400.84 551.71 401.24 551.55 401.34 551.10 401.28 551.19 401.66 551.36 401.85 551.70 401.71 551.99 402.10 552.40 402.35 552.73 402.24 552.91 402.47 553.13 402.61 553.26 403.05 553.67 403.15 553.84 403.10 554.16 403.21 554.37 403.49 554.84 403.70 555.33 403.80 555.75 403.69 555.87 403.80 556.26 403.60 556.45 403.32 557.31 403.27 557.80 403.38 558.29 403.60 558.41 403.58 558.67 403.32 559.00 403.51 559.28 403.48 559.58 403.23 559.85 403.47 559.83 403.64 560.42 403.51 560.67 403.33 560.89 403.36 561.18 403.12 561.44 403.17 561.55 403.37 562.11 403.34 562.33 403.49 562.32 403.82 562.84 403.93 562.83 404.21 562.97 404.33 563.32 404.10 563.55 404.13 563.59 403.96 563.93 404.04 564.30 403.81 564.72 403.79 565.02 403.47 565.49 403.29 565.88 403.69 566.26 403.61 566.40 403.65 566.21 404.18 566.26 404.52 566.10 404.62 566.11 404.88 566.25 405.37 566.24 405.54 566.48 405.91 566.51 406.14 565.95 406.29 565.75 406.55 565.49 406.45 565.03 406.38 564.71 406.69 564.37 406.81 564.15 407.03 563.83 407.08 563.55 407.31 562.65 407.65 562.27 407.55 562.04 407.59 561.71 407.46 561.36 407.38 561.04 407.43 560.00 407.87 559.64 407.80 559.10 408.13 558.81 408.11 558.46 408.23 558.47 408.50 558.22 408.52 558.04 408.69 558.20 408.94 558.17 409.09 558.40 409.29 558.54 409.21 559.53 409.12 559.90 408.94 560.16 408.88 560.34 409.04 560.28 409.28 560.56 409.68 560.25 409.86 559.91 409.82 559.65 410.22 559.29 410.35 558.98 410.38 558.64 410.28 558.42 410.42 557.80 410.62 557.53 410.75 557.39 410.92 556.75 411.33 556.90 411.62 556.66 411.78 556.48 411.70 556.22 411.98 555.77 412.12 555.61 412.47 555.85 412.59 556.05 412.88 556.51 412.94 556.60 413.14 557.25 413.14 557.59 413.01 557.81 413.14 558.18 412.99 558.17 413.44 557.67 413.60 557.56 413.79 557.91 414.26 558.03 414.36 558.37 414.06 558.43 413.86 558.59 413.79 558.93 413.87 559.30 413.50 559.60 413.54 559.79 413.87 560.06 414.22 560.30 414.36 560.46 414.20 561.14 413.94 561.56 413.59 561.59 413.28 561.83 413.29 562.01 413.13 562.52 412.88 562.69 412.58 563.30 412.62 563.59 412.56 564.08 412.40 564.35 412.36 564.64 412.48 564.71 412.63 564.17 412.96 563.95 413.21 564.26 413.38 564.16 413.84 563.92 414.02 564.09 414.26 564.06 414.55 563.94 414.75 563.55 414.87 563.22 415.36 563.11 415.44 562.74 415.48 562.51 415.66 561.99 415.69 561.94 415.51 561.65 415.56 561.39 415.90 560.08 416.40 560.13 416.82 560.10 417.14 560.26 417.31 560.88 417.18 561.04 417.46 560.87 417.71 560.29 418.13 559.85 418.27 559.53 418.50 559.61 418.90 559.81 419.06 559.83 419.26 559.50 419.57 559.01 419.88 558.99 420.05 559.35 420.42 559.59 420.86 559.57 421.08 559.27 421.53 558.96 421.64 558.64 421.62 558.37 421.78 558.38 422.14 558.89 422.44 558.95 422.62 558.81 423.32 559.31 423.66 560.05 423.94 560.10 424.05 560.00 424.39 560.35 424.94 560.37 425.10 559.92 425.53 559.48 425.76 559.40 426.09 559.66 426.47 560.08 426.67 560.75 426.72 560.92 426.83ZM114.36 404.82 113.29 405.65 112.04 407.51 111.46 407.76 111.62 407.93 112.11 407.93 112.37 408.08 112.98 408.08 113.59 407.73 113.77 407.80 114.09 407.68 114.54 407.79 114.86 407.93 115.10 407.86 115.55 407.84 116.01 407.64 116.49 407.69 116.70 407.55 116.99 407.65 117.23 407.93 117.64 408.17 117.49 408.36 118.06 408.78 118.33 409.18 118.73 409.43 119.04 409.73 119.79 410.17 119.97 410.21 120.47 410.57 120.93 411.20 121.43 411.50 121.60 411.78 121.85 412.01 122.08 412.02 122.30 412.23 122.36 412.54 122.51 412.85 122.50 413.27 122.42 413.47 122.60 414.34 122.70 414.57 122.44 414.88 122.43 415.37 122.92 415.98 123.29 416.06 123.69 415.99 124.35 416.08 124.97 415.93 125.24 415.80 125.76 415.87 126.17 415.84 126.97 415.85 127.71 415.65 128.26 415.62 128.62 415.70 128.83 413.51 123.09 409.73 119.94 407.64 115.44 405.58 115.53 404.30 114.91 404.40 114.36 404.82ZM127.67 415.93 127.46 415.99 127.21 415.94 126.45 416.12 125.44 416.04 125.18 416.12 124.36 416.23 123.89 416.15 123.27 416.23 123.03 416.35 123.72 417.14 124.26 417.54 124.44 417.79 124.87 418.20 125.29 418.71 128.31 418.99 128.60 415.96 128.29 415.91 127.67 415.93ZM455.70 416.41 456.11 417.23 454.02 417.31 453.72 417.17 452.99 416.60 453.01 416.87 453.52 417.33 453.07 417.35 453.15 419.47 449.12 419.61 448.89 419.47 448.51 418.98 448.41 419.05 448.72 419.74 448.78 420.32 449.33 420.87 449.56 420.88 458.43 430.97 458.97 430.93 459.42 429.52 458.21 425.84 458.29 423.93 458.71 424.06 458.71 423.34 458.65 422.93 458.45 422.57 458.34 422.51 458.36 422.02 458.70 422.30 458.75 422.13 458.37 421.77 458.46 419.51 458.50 419.37 458.11 419.06 456.18 417.15 455.93 416.73 455.90 416.59 455.70 416.41ZM114.69 410.36 114.90 408.23 114.66 408.00 114.29 407.94 114.09 408.02 113.41 407.98 113.01 408.26 112.75 408.35 112.41 408.30 112.12 408.15 111.92 408.15 111.73 408.37 111.28 408.32 110.82 408.34 110.31 408.58 110.06 408.58 109.82 408.71 109.61 408.55 109.53 408.45 109.11 408.76 108.82 408.53 108.61 408.82 108.43 410.50 114.61 411.13 114.69 410.36Z\"},\"18\":{\"name\":\"Terres-Cries-de-la-Baie-James\",\"path\":\"M146.95 719.83 147.26 719.92 146.81 720.82 146.22 720.62 146.05 720.72 145.56 720.52 145.30 720.48 145.06 720.21 144.95 720.21 144.75 719.96 144.49 719.81 144.68 719.55 145.07 719.39 145.99 719.48 146.15 719.60 146.36 719.57 146.47 719.74 146.95 719.83ZM127.37 718.92 127.15 719.13 127.16 718.68 127.01 718.61 127.09 718.39 127.13 718.02 127.30 717.87 127.61 717.83 127.66 718.08 127.44 718.48 127.37 718.92ZM142.75 718.64 142.88 718.61 143.07 718.89 143.27 719.03 143.46 719.36 143.94 719.51 143.87 719.81 143.58 720.19 141.33 719.40 141.55 719.39 141.66 719.04 141.91 718.91 142.10 719.06 142.28 719.44 142.44 719.39 142.70 718.96 142.61 718.76 142.75 718.64ZM139.93 718.43 140.13 718.39 140.19 718.63 140.61 718.47 141.06 718.52 141.70 718.78 141.66 718.92 141.16 719.34 141.10 719.32 139.25 719.17 139.41 719.00 139.80 718.95 139.99 718.63 139.93 718.43ZM128.14 720.68 127.95 720.55 127.92 720.22 127.80 719.88 128.04 719.90 128.26 720.07 128.45 719.99 128.71 719.60 128.83 719.16 128.73 718.65 128.90 718.55 129.00 718.28 128.89 718.10 129.24 717.71 129.11 717.47 129.14 717.17 129.53 717.12 129.88 717.19 130.09 717.31 130.66 717.39 130.90 717.64 131.54 717.53 131.78 717.66 131.58 717.81 131.66 718.21 131.42 718.54 129.72 718.40 128.29 720.53 128.14 720.68ZM137.81 717.78 137.87 718.05 138.27 718.03 139.08 717.91 139.36 718.08 139.57 718.11 139.70 718.31 139.65 718.51 139.79 718.76 139.37 718.94 139.07 719.16 131.59 718.55 131.91 718.36 132.07 718.09 132.24 718.00 132.65 717.96 133.27 717.99 133.76 717.95 134.75 718.11 135.15 718.02 135.82 717.93 135.96 718.09 136.41 717.98 136.80 718.01 137.71 717.92 137.81 717.78ZM148.02 714.73 148.36 714.21 148.88 713.94 151.15 716.51 150.55 716.63 150.12 716.54 149.77 716.66 149.70 716.60 149.39 716.84 149.36 717.46 149.25 717.68 148.86 717.63 148.57 717.88 148.46 718.20 148.15 718.10 148.09 717.79 147.93 717.92 148.01 718.21 148.40 718.31 148.74 719.16 148.62 719.32 148.25 719.46 148.07 719.71 147.44 719.83 146.62 719.53 146.16 719.32 145.74 719.05 145.03 719.22 144.71 719.21 144.42 719.46 144.07 719.33 144.29 718.63 144.56 718.44 145.11 717.88 145.85 717.49 146.18 717.37 146.66 717.08 147.34 716.55 147.55 716.44 147.80 715.93 148.09 715.61 148.10 715.31 147.97 714.92 148.02 714.73ZM144.69 708.16 144.65 707.88 148.56 708.18 155.22 708.68 155.09 710.33 155.00 710.35 154.81 710.72 154.82 710.90 155.04 711.02 154.87 713.20 154.44 713.25 153.54 713.04 152.77 712.39 152.62 712.32 151.78 712.19 150.47 712.04 150.27 712.09 149.51 712.65 149.40 712.78 149.24 713.24 148.74 713.86 148.22 714.12 147.89 714.63 147.82 715.07 147.94 715.52 147.65 715.86 147.47 716.27 146.54 716.96 146.08 717.23 145.82 717.32 145.03 717.74 144.29 718.46 144.07 718.93 143.99 719.29 143.72 719.28 143.73 718.93 144.14 718.60 144.01 718.13 144.19 717.80 143.66 717.91 143.58 718.18 143.32 718.33 142.95 718.31 142.59 718.42 142.53 718.56 142.22 718.55 142.00 718.63 141.73 718.56 141.71 718.42 141.45 718.20 141.13 718.32 140.45 718.08 140.15 718.01 140.09 717.85 140.23 717.60 140.11 717.39 139.93 717.63 139.66 717.31 139.34 717.25 139.12 717.33 138.74 717.67 138.10 717.62 138.08 717.35 137.79 717.40 137.63 717.24 137.40 717.45 136.13 717.48 136.06 717.37 135.09 717.29 134.74 717.23 134.59 717.32 134.26 717.30 133.51 717.43 133.24 717.35 132.43 717.38 132.10 717.36 131.60 717.21 131.16 717.29 130.98 717.38 130.85 717.16 130.24 717.05 129.75 716.79 128.75 716.84 128.61 716.76 128.41 717.13 128.27 717.08 127.71 717.40 127.75 717.03 127.67 716.76 127.46 716.94 127.59 717.07 127.16 717.63 126.85 717.86 126.57 717.91 126.26 717.40 125.97 717.49 125.87 716.86 126.05 716.55 127.75 716.69 127.83 715.72 127.98 715.73 128.14 713.79 131.36 714.05 136.10 714.44 142.01 714.91 141.95 715.72 143.54 715.84 143.60 715.08 144.09 715.12 144.62 708.29 144.69 708.16ZM186.32 708.78 186.57 709.15 185.75 709.71 185.25 709.53 185.15 709.26 184.86 709.23 185.25 708.97 185.50 709.34 186.32 708.78ZM218.31 681.52 218.45 681.58 218.34 682.01 218.16 681.72 218.31 681.52ZM222.67 687.98 222.84 688.16 223.11 688.09 223.05 689.34 222.75 689.33 222.56 688.91 222.37 688.78 222.23 688.94 222.02 688.85 221.92 688.65 222.08 688.47 221.98 688.22 222.01 687.99 222.21 687.84 222.20 687.66 221.93 687.67 221.71 687.51 221.86 686.73 221.86 686.47 221.71 686.23 221.67 685.88 221.46 685.75 221.23 685.42 221.17 685.12 220.93 685.02 220.81 684.79 220.57 684.57 220.32 684.50 220.33 684.05 220.46 683.99 220.95 683.42 221.36 683.22 221.34 682.34 221.69 681.57 221.89 681.73 222.00 682.51 221.81 682.96 221.57 683.23 221.54 683.48 221.67 683.75 221.84 683.51 222.03 683.43 221.86 684.05 222.17 684.39 221.78 684.61 221.93 684.83 222.44 685.09 222.59 685.50 222.57 685.89 222.46 686.14 222.57 686.59 222.47 686.79 222.57 687.28 222.54 687.61 222.67 687.98ZM219.93 689.34 219.67 689.24 219.40 689.77 219.63 690.06 219.57 690.37 219.45 690.58 219.73 690.84 219.71 691.10 219.53 691.40 219.28 691.54 219.65 691.67 219.51 691.85 219.36 692.45 219.68 692.61 219.80 692.48 220.06 692.49 220.58 692.79 220.62 693.01 220.47 695.54 215.99 695.32 213.88 694.38 213.66 694.26 213.62 694.11 213.32 694.13 210.08 692.68 207.69 691.59 207.91 691.41 208.14 691.08 208.60 690.68 208.63 690.41 208.84 690.30 208.98 690.44 209.21 690.37 209.29 690.05 209.60 690.21 209.54 689.93 209.59 689.63 210.00 688.93 210.11 688.54 210.85 688.28 210.96 688.14 211.58 688.02 211.38 687.72 211.17 687.82 210.97 687.78 210.98 687.52 211.28 687.53 211.55 687.16 211.41 686.94 211.60 686.71 211.60 686.23 211.68 686.10 211.60 685.69 211.72 685.43 211.89 685.32 211.96 684.76 212.14 684.61 212.32 684.29 212.42 683.82 212.94 683.53 213.23 683.16 213.82 682.52 214.49 681.95 214.69 681.61 214.89 681.40 215.26 681.26 215.44 681.06 216.05 680.74 216.15 680.60 216.53 680.38 216.72 680.34 217.00 680.54 217.03 680.88 217.32 681.10 217.21 681.69 217.38 681.64 217.84 681.93 217.93 682.33 218.04 682.47 218.02 682.72 218.31 683.14 218.52 683.05 218.48 683.42 218.20 683.77 218.24 683.91 218.79 683.96 218.94 683.65 218.92 683.37 218.78 683.22 218.96 682.88 219.22 683.06 219.38 683.00 219.44 682.50 219.19 682.48 219.07 682.58 218.92 682.32 219.83 681.42 219.80 680.96 219.88 680.74 220.06 680.57 220.28 680.19 220.45 679.57 220.20 679.52 220.21 679.78 220.09 680.03 219.92 679.97 219.77 680.20 219.47 680.46 219.35 680.46 219.05 681.16 218.79 680.69 218.45 680.81 218.58 680.27 218.95 679.82 218.96 679.51 218.85 679.35 219.10 679.01 218.67 679.00 218.30 679.11 218.50 678.70 218.96 678.41 218.99 678.14 219.14 677.73 218.98 677.51 219.10 676.85 219.25 676.29 219.60 675.84 219.79 675.34 220.00 675.59 219.95 675.84 219.71 676.37 220.02 676.38 220.12 676.78 220.47 676.18 220.17 676.08 220.30 675.62 220.54 675.58 220.44 675.35 220.16 674.97 220.61 674.41 220.82 674.07 220.50 673.91 220.77 673.74 220.87 673.09 221.04 672.68 221.30 672.53 221.39 672.79 221.34 672.97 221.46 673.14 221.33 673.71 221.52 673.74 221.63 673.53 221.62 673.14 221.90 672.62 221.80 672.56 221.99 672.14 222.29 671.95 221.95 672.52 221.98 672.79 222.19 672.72 222.45 671.84 222.87 671.20 222.99 671.16 223.30 670.71 223.32 670.47 223.49 670.24 223.67 670.26 223.97 669.95 224.04 670.08 223.82 670.63 223.80 670.97 223.91 671.14 223.59 671.28 223.83 671.74 223.72 671.96 223.36 672.33 223.41 672.55 223.18 672.74 223.32 673.02 223.38 673.41 223.33 673.66 223.14 673.51 223.02 673.70 222.63 674.06 222.59 674.25 222.29 674.62 222.08 675.08 222.05 675.45 221.63 676.22 221.49 676.34 221.50 676.72 221.29 677.23 221.32 677.55 220.98 678.19 221.04 678.43 220.82 678.76 220.66 679.12 221.12 679.02 221.34 679.29 221.23 679.49 221.26 679.87 221.03 680.11 220.91 680.50 220.67 680.98 220.51 681.64 220.29 681.88 220.63 681.95 220.69 682.12 220.56 682.32 220.84 682.56 220.85 682.80 220.66 683.07 220.46 683.62 220.34 683.71 220.21 684.10 220.28 684.22 220.09 684.38 219.78 684.21 219.46 684.56 219.74 684.68 219.37 684.89 219.46 685.04 219.09 685.33 219.32 685.43 219.51 685.35 219.76 685.54 219.89 685.36 220.13 685.37 220.37 685.04 220.63 685.61 220.77 685.76 220.75 686.04 220.91 686.07 220.88 686.70 220.97 686.81 220.79 687.28 220.97 687.22 221.11 687.36 221.06 687.86 220.43 688.12 220.55 687.67 220.46 687.51 220.42 687.14 220.14 687.20 219.95 687.69 219.63 687.42 219.33 687.03 219.44 686.79 219.19 686.71 218.99 686.37 218.89 686.37 218.76 686.72 218.88 686.80 218.93 687.08 218.68 687.43 218.90 687.64 219.13 688.17 219.02 688.36 219.05 688.62 219.17 688.77 219.03 689.02 219.49 689.19 219.66 689.14 219.66 688.87 219.86 688.59 219.98 688.04 220.10 688.26 219.84 688.95 219.93 689.34ZM230.19 663.57 230.31 663.54 230.31 663.98 230.89 664.28 230.67 664.91 230.46 665.24 230.21 665.32 230.12 665.64 229.89 665.72 230.08 665.26 229.83 665.26 229.56 666.06 229.56 666.51 229.70 666.61 229.89 666.17 230.12 666.28 230.69 665.76 230.95 665.63 230.89 665.42 231.00 665.09 231.24 664.72 231.46 664.54 231.57 664.63 232.91 665.32 233.11 665.31 233.19 665.46 234.43 666.09 233.67 666.23 233.65 666.74 233.35 666.96 233.09 667.05 232.84 667.38 233.16 667.69 232.59 667.94 232.42 667.82 232.18 668.16 232.10 668.54 232.37 668.48 232.49 668.34 232.44 668.09 232.76 668.13 233.07 667.94 233.29 667.91 233.39 667.35 233.75 667.19 234.13 667.27 233.76 667.56 233.89 667.91 234.08 667.57 234.66 667.53 234.66 667.18 234.88 666.73 237.73 668.08 237.84 668.26 237.83 668.45 237.61 668.77 238.13 668.57 238.22 668.32 239.87 669.11 239.40 669.62 239.25 670.09 238.70 670.79 238.61 670.99 238.25 671.35 238.06 671.43 237.82 671.76 237.74 671.99 237.15 672.67 237.00 672.72 236.88 672.92 236.30 673.46 236.22 673.64 236.13 674.44 235.98 674.72 235.58 674.90 235.41 675.47 235.15 675.81 235.14 675.92 234.76 676.05 234.08 676.60 233.87 676.90 233.29 677.40 233.16 677.57 232.82 678.19 232.69 678.26 231.80 679.03 231.49 679.04 231.04 679.67 230.93 679.99 231.03 680.38 230.83 680.77 230.36 681.40 229.95 682.17 229.72 682.48 229.31 682.81 229.30 682.93 228.98 683.20 228.82 683.46 226.05 684.60 224.53 687.25 224.29 687.36 224.17 687.52 223.77 687.55 224.00 687.22 223.70 687.22 223.64 687.39 223.36 687.34 223.44 686.87 223.41 686.70 223.71 686.03 224.03 686.22 224.19 685.98 224.42 686.13 224.54 685.97 224.30 685.63 223.94 685.41 223.72 685.44 223.80 684.87 223.67 684.65 223.24 684.73 223.25 685.00 223.56 685.27 223.46 685.63 223.34 685.81 223.13 685.77 223.16 685.28 223.13 685.01 222.90 684.85 222.78 684.55 222.79 684.21 223.14 683.47 222.42 683.67 222.32 683.89 222.11 683.90 222.31 682.75 222.34 682.27 222.44 682.17 222.83 682.12 222.90 682.03 222.33 681.73 222.37 681.47 222.64 681.73 222.93 681.68 222.97 681.25 223.50 680.20 223.47 679.81 223.26 680.01 223.04 680.46 222.69 680.68 222.56 680.60 222.73 679.59 222.68 679.50 222.74 678.99 223.10 678.51 222.82 678.41 222.85 678.22 223.01 678.12 222.99 677.77 222.78 677.62 222.55 677.58 222.64 677.27 222.52 677.13 222.63 676.95 222.67 676.66 222.85 676.27 223.21 675.66 223.04 675.41 223.23 675.19 223.10 674.81 223.47 674.57 223.79 674.29 223.82 674.07 223.54 674.11 223.27 673.99 223.62 673.49 224.01 673.50 224.30 673.30 224.36 673.71 224.16 674.03 223.93 674.21 224.03 674.36 223.91 674.56 224.04 674.76 224.32 674.55 224.52 674.26 224.46 674.17 224.53 673.77 224.45 673.54 224.56 673.42 224.58 673.13 224.78 672.91 224.44 672.85 224.53 672.65 224.80 672.34 225.00 672.02 225.08 672.24 225.31 671.63 225.29 671.35 225.54 670.90 225.69 670.75 226.05 670.59 226.37 669.90 226.53 669.66 226.48 669.49 226.60 669.32 226.83 668.73 227.35 668.74 227.41 668.94 227.63 668.77 228.06 668.17 228.23 668.18 228.34 667.81 228.10 667.89 227.96 667.78 227.82 668.22 227.60 668.46 227.92 667.59 227.98 667.21 228.13 666.86 228.71 666.84 229.01 666.45 229.08 665.94 229.23 665.80 229.02 665.65 228.85 665.35 228.94 665.11 229.21 664.65 229.38 664.60 229.52 664.30 229.22 664.12 229.51 663.57 230.14 663.89 230.19 663.57ZM57.94 623.34 57.21 629.87 56.72 634.22 56.04 633.90 55.59 633.96 55.12 633.66 55.23 633.41 55.04 633.10 54.88 633.05 54.98 632.70 54.61 632.26 54.16 632.12 53.70 631.66 53.37 631.63 53.20 631.42 53.21 630.68 52.97 630.20 52.78 630.19 52.24 629.89 52.00 629.85 51.52 629.64 51.30 629.47 51.08 629.16 51.29 628.77 51.20 628.58 51.00 628.45 51.10 628.00 50.88 627.43 50.50 627.03 49.83 626.63 49.58 626.29 49.38 625.86 49.29 625.29 49.36 625.08 49.38 624.14 49.60 623.78 49.91 623.08 50.16 622.59 50.20 622.09 50.48 621.31 50.61 621.13 51.07 620.85 51.41 620.49 51.72 620.05 51.87 619.48 51.73 619.25 51.95 619.08 52.28 619.15 52.44 618.99 52.88 619.27 52.89 619.38 53.15 619.65 53.04 619.94 53.17 620.25 53.45 620.51 53.93 620.74 54.56 620.86 55.31 621.11 56.04 621.17 56.49 621.50 57.10 621.68 57.81 621.76 58.28 621.73 58.40 621.84 58.83 622.02 59.20 622.10 59.72 622.13 59.96 622.24 60.55 622.14 60.85 622.25 61.08 622.18 61.79 622.46 61.99 622.49 62.21 622.39 62.62 622.65 62.75 622.63 63.06 622.87 63.39 622.97 63.36 623.24 58.02 622.64 57.94 623.34ZM60.03 613.39 60.53 613.55 60.89 613.73 61.50 614.16 61.72 614.37 62.05 614.52 62.22 614.72 62.58 614.97 62.81 615.26 63.06 615.38 63.63 615.75 63.84 615.83 63.74 616.08 63.86 616.62 64.24 617.08 64.30 617.49 64.56 617.82 63.95 623.31 63.68 623.28 63.57 622.92 63.61 622.72 63.42 622.59 63.13 622.56 62.86 622.37 62.50 622.39 62.36 622.20 61.96 622.30 61.66 622.24 61.41 622.08 61.08 621.97 60.87 621.83 60.31 621.74 60.15 622.02 59.76 621.83 59.49 621.82 59.15 621.71 58.32 621.56 58.11 621.58 57.58 621.46 56.89 621.21 56.63 621.20 56.14 621.01 55.45 620.83 54.85 620.75 53.59 620.23 53.25 619.78 53.33 619.56 53.16 619.37 53.20 619.15 53.03 618.83 52.88 618.75 52.25 618.57 52.05 618.35 51.71 618.27 51.51 618.15 51.11 617.31 51.34 616.59 51.45 616.45 51.87 616.20 52.30 615.85 52.59 615.83 52.92 615.63 53.39 615.03 54.10 614.29 54.34 613.98 55.09 613.35 55.86 612.47 56.16 612.28 56.46 612.00 56.86 611.76 57.25 611.96 57.62 612.08 58.47 612.17 58.44 612.51 58.58 612.64 59.18 612.73 59.42 613.21 59.82 613.29 60.03 613.39ZM59.20 611.18 59.16 611.58 58.97 611.69 58.73 611.62 58.29 611.30 57.58 611.17 56.96 611.21 56.12 611.48 55.79 611.43 55.30 611.20 54.97 610.98 54.39 610.46 54.38 610.12 54.83 609.53 54.93 609.03 54.82 607.47 58.07 607.84 58.64 608.02 59.47 608.82 59.20 611.18ZM139.26 606.89 140.60 605.42 143.79 605.68 143.60 606.05 143.59 606.29 143.38 606.74 143.66 607.01 143.87 606.99 144.12 607.19 144.10 607.40 144.35 607.61 144.38 607.81 144.29 608.05 144.09 608.24 144.06 608.40 143.62 608.62 143.33 608.90 142.81 609.59 142.67 609.92 142.55 609.93 142.28 609.73 142.01 609.83 141.59 610.31 141.02 610.73 140.65 610.92 140.19 611.00 140.00 611.14 140.13 611.45 140.02 611.77 140.17 611.97 140.59 612.12 140.52 612.90 140.75 613.21 140.42 613.36 140.18 613.33 139.91 613.05 139.58 613.03 138.78 613.22 138.44 613.38 137.69 613.15 137.41 613.23 137.25 612.35 137.13 612.10 136.69 611.77 136.61 611.61 136.30 611.68 135.75 611.56 135.46 611.65 135.39 611.34 135.87 610.91 136.19 610.88 136.30 610.63 136.19 610.45 136.16 609.89 136.26 609.62 136.50 609.40 136.54 609.22 137.61 608.05 138.07 607.99 137.97 607.82 138.19 607.47 138.56 607.50 138.83 607.36 139.26 606.89ZM72.15 572.38 72.55 572.63 72.97 572.76 73.38 572.77 73.73 572.85 74.30 572.90 74.54 572.99 75.68 573.23 76.28 573.11 76.83 573.10 77.43 573.14 77.78 573.21 78.21 573.36 79.18 573.53 79.39 573.68 79.99 573.42 80.38 573.29 81.65 573.41 81.96 573.22 82.37 573.25 82.47 573.41 82.73 573.24 83.24 573.16 83.60 573.00 83.91 573.08 84.08 573.03 84.38 573.36 84.39 573.56 84.72 573.68 85.03 573.74 85.23 574.02 85.87 574.30 86.81 574.53 87.07 574.51 87.47 574.63 88.37 574.76 88.52 574.94 88.39 576.10 87.78 582.03 80.10 581.22 80.19 580.31 79.97 580.07 80.26 579.67 80.56 576.85 76.58 576.42 69.46 575.64 69.38 576.37 67.69 576.19 67.75 575.93 68.07 575.38 68.13 575.05 68.38 574.53 68.38 574.14 68.28 573.50 68.08 573.25 68.04 573.05 67.84 572.98 67.70 572.75 67.84 572.58 67.99 572.23 67.95 571.84 68.18 571.90 68.42 571.80 68.69 571.79 69.03 571.61 69.28 571.59 69.73 571.36 70.29 571.43 70.54 571.72 70.99 571.81 71.55 572.00 72.15 572.38ZM70.00 567.86 70.14 567.70 71.61 567.86 74.05 570.39 73.79 572.39 73.08 572.35 72.86 572.24 72.63 571.93 72.35 571.74 71.89 571.23 71.68 570.89 71.14 570.60 70.86 570.54 70.74 570.62 70.50 570.55 69.47 570.67 69.32 570.76 69.08 570.63 68.77 570.61 68.53 570.70 68.42 570.62 68.53 570.37 68.53 570.15 68.33 569.97 68.43 569.66 68.27 569.38 68.20 569.23 68.24 569.17 68.17 569.12 68.15 569.02 68.20 568.93 68.06 568.84 68.81 568.45 68.92 568.52 69.50 568.08 69.83 567.88 70.00 567.86ZM59.20 524.30 59.73 523.69 63.70 524.15 68.34 524.68 74.50 525.37 73.81 531.60 73.40 531.82 73.14 531.75 73.05 531.91 72.84 531.88 72.34 532.01 72.13 532.15 71.73 532.32 71.35 532.57 71.04 532.91 70.95 533.28 70.36 533.51 69.89 533.90 69.68 533.97 69.44 533.88 69.32 533.69 68.95 533.75 68.66 533.68 68.51 533.55 68.62 533.21 68.28 533.22 68.12 533.14 67.93 533.26 67.42 533.38 67.33 533.54 67.05 533.46 67.09 533.26 66.97 533.12 66.71 533.29 66.49 533.68 66.23 533.81 66.25 534.10 66.55 534.48 66.55 534.60 66.92 535.02 66.83 535.42 66.95 535.54 66.84 535.87 67.02 536.16 66.87 536.38 66.59 536.54 66.52 536.41 66.21 536.73 65.74 536.74 65.42 536.85 65.07 536.72 64.70 537.12 64.59 537.05 63.91 537.04 63.72 537.08 63.56 536.86 63.28 537.00 63.03 536.88 63.04 536.65 62.87 536.17 62.57 536.17 62.62 535.88 62.34 535.85 62.27 536.02 61.84 536.26 61.56 536.24 61.55 536.09 61.76 535.84 62.06 535.82 62.35 535.69 62.36 535.34 62.14 535.25 61.63 535.71 61.63 535.48 61.50 535.31 61.45 534.96 61.21 535.13 61.12 534.97 61.23 534.74 61.47 534.56 61.71 534.20 61.48 533.83 61.26 533.70 60.50 533.87 60.45 533.63 60.61 533.26 61.02 533.17 61.17 532.92 61.63 532.71 61.79 532.79 62.03 532.64 61.90 532.38 61.87 532.06 62.14 531.89 62.59 531.87 62.65 531.96 63.11 531.71 63.38 531.63 63.41 531.33 63.98 531.38 64.04 531.63 64.24 531.83 64.48 531.69 64.81 531.75 65.16 531.59 64.94 531.23 65.15 531.05 64.93 530.91 64.44 530.93 63.86 530.82 63.63 530.89 63.14 530.44 63.33 530.25 63.91 530.29 64.11 529.99 64.33 530.05 64.58 529.88 64.48 529.75 63.50 529.64 63.26 529.67 62.70 529.52 62.94 529.29 63.26 529.43 63.56 529.30 63.90 529.38 64.08 529.26 64.03 529.01 63.85 528.97 63.50 529.11 63.10 528.68 62.94 528.42 63.21 528.19 63.17 527.97 62.87 528.01 62.28 528.35 62.70 528.77 62.61 528.97 62.09 528.88 61.99 529.09 62.41 529.00 62.11 529.66 61.81 529.72 61.55 529.38 60.79 529.43 60.39 529.40 60.78 529.01 60.29 528.99 59.87 528.84 60.05 528.56 59.96 528.44 59.75 528.52 59.34 528.50 59.18 528.38 59.09 528.16 58.87 528.12 58.80 527.78 58.48 527.68 58.43 527.40 58.62 527.09 58.82 526.99 59.03 527.06 59.48 527.05 59.81 526.84 59.59 526.55 59.01 526.38 59.14 526.29 59.56 526.38 59.86 526.29 60.05 526.51 60.24 526.49 60.40 526.34 60.61 526.46 60.97 525.93 61.02 525.48 60.83 525.03 60.55 524.74 60.33 524.60 59.88 524.48 59.54 524.64 59.48 524.84 59.22 524.93 58.76 524.74 58.92 524.56 58.90 524.32 59.20 524.30ZM86.50 493.48 87.31 493.36 87.59 493.08 89.82 492.95 89.70 494.05 89.41 494.23 88.95 494.12 88.55 494.17 88.22 494.07 87.69 494.12 87.37 493.95 85.33 494.23 85.07 494.22 84.73 494.36 84.21 494.38 83.97 494.53 83.61 494.50 83.28 494.57 82.78 494.45 82.38 494.41 82.13 494.14 81.90 494.09 81.06 494.25 80.89 494.21 80.56 493.91 80.20 493.86 79.75 493.62 79.45 493.67 79.08 493.48 78.89 493.46 77.97 493.48 77.63 493.37 77.34 493.13 77.23 492.89 76.65 492.33 76.41 491.88 76.42 491.65 76.72 491.11 78.56 493.00 82.90 493.96 86.50 493.48ZM60.06 490.64 59.82 490.25 59.61 490.16 59.23 490.22 59.05 490.16 58.98 489.84 58.81 489.55 58.24 489.47 57.76 489.67 57.83 489.38 57.75 489.11 58.58 489.13 58.70 488.86 59.10 489.01 59.45 489.28 59.57 489.47 59.48 489.66 59.74 489.73 59.88 490.01 60.11 490.05 60.55 490.43 60.06 490.64ZM80.42 490.37 80.16 490.59 79.61 490.62 79.71 490.40 80.12 490.44 80.42 490.37ZM77.63 490.20 78.02 490.27 78.26 490.47 78.21 490.63 78.90 490.81 78.86 490.91 79.34 491.05 79.31 490.82 79.89 490.81 80.22 490.75 80.57 490.60 81.09 490.53 81.28 490.56 81.83 490.44 82.48 490.23 82.92 490.27 83.12 490.46 83.13 490.64 83.32 490.86 83.61 490.90 83.81 490.74 83.85 490.59 84.37 490.54 85.29 490.87 85.86 491.00 86.07 491.32 86.60 491.52 87.05 491.51 87.08 491.34 87.59 491.42 87.43 491.66 86.77 491.63 86.83 491.85 87.03 491.76 87.23 491.88 87.34 491.79 87.74 491.76 88.16 491.40 88.53 491.29 88.60 491.34 89.15 491.23 89.37 491.38 89.58 491.21 89.99 491.35 89.82 492.91 87.57 493.05 87.29 493.33 82.90 493.92 78.58 492.96 76.74 491.08 76.77 490.91 76.69 490.48 77.47 490.57 77.51 490.21 77.63 490.20ZM65.93 484.37 66.20 484.58 66.45 484.91 66.39 485.20 66.43 485.40 66.68 485.74 66.94 485.99 66.97 486.34 67.16 486.67 67.59 487.11 68.15 487.25 68.68 487.49 69.08 487.63 69.68 487.71 70.53 488.05 70.97 488.45 71.38 488.49 72.20 488.65 72.79 488.94 73.11 489.24 73.58 489.37 73.91 489.52 74.41 489.38 75.29 489.43 75.57 489.47 75.53 489.85 75.96 490.40 76.58 490.47 76.71 491.09 76.40 491.63 76.36 491.80 76.43 492.10 75.94 491.79 75.87 491.45 75.49 490.91 74.89 490.66 74.48 490.24 74.01 490.18 73.62 489.52 73.35 489.38 72.98 489.45 72.72 489.41 72.14 489.49 71.79 489.36 71.60 489.01 71.37 488.90 70.95 488.95 70.44 488.59 69.61 488.45 69.05 488.05 68.39 487.83 67.63 487.42 67.18 487.25 66.60 486.80 66.56 486.67 66.61 486.32 66.51 486.13 66.30 486.00 66.16 485.54 65.95 485.34 65.34 485.19 65.29 485.13 65.31 484.56 65.66 484.28 65.93 484.37ZM87.50 494.21 87.72 494.29 88.17 494.23 88.48 494.34 88.93 494.31 89.38 494.40 89.68 494.30 89.23 498.45 85.93 498.10 85.58 501.40 80.84 500.89 80.63 500.64 80.20 500.62 79.59 500.82 78.78 500.94 78.38 500.81 78.09 500.92 77.98 501.05 77.70 501.13 77.35 501.06 77.24 500.95 76.82 500.86 76.76 500.97 76.26 501.14 75.91 501.13 75.52 500.75 75.02 500.54 74.92 500.38 74.71 500.35 74.29 500.44 73.79 500.61 72.81 500.59 72.62 500.52 72.42 500.59 72.34 500.75 72.16 500.77 71.97 500.59 71.95 500.17 70.93 499.61 70.53 499.59 70.36 499.75 69.93 499.46 69.79 499.42 69.35 499.54 68.96 499.46 68.78 499.53 67.91 499.56 67.66 499.46 67.37 499.14 67.46 498.96 67.27 498.83 66.82 498.84 66.47 498.66 66.15 498.30 65.92 498.26 65.62 498.34 65.37 498.30 65.17 497.89 65.20 497.71 64.94 497.59 64.77 497.67 64.37 497.38 64.08 497.38 64.04 497.62 63.81 497.75 63.77 497.37 63.58 497.09 63.35 497.10 63.03 496.95 63.18 496.83 63.27 496.58 62.84 496.41 63.30 496.03 63.37 495.76 63.28 495.67 62.75 495.67 62.46 495.82 62.37 495.62 62.56 495.39 62.49 495.14 62.23 495.02 62.00 495.21 61.85 495.17 62.10 494.64 61.86 494.56 61.73 494.76 61.42 494.81 61.58 495.07 61.43 495.23 61.00 495.38 61.00 495.55 61.27 495.68 60.98 495.86 60.87 496.10 60.53 495.80 60.10 495.70 59.93 495.90 59.51 495.78 59.51 495.48 59.81 495.33 60.13 495.24 60.10 494.94 59.99 494.52 60.30 494.31 60.62 493.77 60.73 493.91 61.09 493.78 61.40 493.87 61.09 494.15 60.95 494.02 60.76 494.28 60.34 494.55 60.42 494.83 60.54 494.94 60.77 494.90 60.91 494.72 61.25 494.75 61.33 494.66 61.16 494.33 61.55 494.45 61.65 494.30 61.50 494.03 61.55 493.73 61.89 493.61 62.18 493.68 62.16 493.26 61.48 493.09 61.19 493.13 60.60 492.95 60.95 492.69 61.00 492.82 61.30 492.77 61.46 492.58 61.36 492.33 60.97 492.33 60.69 491.82 61.00 491.81 61.35 491.95 61.58 491.87 61.68 491.97 61.99 491.79 62.13 491.57 62.41 491.40 62.31 491.00 62.34 490.57 61.76 490.66 61.41 490.63 61.24 490.82 61.14 490.60 60.81 490.55 60.86 490.20 60.67 490.05 60.43 490.14 59.82 489.65 59.61 489.26 59.79 489.22 60.40 489.27 60.39 489.45 60.72 489.65 60.96 489.54 61.33 489.76 61.99 490.00 62.20 490.01 62.18 489.77 61.90 489.84 61.15 489.50 61.02 488.98 60.82 488.95 60.64 489.13 59.97 488.97 60.07 488.78 60.52 488.92 61.05 488.59 61.82 488.66 61.86 488.27 61.66 488.17 61.26 488.17 60.74 487.85 60.74 487.51 60.45 487.45 60.35 487.24 60.48 486.80 60.18 486.58 60.23 486.44 60.46 486.34 60.68 486.57 60.94 486.61 61.16 486.42 61.21 486.12 61.40 486.13 61.58 485.99 61.69 485.41 61.86 485.10 61.66 485.00 60.92 484.81 60.60 484.95 60.47 484.58 60.68 484.47 60.85 484.50 61.00 484.23 61.07 483.86 61.67 483.97 61.98 483.60 62.44 483.56 62.94 483.73 63.34 483.80 63.61 483.45 64.09 484.05 64.67 484.20 64.83 484.15 65.05 483.91 65.35 483.83 65.35 484.07 65.48 484.19 65.22 484.36 65.14 484.56 65.12 485.13 65.30 485.36 65.91 485.51 65.99 485.58 66.17 486.12 66.44 486.39 66.38 486.64 66.49 486.93 67.08 487.39 67.53 487.56 68.42 488.04 68.99 488.21 69.31 488.48 69.58 488.62 70.41 488.76 70.77 489.08 70.98 489.13 71.40 489.07 71.73 489.52 72.27 489.68 72.73 489.58 73.00 489.62 73.32 489.56 73.47 489.61 73.86 490.27 74.11 490.39 74.37 490.38 74.64 490.68 74.91 490.86 75.40 491.07 75.66 491.41 75.77 491.85 75.91 492.00 76.20 492.14 77.11 493.02 77.22 493.25 77.67 493.60 77.95 493.65 78.86 493.63 79.07 493.66 79.41 493.84 79.81 493.81 80.11 494.00 80.44 494.04 80.79 494.35 81.08 494.42 81.93 494.26 82.04 494.29 82.39 494.61 82.78 494.62 83.34 494.73 83.59 494.63 84.09 494.68 84.30 494.53 84.74 494.54 85.12 494.37 85.39 494.39 87.39 494.12 87.50 494.21ZM63.22 483.67 62.71 483.47 62.43 483.28 61.84 483.34 61.42 483.49 61.15 483.03 61.24 482.82 61.72 482.77 61.91 482.84 62.21 482.81 62.77 482.63 63.56 482.63 63.74 482.78 63.99 483.45 64.10 483.45 64.71 483.71 64.60 484.08 64.33 484.00 64.12 483.83 63.74 483.30 63.49 483.30 63.34 483.63 63.22 483.67ZM60.48 478.60 60.63 478.74 61.21 479.05 61.39 478.99 61.73 479.06 62.03 478.81 62.50 478.81 62.57 479.28 63.22 479.46 63.56 479.62 63.89 479.45 63.84 479.81 64.52 480.04 64.95 479.91 65.19 479.58 68.21 485.89 67.53 486.21 67.25 485.51 66.95 485.11 66.59 484.43 66.37 484.25 66.18 483.69 66.04 483.47 65.73 483.22 65.42 482.74 65.17 482.56 64.86 482.53 64.44 482.37 64.42 482.28 63.87 482.24 63.26 482.04 63.08 481.91 62.94 482.01 62.62 481.87 62.27 482.09 62.11 481.93 61.41 481.94 61.36 481.49 61.14 481.20 61.00 481.15 61.00 480.90 60.85 480.65 61.21 480.55 61.29 480.81 61.50 480.76 61.45 480.28 61.69 480.34 61.75 479.97 61.56 480.01 61.19 479.87 60.56 479.78 60.91 479.40 60.46 479.05 60.48 478.60ZM127.67 415.93 128.29 415.91 128.60 415.96 128.31 418.99 125.29 418.71 124.87 418.20 124.44 417.79 124.26 417.54 123.72 417.14 123.03 416.35 123.27 416.23 123.89 416.15 124.36 416.23 125.18 416.12 125.44 416.04 126.45 416.12 127.21 415.94 127.46 415.99 127.67 415.93ZM114.69 410.36 114.61 411.13 108.43 410.50 108.61 408.82 108.82 408.53 109.11 408.76 109.53 408.45 109.61 408.55 109.82 408.71 110.06 408.58 110.31 408.58 110.82 408.34 111.28 408.32 111.73 408.37 111.92 408.15 112.12 408.15 112.41 408.30 112.75 408.35 113.01 408.26 113.41 407.98 114.09 408.02 114.29 407.94 114.66 408.00 114.90 408.23 114.69 410.36ZM114.36 404.82 114.91 404.40 115.53 404.30 115.44 405.58 119.94 407.64 123.09 409.73 128.83 413.51 128.62 415.70 128.26 415.62 127.71 415.65 126.97 415.85 126.17 415.84 125.76 415.87 125.24 415.80 124.97 415.93 124.35 416.08 123.69 415.99 123.29 416.06 122.92 415.98 122.43 415.37 122.44 414.88 122.70 414.57 122.60 414.34 122.42 413.47 122.50 413.27 122.51 412.85 122.36 412.54 122.30 412.23 122.08 412.02 121.85 412.01 121.60 411.78 121.43 411.50 120.93 411.20 120.47 410.57 119.97 410.21 119.79 410.17 119.04 409.73 118.73 409.43 118.33 409.18 118.06 408.78 117.49 408.36 117.64 408.17 117.23 407.93 116.99 407.65 116.70 407.55 116.49 407.69 116.01 407.64 115.55 407.84 115.10 407.86 114.86 407.93 114.54 407.79 114.09 407.68 113.77 407.80 113.59 407.73 112.98 408.08 112.37 408.08 112.11 407.93 111.62 407.93 111.46 407.76 112.04 407.51 113.29 405.65 114.36 404.82Z\"},\"01\":{\"name\":\"Bas-Saint-Laurent\",\"path\":\"M444.60 818.84 439.59 818.99 436.41 819.09 427.17 819.34 425.30 819.38 425.41 823.96 415.83 824.17 416.15 839.31 416.25 844.07 413.24 847.21 409.47 851.13 401.00 855.55 392.03 858.23 391.64 858.35 391.71 858.04 391.49 857.52 391.52 856.14 391.50 854.77 391.47 854.17 391.72 853.79 391.97 853.81 391.99 853.65 391.78 853.41 391.88 852.88 392.14 852.48 392.14 852.06 391.89 852.02 391.99 851.66 391.73 851.55 391.28 851.10 390.72 851.39 390.43 851.60 389.82 851.43 389.78 851.18 389.57 851.25 389.44 850.97 389.06 850.77 388.91 850.58 388.15 850.40 388.03 850.26 387.82 850.24 387.60 850.10 387.38 850.18 386.89 849.83 386.49 849.90 386.36 850.01 386.16 849.90 385.81 850.10 385.78 849.99 385.34 849.85 385.09 849.68 370.30 871.33 367.85 869.08 365.54 866.92 363.48 865.03 361.94 863.56 360.77 862.43 358.80 860.53 357.28 859.04 356.15 859.76 353.33 856.99 352.78 856.43 348.93 852.44 350.71 850.19 351.24 849.39 351.53 848.82 351.75 848.29 352.19 846.96 352.61 845.91 352.91 845.32 353.46 844.39 353.83 843.88 354.38 843.19 354.73 842.81 355.28 842.29 355.86 841.79 357.13 840.77 357.66 840.28 358.14 839.76 358.57 839.25 359.30 838.25 359.74 837.51 360.09 836.84 360.56 835.73 361.14 833.91 361.79 832.15 362.18 831.19 362.92 829.60 363.40 828.64 363.83 827.88 364.82 826.17 365.70 824.61 366.08 823.96 366.58 823.19 367.03 822.57 367.54 821.93 368.29 821.10 368.93 820.49 369.61 819.93 371.69 818.51 372.41 817.90 372.86 817.46 373.58 816.70 375.51 814.42 376.58 813.12 377.69 811.75 378.30 810.98 379.27 809.81 380.52 808.35 382.03 806.63 382.27 806.34 384.27 804.13 385.93 802.36 388.25 799.98 390.09 798.01 390.55 797.49 392.73 795.23 396.51 791.57 397.37 790.77 400.52 787.80 402.65 785.80 405.38 783.51 408.27 780.99 411.80 778.12 414.09 776.49 417.44 774.15 419.43 772.92 422.30 771.13 425.14 769.53 427.25 768.42 428.51 767.80 434.95 764.16 437.57 762.65 440.79 760.88 442.96 759.76 444.60 759.02 445.99 758.45 447.33 757.92 448.89 757.38 451.27 756.65 452.18 756.35 453.58 755.81 455.45 755.04 456.72 754.35 458.54 753.16 469.02 762.52 470.52 763.88 474.01 761.96 475.04 762.88 475.03 763.18 475.29 763.45 475.22 763.71 475.25 763.98 475.16 764.08 475.39 764.31 475.34 764.63 475.45 764.74 475.35 765.27 475.57 765.50 475.44 765.67 475.57 765.95 475.45 766.23 475.63 766.49 475.42 766.80 475.61 767.09 475.57 767.26 475.13 767.45 474.94 767.85 475.33 768.19 481.22 764.92 481.83 765.47 485.37 768.72 487.38 770.58 488.74 771.78 490.87 773.74 492.47 775.15 495.13 777.56 498.14 780.28 501.34 783.12 502.21 783.92 502.35 784.10 503.58 785.27 500.08 786.84 497.11 788.14 491.75 790.45 490.76 790.88 488.62 791.80 484.93 793.40 475.48 797.49 473.31 798.45 466.88 801.44 469.49 805.57 472.00 809.52 470.74 807.88 469.80 806.96 468.59 808.06 470.70 810.40 470.27 810.58 467.94 811.50 466.42 812.11 464.94 812.75 463.65 813.21 462.81 813.54 462.81 813.92 460.73 814.82 459.11 815.46 456.32 816.73 454.56 812.73 453.92 811.25 453.57 810.46 452.45 807.90 441.88 812.43 441.91 812.65 442.13 812.84 442.17 813.16 442.55 813.95 442.47 814.09 442.57 814.45 442.88 814.57 443.18 814.57 443.69 815.20 443.85 815.16 444.05 815.44 444.16 815.46 444.54 815.76 444.90 816.13 445.00 816.35 444.98 816.74 444.89 817.01 444.64 817.38 444.86 817.56 444.77 818.14 444.96 818.20 444.78 818.45 444.89 818.69 444.60 818.84Z\"},\"02\":{\"name\":\"Saguenay - Lac-Saint-Jean\",\"path\":\"M355.27 554.96 355.41 559.50 355.45 573.26 355.44 587.01 355.43 600.76 355.41 610.02 355.42 612.08 355.41 613.68 355.42 615.56 355.40 618.99 355.38 621.38 355.37 624.72 355.39 628.24 355.39 655.70 355.38 661.29 355.39 664.83 355.38 669.42 355.39 683.14 355.39 696.86 355.39 710.58 355.50 721.73 355.90 721.74 355.90 724.29 355.91 738.00 355.88 751.71 355.89 765.41 355.90 769.67 355.93 773.67 355.94 779.11 355.93 785.27 355.93 789.22 355.96 793.02 355.98 794.69 355.98 796.49 355.98 800.66 355.33 802.06 354.53 803.87 354.44 803.94 353.42 806.36 354.14 806.26 355.10 806.15 355.78 806.19 357.09 806.70 357.64 807.20 357.96 807.36 358.85 807.45 359.65 807.62 360.28 807.93 360.41 808.18 360.44 808.57 360.52 808.91 360.95 809.80 360.99 810.01 360.20 811.83 357.88 817.11 357.86 817.06 355.63 816.03 349.96 813.37 346.57 820.59 344.64 820.58 343.89 820.52 340.88 820.37 339.70 820.33 338.28 820.31 337.74 820.27 336.80 820.28 336.79 820.41 334.42 820.34 330.09 820.28 325.85 820.24 323.48 820.21 320.05 820.14 315.66 820.03 313.61 820.00 313.61 819.88 310.30 819.85 304.35 819.97 304.42 820.37 304.38 820.60 304.44 821.04 304.72 821.11 305.05 821.07 305.41 821.20 305.63 821.17 305.70 821.33 305.39 821.85 305.69 822.14 305.47 822.50 301.07 822.42 291.87 822.23 279.94 821.94 278.17 819.22 272.82 819.06 270.25 819.02 268.93 818.99 266.13 818.87 258.21 818.60 253.18 818.43 248.70 818.26 245.30 818.13 239.79 812.15 237.14 809.27 233.11 804.90 232.07 803.78 231.46 803.09 228.40 799.76 228.13 799.45 223.39 794.27 216.78 786.99 213.19 783.32 203.12 772.61 194.85 763.65 195.11 763.24 195.35 763.26 195.60 762.56 195.61 762.36 195.82 762.21 196.10 762.20 196.24 762.39 196.10 762.76 196.21 763.05 196.16 763.52 195.90 763.50 195.79 763.60 195.67 763.94 195.83 764.38 195.96 764.52 196.29 764.31 196.86 764.44 196.89 764.75 197.17 765.10 197.36 765.13 197.42 764.95 197.73 764.89 197.81 764.42 198.56 764.29 198.64 764.46 199.08 764.52 199.03 764.94 198.74 765.15 198.75 765.43 199.07 765.36 199.27 765.23 199.71 765.24 199.85 765.07 199.95 764.73 199.81 764.58 199.77 764.26 200.02 763.86 199.89 763.80 199.76 763.38 199.92 762.76 200.04 762.79 200.28 762.58 200.68 762.64 200.81 762.34 201.18 762.46 201.34 762.37 201.42 761.84 201.61 761.65 201.86 761.17 201.66 760.94 201.71 760.60 201.41 760.35 201.18 760.27 201.39 760.00 201.39 759.61 201.23 759.55 201.22 759.13 201.14 758.84 201.24 758.78 201.61 758.83 201.85 758.65 201.75 758.51 201.80 757.61 201.93 757.24 202.26 757.30 202.25 756.80 202.40 756.59 202.37 756.42 202.49 756.25 202.39 755.84 202.27 755.68 202.72 755.52 202.78 755.39 202.65 754.96 202.90 754.65 202.94 754.06 203.03 753.69 203.37 753.60 203.41 753.74 203.65 753.78 203.65 753.18 203.53 753.08 203.53 752.38 203.75 752.26 203.77 752.10 203.44 751.89 203.58 751.64 203.63 751.26 203.86 751.11 203.90 750.74 204.02 750.54 203.91 750.13 204.10 749.64 204.44 749.68 204.53 749.29 204.45 748.92 204.50 748.47 204.58 748.24 204.56 747.89 204.62 747.32 204.54 747.09 204.64 746.87 204.49 746.58 204.64 745.92 204.61 745.72 204.44 745.69 204.44 745.49 204.17 745.35 203.95 745.32 203.91 745.68 203.73 745.83 203.49 746.17 203.14 746.08 203.22 745.82 203.09 745.41 202.71 745.42 202.47 745.53 202.25 745.43 202.01 745.55 201.91 746.03 202.00 746.28 201.83 746.88 201.62 746.93 201.51 746.81 201.58 746.43 201.55 746.21 201.34 746.21 201.20 746.06 200.80 746.13 201.02 745.48 200.89 745.33 200.63 745.24 200.24 744.93 200.19 744.69 199.97 744.49 199.30 744.42 199.52 743.99 199.59 743.73 199.52 743.59 199.19 743.42 198.95 743.57 198.25 743.38 197.97 743.38 197.48 743.04 197.77 742.51 198.09 742.00 198.43 741.59 198.47 741.28 198.99 740.76 198.92 740.49 198.68 740.34 198.37 740.33 198.27 739.96 198.32 739.84 198.61 739.64 198.72 739.30 198.68 738.40 198.76 738.13 198.72 737.82 198.80 737.45 199.12 737.13 199.41 737.10 199.58 737.21 199.83 736.82 199.78 736.58 199.90 736.05 199.83 735.91 199.53 735.89 199.46 735.33 199.36 734.94 199.60 734.52 199.83 734.59 200.27 734.44 200.51 733.95 200.72 733.70 200.99 733.63 201.15 733.42 201.52 733.61 202.00 734.10 201.96 734.20 201.49 734.53 201.42 734.86 201.54 734.95 202.03 734.91 202.21 734.76 202.65 734.53 202.91 734.47 203.07 734.10 203.49 733.86 203.98 733.32 204.50 733.10 204.50 732.83 204.29 732.72 204.00 732.44 204.23 732.21 204.39 731.94 204.57 731.47 204.71 731.00 204.61 730.86 204.71 730.57 204.67 730.15 204.76 729.98 204.95 730.06 205.55 730.08 205.63 729.84 205.57 729.64 205.71 729.09 206.03 728.78 206.30 728.31 206.60 728.09 206.78 727.67 206.72 727.47 206.90 727.32 206.98 726.96 206.96 726.77 207.05 726.53 207.24 726.28 207.32 725.88 207.11 725.48 207.25 725.09 207.44 724.75 207.47 724.38 207.63 723.94 207.82 723.80 208.28 724.09 208.55 724.06 208.61 724.24 208.96 724.19 209.08 723.95 209.57 723.60 209.82 723.21 209.87 722.94 210.12 722.85 210.16 722.59 210.31 722.31 210.16 722.01 210.66 721.22 213.56 721.38 213.75 717.73 214.34 717.44 214.52 717.11 214.53 716.96 215.00 716.09 215.58 715.65 215.94 715.68 216.21 715.14 216.66 714.37 217.02 713.96 217.29 713.55 217.29 713.29 217.43 712.96 217.66 713.00 217.84 712.69 217.95 712.37 217.89 712.26 218.04 711.99 217.89 711.82 217.88 711.03 218.36 709.95 218.44 709.58 218.67 709.28 219.11 709.29 219.21 709.09 219.42 709.02 219.62 708.40 219.74 708.25 220.06 707.31 220.30 707.10 220.11 706.93 220.18 706.56 220.73 706.68 220.83 706.49 221.07 706.58 221.30 706.39 221.37 706.06 221.62 705.58 221.87 705.65 222.03 705.33 222.00 705.10 222.14 704.86 222.27 704.87 222.34 704.51 222.49 704.39 222.55 704.00 222.75 703.39 222.76 703.00 222.91 703.01 222.95 702.67 222.85 702.60 222.88 702.32 222.64 702.11 222.57 701.82 222.62 701.64 222.84 701.34 223.03 701.26 222.97 700.96 223.12 700.89 222.90 700.44 222.97 700.10 222.72 700.01 222.60 699.86 222.90 699.25 223.27 699.14 223.45 698.82 223.16 698.53 223.27 698.18 223.01 698.00 222.98 697.85 223.05 697.33 223.22 697.08 223.04 696.88 223.17 696.72 223.40 696.05 223.62 695.64 223.62 695.47 223.99 695.23 224.08 694.97 224.46 694.65 224.73 694.83 224.74 695.20 224.83 695.43 225.13 695.56 225.44 695.50 225.54 695.68 225.78 695.78 226.05 695.79 226.18 695.67 226.53 695.89 226.68 695.52 227.02 695.14 227.11 694.80 227.04 694.62 227.15 694.24 227.09 694.09 227.24 693.87 227.45 693.72 227.75 693.40 227.95 692.89 228.35 692.21 228.69 691.99 228.68 691.52 228.83 691.33 228.88 691.04 229.15 690.84 229.32 689.82 229.49 689.65 229.55 689.42 229.42 689.29 229.51 688.96 229.92 688.72 229.93 688.60 229.64 688.35 229.55 687.92 229.56 687.57 229.66 687.25 229.58 687.12 229.66 686.86 229.65 686.45 229.96 686.05 230.18 685.65 230.59 685.31 230.74 685.44 230.95 685.91 230.76 686.50 230.70 686.97 230.56 687.38 230.71 687.65 230.88 687.74 231.09 687.68 231.18 687.48 231.38 687.37 231.52 687.47 231.58 687.70 232.01 687.62 232.15 687.36 232.43 687.00 232.81 687.03 233.05 686.88 233.23 686.60 233.66 686.66 233.80 686.52 233.76 686.19 233.92 685.88 234.13 685.84 234.23 686.38 234.21 686.75 234.12 686.90 234.26 687.44 234.26 687.62 234.49 687.64 234.92 687.52 235.04 687.20 234.96 687.09 235.04 686.75 235.17 686.57 234.95 686.33 235.01 685.86 235.24 685.32 235.61 684.79 235.76 684.37 235.97 683.56 236.28 683.55 236.52 682.90 236.85 682.32 237.09 682.42 237.23 682.23 237.31 681.82 237.19 681.72 237.31 681.36 237.45 681.37 237.57 681.02 237.58 680.60 237.73 680.26 237.86 679.67 238.24 679.53 238.38 679.35 238.51 678.99 238.89 679.02 239.01 678.78 239.05 678.46 239.14 678.33 239.33 677.73 239.29 677.48 239.38 677.01 239.57 676.80 239.84 676.17 240.03 676.29 240.42 676.26 240.69 676.15 240.77 675.87 240.63 675.66 240.75 675.38 240.86 674.57 241.10 674.50 241.28 674.12 241.21 673.87 241.30 673.61 241.46 673.51 241.66 673.23 242.02 672.90 242.24 672.59 242.53 672.42 242.33 672.16 242.29 671.97 242.36 671.70 242.71 671.22 242.83 670.92 242.71 670.71 242.86 670.53 242.98 670.18 243.18 670.08 243.57 670.11 243.78 669.94 243.85 669.72 244.33 669.71 244.64 669.53 244.85 669.65 245.20 669.61 245.37 669.71 245.52 669.48 245.51 669.24 245.68 668.74 245.71 668.47 245.97 667.99 246.29 667.68 246.52 667.31 246.71 667.18 247.31 667.57 247.38 667.36 247.88 667.11 248.14 667.17 248.02 667.35 248.05 667.62 248.22 667.94 248.55 667.90 248.68 667.79 248.85 667.99 248.95 668.25 249.43 668.59 248.95 669.53 249.11 669.59 249.13 669.83 249.35 669.81 249.53 669.56 250.12 669.94 250.61 670.22 250.93 670.22 250.77 670.59 250.61 670.73 250.46 671.30 250.23 671.79 249.94 671.90 249.95 672.12 249.83 672.48 250.07 672.56 250.14 672.34 250.39 672.21 250.63 672.20 250.70 671.82 251.07 671.73 251.22 671.57 251.64 671.79 252.02 671.50 252.12 670.95 252.21 670.76 252.43 670.75 252.83 670.25 252.99 669.94 253.31 669.75 253.44 669.40 253.68 669.48 253.84 669.41 254.04 668.51 254.28 667.63 254.33 666.98 254.13 666.78 254.48 666.49 254.76 666.60 255.22 666.53 255.27 666.34 255.55 666.14 255.62 665.77 255.60 665.53 255.73 665.37 256.08 665.16 256.20 664.73 256.38 664.54 256.91 664.13 257.07 664.32 257.51 664.09 257.67 664.14 257.98 663.98 258.08 664.11 258.28 663.95 258.99 663.81 259.17 663.89 259.53 663.82 259.61 663.52 260.32 663.81 260.66 663.91 260.53 664.17 260.79 664.47 260.63 664.55 260.70 664.79 260.90 664.93 260.90 665.17 261.13 665.17 261.20 665.04 261.46 665.23 261.37 665.55 261.52 665.61 261.55 665.89 261.36 666.02 261.39 666.20 261.26 666.40 261.30 666.89 261.59 666.91 261.90 666.33 262.14 666.14 262.46 666.25 262.54 666.55 262.83 666.78 262.88 666.97 262.79 667.66 263.00 667.83 263.05 668.06 263.23 668.25 263.41 668.13 263.56 667.74 263.77 667.86 264.20 667.33 264.33 666.77 264.45 666.51 264.77 666.46 264.91 666.34 264.92 666.01 265.13 665.37 265.35 665.17 265.57 664.78 265.74 664.19 265.78 663.73 265.64 663.42 265.68 663.23 265.88 663.13 266.04 662.68 266.28 662.53 266.46 662.24 266.55 661.96 266.70 661.92 266.84 661.42 267.01 661.32 266.89 661.13 266.85 660.83 267.01 660.56 267.25 660.57 267.43 660.82 267.53 661.14 267.49 661.46 267.57 661.69 267.49 661.85 267.71 661.95 267.57 662.45 267.34 662.62 267.18 662.91 267.28 663.01 267.00 663.63 267.29 663.76 267.16 664.33 267.13 664.77 267.37 665.03 267.25 665.50 267.07 665.97 267.05 666.51 267.11 666.88 266.99 667.20 266.82 667.38 266.62 667.79 266.83 668.06 267.00 667.73 267.24 667.78 267.49 667.59 267.82 667.18 268.13 667.01 268.14 667.52 268.59 667.74 268.89 667.64 268.83 667.92 269.04 667.90 269.13 667.70 269.39 667.62 269.64 667.66 269.89 667.82 269.98 667.05 270.44 665.99 270.68 665.90 271.05 666.34 271.48 666.28 271.54 666.10 271.54 665.72 271.91 665.75 272.03 665.21 272.24 665.16 272.33 665.00 272.53 665.00 272.55 664.81 272.78 664.78 272.91 664.62 272.89 664.33 272.95 664.09 273.34 663.70 273.30 663.48 273.54 662.84 273.53 662.69 273.73 662.29 273.72 662.02 273.43 661.61 273.67 661.04 273.78 660.58 274.12 660.68 275.03 660.76 275.42 660.10 275.65 659.98 275.74 659.55 276.00 659.53 276.15 659.21 276.38 659.10 276.46 658.88 276.39 658.65 276.56 658.33 276.60 657.99 276.53 657.77 276.58 657.47 276.75 657.04 277.11 657.12 277.37 657.42 277.58 657.20 277.75 656.51 277.94 656.09 277.93 655.64 277.81 655.42 277.94 655.08 277.94 654.90 277.72 654.64 278.08 654.25 278.59 654.20 278.95 654.21 279.09 653.99 279.21 653.30 279.37 653.19 279.56 653.36 279.91 653.27 279.99 653.07 280.42 653.28 280.39 653.62 280.57 653.86 280.41 654.28 280.42 654.41 280.26 654.85 280.11 655.10 280.42 655.19 280.38 655.43 280.72 655.62 280.86 655.60 281.22 655.83 281.53 655.83 281.65 655.54 281.40 655.26 281.39 655.14 281.69 654.50 281.70 654.30 281.48 653.98 281.62 653.75 281.64 653.41 281.73 653.06 281.64 652.83 281.93 652.40 282.02 652.02 282.29 651.71 282.16 651.24 282.00 651.06 282.16 650.72 282.54 650.64 282.59 650.34 282.78 650.11 282.87 649.66 283.16 648.98 283.40 649.01 283.57 648.10 283.88 648.03 283.98 647.55 284.23 647.33 284.36 647.00 284.57 646.76 284.64 646.46 284.76 646.42 285.15 646.62 285.57 646.71 286.00 647.02 286.03 647.14 286.44 647.27 286.49 647.08 286.31 646.83 286.43 646.50 286.40 645.70 286.47 645.42 286.22 645.14 286.53 644.98 286.83 645.05 287.09 645.25 287.26 645.02 287.14 644.83 287.31 644.34 287.19 644.20 286.95 644.18 286.79 643.93 286.96 643.73 286.81 643.49 287.10 643.51 287.04 643.31 287.15 642.88 286.83 642.76 287.09 642.54 287.30 642.60 287.32 642.76 287.57 642.91 287.68 643.17 288.06 643.18 287.98 642.80 287.82 642.65 287.82 642.43 287.60 642.22 287.68 642.07 287.98 642.03 288.09 641.47 288.31 641.38 288.70 641.48 288.86 641.33 288.78 641.05 289.10 640.71 289.38 640.72 289.37 640.47 289.47 640.04 290.00 639.69 290.27 639.56 290.51 639.75 290.66 639.68 291.03 639.77 291.10 639.93 291.34 640.02 291.49 639.81 291.74 639.67 291.94 639.67 291.86 639.36 291.72 639.18 291.85 638.71 291.47 638.46 291.52 638.10 291.78 637.56 291.94 637.47 292.11 637.04 291.91 636.89 291.81 636.63 291.67 636.53 292.04 635.97 292.43 635.71 292.75 635.68 292.93 635.43 293.19 635.42 293.22 634.80 293.45 634.49 293.78 634.49 293.86 635.27 294.01 635.19 294.21 635.50 294.56 635.58 294.72 635.17 295.16 634.98 295.29 634.85 295.47 635.11 295.62 635.17 295.70 635.46 295.39 636.37 295.84 636.43 296.02 635.91 296.36 635.73 296.50 635.36 296.77 635.40 296.97 635.33 297.22 634.53 297.44 634.41 297.50 634.07 297.65 633.84 297.92 633.20 298.24 633.15 298.36 632.85 298.21 632.56 298.35 632.40 297.96 631.92 297.64 631.72 297.46 631.53 297.72 630.87 297.97 630.88 298.37 630.67 298.50 630.50 298.75 629.96 299.01 629.73 299.25 629.11 299.43 628.90 299.82 628.86 299.84 628.73 300.20 627.90 300.43 627.61 300.50 627.37 301.00 627.44 301.23 627.36 301.91 627.36 302.30 626.81 302.43 626.37 302.37 625.66 302.24 625.56 302.37 625.32 301.90 625.31 302.03 625.15 301.85 624.98 301.85 624.77 302.00 624.60 302.09 624.19 301.95 623.97 302.31 622.94 302.14 622.77 301.92 622.86 301.68 622.82 301.58 622.59 301.67 621.78 301.63 621.43 301.48 621.30 301.70 620.82 301.71 620.60 301.84 620.46 301.81 619.68 301.60 619.34 301.70 618.89 301.24 618.73 301.34 618.51 301.34 618.25 301.52 618.10 301.72 617.74 301.53 617.51 301.59 617.12 301.27 617.08 301.58 616.13 301.70 615.89 301.95 615.71 302.26 614.80 302.46 614.43 302.47 614.09 302.35 613.98 302.35 613.68 302.26 613.45 302.39 613.27 302.59 612.58 302.89 612.15 303.30 611.93 303.18 611.67 302.74 611.68 302.59 611.47 302.64 611.21 302.58 610.90 302.72 610.48 303.23 610.32 303.54 609.98 303.75 609.93 304.08 609.35 304.38 609.48 304.80 609.54 304.89 609.71 305.13 609.74 305.41 609.34 305.70 609.11 305.93 609.20 306.11 609.42 306.28 609.49 306.69 609.29 306.86 609.27 307.44 608.95 307.72 609.00 307.97 608.88 308.15 609.08 308.58 609.08 308.93 608.90 309.19 608.83 309.39 608.64 309.69 607.66 309.82 607.35 309.91 606.63 310.29 605.74 310.30 605.41 310.47 605.13 310.73 605.11 311.17 604.81 311.44 604.23 311.62 603.76 311.79 603.08 311.70 602.85 311.70 602.34 311.92 601.94 312.36 601.71 312.48 601.35 313.15 600.68 313.47 599.88 314.03 599.29 314.37 599.33 314.76 599.24 314.90 599.11 314.92 598.89 315.13 598.61 315.26 598.25 314.75 598.39 314.14 598.49 313.90 598.35 313.31 598.36 313.61 597.40 313.83 597.14 314.15 597.00 314.29 596.44 314.64 596.16 314.99 595.98 315.21 595.69 315.64 595.33 315.74 594.75 316.04 594.06 316.13 593.98 316.57 594.08 316.86 593.87 316.90 593.62 317.32 592.98 317.48 592.54 317.30 592.38 317.03 592.38 317.17 592.13 317.41 592.09 317.44 591.94 317.67 591.64 317.67 591.33 317.92 591.19 318.26 591.20 318.69 590.61 318.91 590.44 319.31 590.35 319.22 590.05 319.34 589.75 319.48 589.61 319.63 589.15 319.85 588.90 320.28 588.98 320.71 588.91 320.89 589.01 321.33 588.95 321.53 588.84 321.61 588.63 321.93 588.44 322.39 588.58 322.50 588.42 322.68 588.51 322.86 588.46 323.19 588.19 323.51 587.84 323.61 587.66 323.87 587.75 324.01 587.49 324.34 587.43 324.67 587.30 324.91 587.31 325.40 586.87 325.86 586.03 326.12 585.89 326.46 585.29 326.70 585.57 327.01 585.53 327.22 585.63 327.30 585.82 327.60 585.90 327.63 585.70 328.11 585.46 328.59 585.70 329.04 585.60 329.11 586.06 329.03 586.40 328.89 586.62 328.55 586.79 328.45 587.07 328.81 587.22 329.00 587.48 329.01 587.71 329.35 587.76 329.78 587.35 330.03 587.18 330.20 587.29 330.30 587.09 330.75 587.07 331.07 586.88 331.25 586.68 331.71 586.47 331.76 586.31 332.11 585.80 332.32 585.56 332.60 585.49 332.73 585.22 333.41 585.25 333.80 584.97 334.14 585.13 334.42 585.10 334.74 584.84 335.30 584.53 335.87 584.45 336.14 584.01 336.33 584.04 336.63 583.95 336.69 583.74 336.86 583.55 337.34 583.22 337.63 583.26 337.83 583.37 338.02 583.64 338.08 583.88 338.33 583.89 338.39 584.06 338.67 584.16 338.78 583.88 338.98 583.75 339.29 583.71 339.58 583.41 339.80 583.48 340.14 583.75 340.56 583.80 340.77 583.52 340.94 583.44 341.00 583.18 341.58 582.86 341.65 582.75 342.21 582.60 342.36 582.50 342.70 582.56 343.01 582.41 343.39 582.13 343.77 582.03 344.16 582.09 344.40 582.06 344.66 582.14 345.12 581.96 345.28 582.02 346.00 581.67 346.20 581.65 346.31 581.42 346.50 581.36 346.64 581.07 347.01 581.08 347.36 580.69 347.45 580.39 347.49 580.00 347.30 579.67 347.27 579.49 347.48 579.29 347.60 578.97 347.82 578.80 347.79 578.65 348.20 578.38 348.43 578.30 348.36 577.89 348.16 577.90 347.68 578.05 347.20 578.06 347.06 577.96 347.08 577.53 346.70 577.56 346.87 577.23 347.13 577.09 347.30 576.66 347.49 576.51 347.50 576.06 347.57 575.78 347.82 575.58 348.24 575.39 348.49 575.36 348.95 574.68 349.04 573.91 349.19 573.77 349.19 573.56 349.48 573.15 349.70 572.67 349.90 572.63 350.07 571.90 350.30 571.01 349.58 571.13 349.38 571.06 349.47 570.64 349.30 570.41 349.30 570.23 348.94 570.20 348.67 570.50 348.40 570.26 348.40 570.06 348.23 570.00 348.17 569.82 348.32 569.37 348.53 569.10 348.95 568.77 349.57 568.56 349.54 568.06 349.79 567.87 349.90 567.62 350.13 567.70 350.53 567.68 350.70 567.51 350.65 567.20 350.40 566.91 350.42 566.67 350.28 566.57 349.97 566.62 349.47 566.27 349.19 566.38 348.89 566.21 348.59 565.87 348.75 565.37 348.65 565.07 348.74 564.75 348.95 564.62 349.11 564.39 349.31 564.50 349.36 564.91 349.63 565.08 350.02 564.70 350.22 564.20 350.12 563.92 349.83 563.67 349.89 563.34 349.63 563.14 349.68 562.96 349.52 562.72 349.61 562.47 349.54 562.10 349.40 561.99 348.92 561.83 348.92 561.62 349.25 561.55 349.61 561.29 350.01 560.85 350.17 561.00 350.50 561.06 351.00 560.30 351.32 560.11 351.58 559.79 352.01 559.54 352.00 559.42 351.59 559.38 351.51 559.26 351.52 558.94 351.09 558.83 351.06 558.56 351.13 558.32 351.08 557.87 351.45 557.63 351.64 557.34 351.95 557.10 352.04 556.93 352.38 556.68 352.47 556.40 352.09 556.37 352.11 556.12 352.60 555.75 352.86 555.75 352.96 555.47 353.38 555.14 353.59 555.30 353.98 555.26 354.16 555.45 354.47 555.38 354.41 555.24 354.63 555.03 354.87 555.09 355.07 554.93 355.27 554.96Z\"},\"03\":{\"name\":\"Capitale-Nationale\",\"path\":\"M372.86 817.46 372.41 817.90 371.69 818.51 369.61 819.93 368.93 820.49 368.29 821.10 367.54 821.93 367.03 822.57 366.58 823.19 366.08 823.96 365.70 824.61 364.82 826.17 363.83 827.88 363.40 828.64 362.92 829.60 362.18 831.19 361.79 832.15 361.14 833.91 360.56 835.73 360.09 836.84 359.74 837.51 359.30 838.25 358.57 839.25 358.14 839.76 357.66 840.28 357.13 840.77 355.86 841.79 355.28 842.29 354.73 842.81 354.38 843.19 353.83 843.88 353.46 844.39 352.91 845.32 352.61 845.91 352.19 846.96 351.75 848.29 351.53 848.82 351.24 849.39 350.71 850.19 348.93 852.44 345.53 856.69 345.08 857.10 344.24 857.67 343.84 857.88 342.82 858.35 342.21 858.68 341.58 859.06 340.99 859.49 340.51 859.87 340.01 860.33 339.30 861.08 338.98 861.48 338.66 861.99 338.39 862.52 338.14 863.09 337.59 864.55 337.25 865.14 336.67 865.92 335.98 866.73 334.37 868.56 333.90 869.04 333.05 869.70 331.67 870.65 331.46 870.81 331.08 871.22 330.84 871.57 330.67 871.94 330.46 872.65 330.12 874.14 329.98 874.55 329.76 874.89 329.41 875.23 328.16 876.24 326.80 877.38 325.28 878.71 324.64 879.23 324.31 879.44 323.42 879.86 322.63 880.27 321.83 880.78 321.23 881.00 320.92 881.18 320.37 881.68 319.97 882.15 319.40 882.69 318.79 883.08 318.32 883.21 317.22 883.27 315.76 883.55 315.26 883.55 314.58 883.48 313.81 883.61 313.31 883.55 312.71 883.32 312.18 883.31 311.87 883.63 311.34 883.98 311.60 884.26 311.41 884.71 311.28 885.25 311.10 885.65 310.85 886.05 310.48 886.53 309.98 887.07 309.61 887.37 309.22 887.63 308.81 888.00 308.36 888.32 307.91 888.50 306.93 888.66 306.21 888.84 305.62 889.18 305.28 889.48 304.94 889.62 303.43 889.94 302.79 890.03 302.02 890.08 300.98 890.28 300.16 890.50 299.47 890.73 298.22 891.21 297.75 891.43 297.33 891.68 296.81 891.84 296.07 891.91 295.66 892.00 295.23 892.20 294.21 892.88 293.58 893.20 293.16 893.36 292.57 893.49 292.12 893.54 289.89 893.59 289.45 893.56 289.14 893.48 288.74 893.30 288.42 893.07 287.23 892.07 286.67 891.79 286.09 891.75 285.72 891.82 285.24 892.09 284.89 892.44 284.57 892.87 284.02 893.71 283.54 894.19 283.32 894.31 282.43 894.68 281.84 895.04 281.45 895.36 280.72 896.12 279.99 897.01 279.69 897.25 279.03 897.46 278.63 897.52 277.95 897.55 277.55 897.51 276.01 895.77 274.73 894.38 274.08 893.62 273.26 892.72 271.53 890.81 269.48 888.61 268.25 887.27 267.52 886.45 266.24 885.06 267.04 884.30 267.24 884.20 267.78 883.69 268.11 883.45 268.46 883.86 269.56 882.83 269.84 883.11 270.84 882.26 271.71 883.19 272.29 882.65 272.47 882.84 272.86 882.48 273.41 882.07 274.82 880.77 274.65 880.56 273.20 879.08 271.33 877.13 270.92 876.66 266.06 871.54 265.06 870.43 266.01 869.55 267.26 868.36 266.70 867.17 266.46 867.10 265.94 867.08 265.76 867.24 264.31 865.71 262.27 865.60 261.25 862.94 261.39 861.40 262.53 858.73 262.87 856.33 264.12 855.29 263.64 853.28 264.65 852.33 264.61 853.20 266.34 854.60 266.30 857.58 268.35 857.72 268.87 858.37 269.78 857.11 271.01 857.77 272.82 857.86 273.02 857.37 273.17 857.39 273.37 856.98 273.71 856.63 273.79 856.38 274.10 855.80 274.15 855.16 274.28 854.94 274.18 854.48 274.31 854.10 274.65 853.99 274.96 853.81 275.04 853.55 275.33 853.12 275.64 852.81 275.83 852.74 275.90 852.42 276.42 852.04 276.63 851.42 276.54 851.03 276.14 850.83 275.89 850.64 275.81 850.35 275.69 850.29 275.61 850.01 275.46 849.82 275.55 849.64 275.58 849.32 275.67 849.22 275.54 848.83 275.60 848.56 275.72 848.45 275.98 848.44 275.90 848.16 275.65 847.80 275.48 847.70 275.15 847.72 275.10 847.60 274.56 847.27 274.50 847.13 274.79 846.74 274.68 846.34 274.44 846.42 274.07 845.80 274.07 845.63 273.76 845.13 273.64 845.11 273.54 844.78 273.18 844.44 282.29 835.85 286.43 831.96 285.19 830.07 282.68 826.12 279.94 821.94 291.87 822.23 301.07 822.42 305.47 822.50 305.69 822.14 305.39 821.85 305.70 821.33 305.63 821.17 305.41 821.20 305.05 821.07 304.72 821.11 304.44 821.04 304.38 820.60 304.42 820.37 304.35 819.97 310.30 819.85 313.61 819.88 313.61 820.00 315.66 820.03 320.05 820.14 323.48 820.21 325.85 820.24 330.09 820.28 334.42 820.34 336.79 820.41 336.80 820.28 337.74 820.27 338.28 820.31 339.70 820.33 340.88 820.37 343.89 820.52 344.64 820.58 346.57 820.59 349.96 813.37 355.63 816.03 357.86 817.06 357.88 817.11 360.20 811.83 360.99 810.01 361.08 810.46 361.37 811.08 361.72 811.51 362.11 811.84 362.85 812.21 363.40 812.36 363.95 812.26 364.24 812.29 364.65 812.48 365.36 812.62 365.70 812.71 366.38 813.00 367.16 813.20 368.13 813.65 368.82 814.06 372.86 817.46Z\"},\"04\":{\"name\":\"Mauricie et Centre-du-Québec\",\"path\":\"M194.85 763.65 203.12 772.61 213.19 783.32 216.78 786.99 223.39 794.27 228.13 799.45 228.40 799.76 231.46 803.09 232.07 803.78 233.11 804.90 237.14 809.27 239.79 812.15 245.30 818.13 248.70 818.26 253.18 818.43 258.21 818.60 266.13 818.87 268.93 818.99 270.25 819.02 272.82 819.06 278.17 819.22 279.94 821.94 282.68 826.12 285.19 830.07 286.43 831.96 282.29 835.85 273.18 844.44 273.54 844.78 273.64 845.11 273.76 845.13 274.07 845.63 274.07 845.80 274.44 846.42 274.68 846.34 274.79 846.74 274.50 847.13 274.56 847.27 275.10 847.60 275.15 847.72 275.48 847.70 275.65 847.80 275.90 848.16 275.98 848.44 275.72 848.45 275.60 848.56 275.54 848.83 275.67 849.22 275.58 849.32 275.55 849.64 275.46 849.82 275.61 850.01 275.69 850.29 275.81 850.35 275.89 850.64 276.14 850.83 276.54 851.03 276.63 851.42 276.42 852.04 275.90 852.42 275.83 852.74 275.64 852.81 275.33 853.12 275.04 853.55 274.96 853.81 274.65 853.99 274.31 854.10 274.18 854.48 274.28 854.94 274.15 855.16 274.10 855.80 273.79 856.38 273.71 856.63 273.37 856.98 273.17 857.39 273.02 857.37 272.82 857.86 271.01 857.77 269.78 857.11 268.87 858.37 268.35 857.72 266.30 857.58 266.34 854.60 264.61 853.20 264.65 852.33 263.64 853.28 264.12 855.29 262.87 856.33 262.53 858.73 261.39 861.40 261.25 862.94 262.27 865.60 264.31 865.71 265.76 867.24 265.94 867.08 266.46 867.10 266.70 867.17 267.26 868.36 266.01 869.55 265.06 870.43 266.06 871.54 270.92 876.66 271.33 877.13 273.20 879.08 274.65 880.56 274.82 880.77 273.41 882.07 272.86 882.48 272.47 882.84 272.29 882.65 271.71 883.19 270.84 882.26 269.84 883.11 269.56 882.83 268.46 883.86 268.11 883.45 267.78 883.69 267.24 884.20 267.04 884.30 266.24 885.06 267.52 886.45 268.25 887.27 269.48 888.61 271.53 890.81 273.26 892.72 274.08 893.62 274.73 894.38 276.01 895.77 277.55 897.51 277.95 897.55 278.63 897.52 279.32 898.23 279.44 898.48 279.59 898.51 280.14 899.09 280.20 899.04 281.63 900.59 283.19 902.26 285.23 904.49 288.19 907.69 288.62 908.19 289.49 909.12 291.24 907.53 293.00 906.14 295.00 904.43 295.95 905.53 296.90 906.55 298.24 905.44 300.19 907.59 299.06 908.63 299.59 909.19 300.06 909.77 299.01 910.72 299.86 911.36 300.60 911.94 301.37 912.52 302.84 913.67 304.13 914.67 302.28 917.09 301.70 916.67 301.28 917.24 300.48 916.62 299.75 917.56 299.65 917.82 299.83 917.96 298.92 919.12 298.02 920.31 298.26 920.48 297.84 921.07 298.75 921.74 297.83 922.93 295.87 925.55 295.43 926.15 293.97 928.08 293.16 929.18 291.82 930.94 295.05 933.30 296.49 934.37 296.92 933.83 298.79 935.25 298.92 935.09 300.54 936.31 300.30 937.79 300.07 939.07 300.25 939.35 298.83 940.68 297.90 939.97 297.15 940.87 295.16 939.31 295.32 939.14 295.22 938.96 294.94 938.76 294.83 938.90 294.30 938.47 293.58 939.36 291.94 938.06 291.36 937.57 290.03 936.51 288.52 935.34 287.14 937.13 285.08 939.74 284.90 940.01 284.60 939.74 284.40 940.01 284.04 939.67 283.86 939.82 283.68 939.84 283.25 939.62 282.81 939.76 282.61 940.07 280.21 938.19 278.53 936.85 277.49 938.06 275.45 940.56 272.12 944.52 271.52 945.26 271.40 945.10 271.38 944.85 271.22 944.45 270.90 944.23 270.91 944.03 271.20 943.83 271.33 943.60 271.22 943.26 270.97 943.11 270.57 943.06 270.51 942.77 270.84 942.69 271.03 942.28 271.00 942.10 270.82 941.95 270.20 942.56 268.65 944.38 268.01 944.98 267.48 945.56 269.00 946.87 270.25 947.97 268.58 950.06 267.84 951.02 267.17 950.46 266.28 949.74 264.91 948.54 264.09 947.79 262.37 946.26 261.33 945.32 257.35 941.74 257.94 941.02 257.39 940.49 257.50 940.36 256.51 939.51 254.74 941.47 253.47 940.33 252.52 941.23 250.38 938.93 248.93 937.30 247.03 935.26 247.22 934.68 247.02 934.46 247.17 934.19 247.64 933.78 247.88 934.05 248.31 933.67 248.37 933.73 249.09 933.08 249.39 933.00 251.03 931.07 249.54 929.47 249.59 929.42 249.11 928.92 249.12 928.87 249.70 928.33 249.19 928.02 249.25 927.27 249.38 927.09 249.13 927.00 248.76 926.48 248.31 926.09 248.23 926.68 247.12 925.47 246.80 925.96 246.56 925.70 246.34 925.90 245.35 924.84 243.97 923.34 243.64 923.02 242.22 921.48 242.60 921.59 242.92 921.58 243.26 921.39 243.48 921.13 243.94 920.16 244.44 919.41 243.12 918.52 242.90 918.43 242.64 918.46 242.32 918.68 242.06 918.55 241.75 918.54 241.31 918.79 240.63 918.96 240.14 918.46 239.76 917.98 238.37 916.42 236.88 914.90 235.93 913.90 234.53 912.49 234.06 911.98 234.90 911.18 233.71 909.88 234.09 909.54 234.28 909.46 234.52 909.64 234.64 909.52 234.92 909.70 235.36 909.59 235.46 909.69 235.70 909.61 234.70 908.55 235.16 908.12 234.73 907.62 235.37 907.02 235.62 907.27 236.08 906.83 235.88 906.61 236.17 906.37 234.17 904.09 233.61 903.54 231.63 901.39 230.16 899.76 232.14 897.95 231.59 897.30 231.28 896.72 231.13 895.69 230.28 894.14 229.36 893.28 227.79 894.17 226.13 894.24 226.14 893.36 226.33 891.23 226.46 890.28 225.62 888.00 226.36 885.75 226.49 884.92 226.19 883.81 227.07 881.50 226.91 880.70 227.82 878.29 227.66 878.04 227.02 877.82 226.73 877.55 226.63 877.36 226.38 877.11 225.68 877.20 225.47 877.13 225.07 876.85 224.86 877.03 224.95 877.31 224.90 877.49 224.31 877.65 224.25 877.88 224.10 878.01 223.72 878.57 223.75 878.88 223.64 879.13 223.70 879.35 223.23 879.30 223.02 879.19 222.66 878.72 222.71 878.53 222.45 878.32 222.12 878.54 222.14 878.85 222.07 878.98 221.82 879.01 221.53 878.85 221.22 878.79 220.95 878.85 220.83 879.10 220.73 879.60 220.29 879.58 220.16 879.29 219.96 879.15 219.46 879.26 219.23 879.26 218.48 879.06 218.27 878.70 218.27 878.40 218.43 878.18 218.58 878.14 218.66 877.78 218.87 877.72 218.80 877.42 218.76 875.67 219.32 875.17 219.45 875.14 215.77 868.19 215.72 867.94 213.89 865.43 212.28 863.14 210.00 865.88 209.86 865.82 207.94 863.71 205.81 861.34 206.50 857.42 207.07 853.83 207.21 853.83 207.48 853.40 207.41 853.27 207.55 853.07 207.48 852.89 207.59 852.67 207.38 852.32 207.60 851.78 207.75 851.79 208.02 851.38 208.20 851.36 208.37 851.17 208.47 850.87 208.65 850.69 208.63 850.53 209.00 850.45 208.85 850.22 209.06 849.97 207.87 848.64 204.80 845.27 200.84 840.88 193.67 832.86 191.31 830.20 190.65 829.46 189.67 828.34 175.74 827.50 168.34 827.02 160.40 826.48 152.45 825.92 152.45 825.89 152.80 821.28 153.07 817.68 153.98 804.89 154.11 803.08 154.97 791.05 155.23 787.41 155.57 782.51 157.32 758.28 162.57 758.65 167.07 758.96 171.57 759.27 176.05 759.56 180.57 759.85 185.07 760.13 187.71 760.29 187.71 760.32 189.32 762.16 189.63 762.01 189.95 762.16 189.98 762.42 190.41 762.45 190.60 762.15 190.49 762.03 190.56 761.77 190.77 761.80 190.87 761.42 190.78 761.27 190.84 760.87 190.95 760.75 191.58 760.80 191.80 760.49 192.02 760.66 192.04 760.95 192.36 761.18 192.48 761.78 192.80 761.86 192.72 762.46 192.51 762.60 192.90 762.86 192.97 763.05 193.19 763.19 193.09 763.41 193.50 764.36 193.71 764.52 194.00 764.55 194.15 764.35 194.28 764.40 194.58 764.13 194.85 763.65Z\"},\"05\":{\"name\":\"Estrie\",\"path\":\"M340.41 940.97 340.32 941.55 340.50 941.59 340.71 942.04 340.63 942.22 340.71 942.39 340.65 942.80 340.89 943.09 341.08 943.13 341.36 943.48 341.37 943.59 341.13 943.84 341.15 944.03 341.46 944.45 341.29 944.67 341.03 944.67 341.00 944.96 340.90 945.15 340.23 945.49 339.77 945.67 339.82 945.81 339.40 946.01 338.95 946.00 338.81 945.85 338.39 945.86 338.25 946.12 337.85 946.49 337.28 946.83 336.92 947.23 336.64 947.35 336.29 947.77 336.29 947.90 336.04 948.05 335.78 947.79 335.42 948.04 335.02 947.95 334.84 948.00 334.60 948.23 334.66 948.37 334.55 948.67 333.98 949.28 333.58 949.81 333.49 950.05 333.32 950.03 332.92 950.25 332.86 950.47 332.59 950.66 332.45 951.00 331.96 951.15 331.84 951.10 331.44 951.30 331.22 951.68 331.10 952.04 330.90 952.21 330.90 952.34 330.42 952.79 330.39 952.94 330.16 953.26 329.85 953.38 329.73 953.71 329.91 954.00 330.19 954.26 329.89 954.33 329.60 954.77 329.46 954.88 329.37 955.18 329.20 955.49 328.94 955.75 328.86 956.04 328.68 956.07 328.42 956.36 328.41 956.75 328.83 957.01 328.82 957.27 328.59 957.64 328.64 957.85 328.98 958.19 329.32 958.29 329.59 958.53 329.54 958.96 329.63 959.11 329.96 959.22 329.98 959.74 330.22 959.76 330.68 960.09 331.15 960.15 331.44 960.77 331.73 961.12 331.93 961.15 332.03 961.38 331.90 961.75 331.73 961.80 331.74 962.01 331.93 962.23 332.15 962.28 332.27 962.47 332.19 962.61 331.82 962.71 331.69 962.88 331.59 963.23 331.74 963.42 331.66 963.59 331.13 963.86 330.81 963.83 330.72 963.40 330.07 962.92 329.89 962.86 329.70 962.99 329.37 963.01 329.25 962.90 328.97 962.97 328.76 963.11 328.29 962.81 328.08 962.64 328.06 962.35 327.55 961.93 327.50 961.75 327.54 961.42 327.29 961.28 327.14 961.02 326.76 961.15 326.61 961.01 326.10 960.85 325.86 961.11 325.56 961.02 325.28 961.57 324.94 961.67 324.88 961.93 324.64 962.28 324.37 962.53 324.39 962.93 324.49 963.07 324.69 963.08 324.83 963.22 324.88 963.46 325.09 963.79 325.23 964.48 325.02 964.58 324.96 964.86 324.80 965.02 324.97 965.21 324.86 965.49 324.67 965.58 324.56 965.83 324.63 966.25 324.83 966.50 325.00 966.48 325.09 966.86 324.92 967.42 324.75 967.59 324.83 967.93 324.56 968.09 323.92 968.38 324.14 968.54 324.06 969.18 323.89 969.34 323.77 969.72 323.39 970.05 323.36 970.44 323.48 970.60 323.41 971.07 323.75 971.45 323.80 971.61 323.49 971.62 323.04 971.90 322.37 971.62 321.99 971.58 321.52 971.19 321.50 970.84 321.60 970.62 321.48 970.30 321.16 970.10 321.22 969.90 320.98 969.64 320.80 969.30 320.61 969.15 320.71 968.69 320.86 968.51 320.97 968.20 320.91 967.97 320.69 967.70 320.76 967.35 320.40 967.17 320.29 966.95 319.95 966.89 319.71 966.57 319.44 965.83 319.10 965.96 318.86 966.20 318.63 966.12 318.32 966.19 318.02 966.09 317.55 965.53 317.20 965.33 317.12 965.54 317.18 966.04 317.43 966.25 317.44 966.45 317.26 966.89 316.95 967.09 316.65 967.09 316.31 967.38 316.07 967.24 315.78 967.21 315.50 967.29 315.29 967.16 315.04 967.23 314.68 967.53 314.48 967.52 313.77 967.81 313.49 968.18 313.54 968.30 313.28 968.72 313.44 968.91 313.27 969.24 313.05 969.31 313.04 969.57 312.93 969.69 312.73 970.34 312.58 970.42 312.38 970.92 312.14 971.01 311.80 971.03 311.45 970.71 311.25 970.59 310.99 970.81 310.68 970.92 310.55 971.15 310.29 970.90 310.26 970.72 309.98 970.52 309.94 970.37 309.70 970.34 309.42 970.54 308.99 970.53 308.96 970.40 308.60 970.60 308.58 970.35 308.42 969.96 308.04 969.52 307.66 969.34 307.53 969.35 307.40 969.12 307.35 968.64 307.26 968.27 307.31 968.14 307.02 967.98 306.71 968.09 306.65 967.82 306.43 967.74 306.31 967.85 306.11 967.83 305.94 967.96 305.66 968.46 305.35 968.50 305.14 968.76 304.75 968.84 304.53 969.25 303.78 969.46 303.60 969.36 303.48 969.56 303.63 969.82 303.73 970.27 303.48 970.57 302.97 970.74 302.85 970.86 302.64 971.37 302.44 971.28 302.18 970.90 301.95 970.86 301.75 970.93 301.55 971.16 301.25 971.38 300.97 971.30 300.71 971.06 300.37 971.06 300.46 971.25 301.00 971.74 301.34 971.99 301.48 972.23 301.89 972.35 302.09 973.02 301.77 973.33 301.83 973.47 301.56 973.94 301.42 974.02 301.43 974.33 301.25 974.80 301.01 975.20 301.04 975.39 300.92 975.77 300.65 976.00 300.54 976.48 300.67 976.57 300.84 976.93 300.89 977.18 300.77 977.43 299.95 978.06 299.89 978.50 299.64 978.68 299.34 979.31 299.15 979.53 298.87 979.49 298.40 980.05 298.38 980.22 298.05 980.30 298.14 980.54 298.00 980.89 298.00 981.19 297.82 981.20 297.75 981.40 297.83 981.61 298.30 981.73 298.21 982.27 298.02 982.44 297.87 983.13 297.88 983.35 295.10 983.35 293.54 983.30 290.26 983.31 288.03 983.26 286.05 983.26 281.81 983.31 280.58 983.24 276.35 983.25 274.16 983.22 272.59 983.16 270.27 983.13 267.95 983.12 267.05 983.09 266.33 983.10 265.47 983.00 264.12 982.90 263.37 982.87 260.95 982.67 259.84 982.62 257.82 982.61 256.87 982.57 255.73 982.33 254.97 982.22 253.80 982.10 251.14 981.95 249.38 981.89 246.54 981.75 245.54 981.70 243.14 981.66 240.88 981.66 237.05 981.41 234.15 981.38 235.38 978.21 235.68 977.73 235.26 977.72 235.27 976.88 235.59 976.89 235.63 976.49 235.95 976.74 236.01 976.66 235.93 974.56 236.52 974.58 236.60 972.83 236.63 971.75 236.44 971.49 237.76 970.54 237.18 969.74 237.41 969.69 237.50 968.82 236.39 967.66 236.73 964.48 236.14 963.84 236.34 962.11 236.94 962.75 238.01 961.57 238.60 961.10 239.34 961.90 239.91 961.78 240.11 961.99 239.97 963.35 240.68 964.08 240.68 963.66 241.08 964.08 241.34 963.14 241.42 963.22 241.60 962.53 241.65 961.68 242.28 962.35 242.61 961.03 243.20 961.18 243.57 959.65 243.39 960.00 243.26 959.77 242.92 959.69 243.16 958.67 241.90 958.37 241.86 958.22 241.90 957.80 241.86 957.37 242.72 957.57 243.39 957.70 243.57 956.94 244.19 957.09 244.30 956.65 244.57 956.28 245.04 956.80 245.21 956.86 245.55 956.53 245.99 956.44 246.29 956.48 246.68 956.63 246.85 956.57 247.62 956.75 247.86 955.45 248.42 953.19 249.46 953.21 249.42 953.95 251.28 954.03 252.62 954.12 252.61 953.69 253.19 953.73 253.18 953.32 254.02 953.36 255.92 953.47 255.85 954.11 256.72 954.17 256.58 955.66 260.30 955.98 261.85 956.09 261.71 957.56 261.57 958.39 262.12 958.46 263.50 958.57 263.53 957.44 263.52 956.86 263.57 955.58 263.69 954.23 264.62 954.19 264.70 952.18 265.37 952.15 265.45 950.94 265.80 950.98 265.81 950.70 266.08 950.72 266.09 950.43 267.17 950.46 267.84 951.02 268.58 950.06 270.25 947.97 269.00 946.87 267.48 945.56 268.01 944.98 268.65 944.38 270.20 942.56 270.82 941.95 271.00 942.10 271.03 942.28 270.84 942.69 270.51 942.77 270.57 943.06 270.97 943.11 271.22 943.26 271.33 943.60 271.20 943.83 270.91 944.03 270.90 944.23 271.22 944.45 271.38 944.85 271.40 945.10 271.52 945.26 272.12 944.52 275.45 940.56 277.49 938.06 278.53 936.85 280.21 938.19 282.61 940.07 282.81 939.76 283.25 939.62 283.68 939.84 283.86 939.82 284.04 939.67 284.40 940.01 284.60 939.74 284.90 940.01 285.08 939.74 287.14 937.13 288.52 935.34 290.03 936.51 291.36 937.57 291.94 938.06 293.58 939.36 294.30 938.47 294.83 938.90 294.94 938.76 295.22 938.96 295.32 939.14 295.16 939.31 297.15 940.87 297.90 939.97 298.83 940.68 300.25 939.35 302.24 941.38 302.84 942.02 303.01 941.73 303.17 941.77 303.62 941.52 304.07 941.09 304.48 940.58 304.79 940.04 304.92 939.57 304.85 939.11 305.01 938.51 305.01 938.17 304.89 937.54 304.69 937.22 304.49 937.04 304.51 936.79 304.64 936.37 305.42 937.00 307.47 938.77 307.95 938.18 308.54 938.68 309.19 937.91 310.48 939.01 311.11 939.62 311.86 938.74 312.26 938.25 312.06 938.10 312.80 937.18 312.29 936.35 312.12 935.95 312.05 935.61 312.15 934.54 312.00 934.03 311.77 933.63 313.08 931.85 315.38 933.52 315.82 932.91 317.83 934.38 318.02 934.17 319.18 935.01 319.41 934.74 319.94 934.24 320.74 934.78 321.95 935.63 321.84 935.81 321.85 938.30 321.92 941.68 325.60 941.65 328.22 941.64 329.58 941.62 330.84 941.58 331.02 941.32 331.24 940.79 331.17 940.54 331.39 940.55 332.03 941.86 333.50 941.14 337.12 939.28 338.19 941.35 340.11 940.37 340.41 940.97Z\"},\"06\":{\"name\":\"Montréal\",\"path\":\"M222.84 943.25 222.73 943.32 222.60 943.70 222.35 944.20 222.30 945.12 222.40 945.63 222.64 946.14 222.61 946.35 222.24 947.12 221.86 947.67 221.70 948.02 221.60 948.41 221.59 948.82 221.68 949.62 221.60 949.89 221.14 950.77 220.90 951.39 220.58 951.81 220.25 952.12 220.60 954.18 220.61 954.40 220.20 954.58 220.37 955.11 220.47 955.89 220.47 956.29 220.39 956.84 220.16 957.40 219.91 957.78 219.61 958.08 219.19 958.37 218.78 958.52 218.33 958.58 217.54 958.57 216.85 958.81 216.57 958.86 215.79 958.87 215.61 958.79 215.17 958.39 214.62 958.12 213.77 958.03 212.86 958.04 210.98 958.12 210.56 958.20 210.26 958.32 209.71 958.69 209.28 959.06 209.00 959.37 208.65 959.86 207.80 959.20 207.38 958.92 206.63 958.53 206.34 958.42 205.86 958.38 205.52 958.54 205.16 958.87 204.95 958.96 204.56 958.94 203.75 958.74 203.39 958.55 203.22 958.25 202.76 958.03 202.55 957.77 202.44 956.77 202.34 956.33 202.12 955.57 202.86 955.23 203.36 954.76 203.86 953.96 204.70 952.95 205.25 952.64 205.62 952.26 206.18 952.04 206.40 952.25 206.67 952.25 206.85 952.35 207.43 952.42 207.67 952.69 207.90 952.84 208.15 952.52 208.70 952.54 209.08 952.72 209.45 952.63 209.91 952.82 210.04 952.96 211.15 953.06 211.34 952.98 211.61 952.69 211.88 952.64 212.15 952.23 212.60 951.99 212.94 951.70 213.31 951.57 213.45 951.40 213.87 951.14 214.47 951.03 214.72 950.80 215.10 950.18 215.13 949.72 215.47 949.26 215.85 948.61 216.03 948.38 216.26 947.81 216.34 947.50 216.67 946.90 217.15 946.38 217.63 945.96 217.86 945.88 218.50 945.44 219.34 944.95 219.72 944.62 220.26 944.37 220.64 943.97 220.78 943.58 220.97 943.29 221.13 943.19 221.88 942.97 222.14 942.96 222.39 943.08 222.82 942.85 222.84 943.25Z\"},\"07\":{\"name\":\"Outaouais\",\"path\":\"M152.45 825.89 151.81 825.85 151.64 826.21 152.01 826.78 152.06 827.08 151.88 827.42 152.17 827.76 152.00 828.02 152.04 828.35 152.20 828.80 152.50 828.80 152.70 829.08 152.77 829.49 153.16 829.89 153.44 829.97 153.53 830.24 153.86 830.62 153.80 830.79 154.04 830.93 154.50 831.02 154.56 831.32 154.82 831.53 154.79 831.91 155.39 832.97 155.61 833.17 155.69 833.44 155.28 834.18 155.44 834.57 155.45 835.03 155.58 835.17 155.72 835.72 156.18 835.86 156.51 835.81 156.60 835.72 156.60 835.43 156.43 835.26 156.45 835.08 156.69 834.87 156.73 834.64 156.96 834.42 157.13 833.96 157.53 833.75 157.66 834.19 157.99 834.47 158.02 834.70 157.83 835.07 157.61 835.34 157.51 835.93 157.54 836.62 157.77 837.05 158.23 836.81 158.38 837.23 158.76 837.35 158.96 837.73 159.16 837.90 159.32 837.79 159.49 838.24 159.09 838.66 158.72 839.35 158.34 839.88 158.10 840.09 157.73 840.60 157.53 841.06 157.03 841.49 157.04 841.75 156.62 842.23 156.41 842.85 156.42 843.10 156.30 843.38 156.30 843.90 156.17 844.13 156.01 844.58 155.59 844.96 155.25 845.35 154.71 845.87 154.64 846.11 154.34 846.58 153.61 847.19 153.39 847.28 153.15 847.66 153.11 847.84 152.68 848.72 152.54 849.21 152.74 849.75 152.99 850.00 153.07 850.39 152.99 850.68 152.71 851.00 152.64 851.24 152.60 851.79 152.40 852.06 152.34 852.30 152.11 852.61 151.77 852.76 151.59 852.77 151.03 853.51 150.79 853.51 150.40 853.87 150.37 854.11 149.95 854.66 149.59 855.27 149.30 855.66 148.96 855.95 148.79 856.19 148.53 856.13 148.32 856.20 148.22 856.42 147.73 856.89 147.44 857.28 146.90 857.40 146.30 857.42 146.23 857.26 146.19 856.81 146.25 856.46 146.40 856.36 146.50 856.11 146.35 856.00 146.41 855.68 146.31 855.30 146.45 854.96 146.40 854.49 146.22 854.29 146.13 853.79 146.05 853.62 145.78 853.40 145.78 852.70 145.65 852.41 145.85 851.87 145.58 851.85 145.18 851.65 144.77 851.58 144.64 851.61 144.52 851.94 144.19 851.96 143.76 851.66 143.40 851.47 143.46 851.78 143.44 852.31 143.01 852.30 142.85 852.36 142.43 852.03 142.10 852.08 142.15 851.48 142.22 851.15 142.20 850.96 141.96 850.69 141.43 850.24 141.21 850.21 141.00 850.03 140.50 849.45 140.17 849.43 139.32 849.67 138.50 850.35 138.37 850.50 137.99 850.73 137.79 850.66 137.14 851.19 137.10 851.35 136.79 851.66 136.67 851.87 136.34 851.96 136.06 852.37 135.79 852.61 135.43 853.11 135.21 853.12 135.08 853.40 134.86 853.43 134.33 853.92 134.25 854.25 133.94 854.47 133.28 855.24 132.64 855.28 132.57 855.46 132.25 855.40 131.97 855.66 131.67 855.74 131.54 855.86 131.26 855.88 131.22 855.58 130.93 855.53 130.78 855.36 130.54 855.38 130.35 855.27 129.90 855.60 129.46 855.75 129.25 855.70 128.85 855.74 128.47 856.43 128.62 856.82 128.49 857.02 128.56 857.52 128.49 857.75 128.69 858.19 128.71 858.88 128.51 859.32 128.53 859.52 128.40 859.88 128.26 860.57 128.29 860.70 128.20 861.86 128.09 862.39 128.11 863.25 127.91 863.38 127.89 863.98 127.74 864.14 127.86 864.31 127.36 864.60 127.20 864.80 126.80 864.80 126.37 865.22 126.17 865.23 126.06 865.59 126.36 865.80 126.30 866.14 126.67 866.69 126.59 866.86 126.28 866.99 126.25 867.18 126.44 867.45 126.43 867.70 126.29 867.94 126.35 868.45 126.24 868.65 126.24 869.12 126.32 869.75 126.41 869.86 126.44 870.22 126.79 870.26 127.00 870.44 127.14 870.72 127.32 870.74 127.50 870.55 127.71 870.87 128.05 870.89 128.23 871.16 128.73 871.49 129.07 871.39 129.38 871.98 129.69 872.16 130.14 871.89 130.36 872.02 130.44 872.25 130.63 872.44 131.29 872.42 131.48 872.72 132.07 872.96 132.43 873.24 132.54 873.39 132.83 873.57 132.91 873.76 133.40 874.32 133.97 874.88 134.18 875.14 134.31 875.43 134.49 876.17 134.64 876.51 135.05 876.70 135.43 876.62 135.58 876.52 135.84 876.74 136.06 876.83 136.23 876.77 136.56 876.51 137.22 876.36 137.55 876.19 137.85 875.82 137.84 875.57 137.98 875.29 140.38 875.47 139.97 880.99 139.83 882.72 139.57 885.09 139.47 885.35 139.43 886.56 139.36 887.44 139.26 889.17 139.20 890.65 139.19 891.48 139.13 892.25 138.89 896.10 138.79 897.70 140.27 897.78 140.25 898.15 140.11 899.28 139.96 901.20 139.75 904.44 139.71 904.86 137.98 904.77 137.00 904.76 135.62 904.71 135.89 905.08 136.04 905.12 136.55 905.63 136.70 905.90 136.66 906.34 136.49 906.50 136.39 906.87 136.14 907.37 135.96 908.10 135.47 908.63 135.34 909.16 135.44 909.37 135.70 909.59 135.61 909.91 135.39 910.06 135.33 910.89 135.44 911.42 135.66 911.47 135.76 911.61 135.64 911.76 135.67 911.98 135.82 912.20 136.00 912.02 136.83 912.08 136.68 914.61 136.62 915.33 136.60 916.41 136.48 918.17 136.48 919.30 136.39 920.36 137.27 920.39 138.34 920.48 138.70 920.55 138.53 920.72 138.10 920.89 138.03 920.80 137.63 920.96 137.04 921.48 136.77 921.79 135.99 922.38 135.84 922.37 135.55 922.59 135.76 922.76 135.44 923.18 135.76 923.17 135.60 923.52 135.36 923.49 135.33 923.76 135.58 924.13 136.17 923.88 136.63 923.44 136.80 923.14 136.96 923.14 137.16 923.30 137.78 923.36 139.90 923.50 140.07 923.32 140.08 922.84 141.68 922.96 141.73 922.31 142.51 922.36 142.42 923.62 143.25 923.68 146.13 923.82 149.73 924.05 149.89 921.68 150.21 917.24 156.18 917.63 157.63 917.73 157.75 917.45 159.05 917.53 159.14 915.95 159.94 916.01 160.03 914.46 160.75 914.51 160.83 913.17 161.63 913.23 161.70 911.57 163.31 911.67 163.13 912.89 162.94 914.41 162.58 916.20 162.34 917.76 164.74 917.93 165.01 917.88 166.63 917.93 168.07 918.01 167.92 920.41 169.58 920.52 171.00 920.66 170.92 922.42 170.87 923.06 171.64 923.11 171.60 923.86 171.84 923.88 171.72 925.51 172.59 925.57 172.63 926.37 172.89 926.36 172.83 927.12 174.25 927.18 174.33 925.70 176.79 925.90 176.43 927.19 176.21 928.07 176.00 929.51 175.89 930.43 175.60 931.28 175.33 932.37 174.99 932.35 174.73 933.30 173.94 935.43 173.31 937.27 173.16 937.86 172.03 941.99 171.48 943.89 170.70 943.91 169.83 943.82 168.71 943.47 167.47 943.32 166.80 943.20 166.51 943.21 166.22 943.32 165.74 943.75 165.36 944.29 164.90 944.67 164.52 944.91 163.70 945.34 162.91 945.64 162.42 945.75 161.60 945.85 161.11 945.82 159.33 946.41 159.04 946.45 158.43 946.39 158.07 946.29 157.73 946.27 157.34 946.34 156.61 946.00 156.00 945.66 155.08 945.60 154.71 945.66 154.09 946.03 152.30 947.02 151.93 947.41 151.24 947.75 150.30 948.11 148.86 948.57 148.48 948.64 147.84 948.64 147.53 948.75 147.19 948.75 146.63 948.67 146.27 948.83 145.35 948.89 144.43 949.18 143.25 949.62 142.97 949.79 142.46 950.37 142.21 950.51 141.27 950.86 140.93 950.92 139.95 950.94 139.46 950.99 139.10 951.08 138.28 951.19 137.39 951.34 137.01 951.52 136.81 951.74 136.51 952.22 136.33 952.69 136.24 953.15 136.15 953.26 135.56 953.40 135.43 953.61 135.14 953.57 134.63 953.75 134.09 953.77 133.88 954.02 133.80 954.33 133.30 954.92 133.02 955.20 132.54 955.50 132.16 955.64 131.75 955.71 130.75 955.63 130.54 955.54 130.29 955.32 128.18 952.86 126.67 950.73 125.69 949.61 123.32 948.20 121.98 947.20 121.65 947.02 121.11 946.89 120.44 946.82 119.47 946.94 118.89 946.93 118.04 946.67 117.33 946.63 116.46 946.87 116.19 947.20 115.94 948.40 115.92 948.77 115.84 949.11 115.48 949.29 114.53 949.10 114.31 949.18 113.69 949.23 113.11 949.35 112.42 949.42 111.62 949.56 111.40 949.54 110.55 949.23 110.03 948.77 109.56 948.27 108.76 947.38 108.37 947.03 108.04 946.86 106.94 946.51 106.51 946.24 106.18 945.93 105.92 945.82 105.65 945.83 105.06 945.66 104.19 945.27 103.96 945.14 103.06 944.81 102.03 944.56 100.99 943.71 100.68 943.34 100.19 942.94 99.94 942.44 99.67 941.52 99.73 940.94 99.86 940.73 99.79 940.32 99.99 939.74 100.01 939.29 99.84 939.03 99.56 938.89 99.42 938.65 99.33 938.23 99.07 937.67 98.76 937.31 98.69 936.84 98.93 936.41 99.16 936.29 99.52 936.23 99.68 935.85 99.38 935.09 99.55 934.71 99.17 934.15 99.13 933.89 98.91 933.87 98.60 933.97 98.37 933.92 98.02 933.73 97.31 933.57 96.91 933.16 96.72 933.02 96.78 932.53 96.90 932.29 96.75 932.12 96.86 931.88 96.55 930.17 96.73 929.76 97.24 929.09 97.24 928.72 97.17 927.88 97.25 927.34 97.45 926.73 97.40 926.51 97.13 926.16 97.04 925.47 96.92 925.31 96.52 925.27 96.10 925.16 95.86 925.02 95.42 924.64 94.74 924.19 94.34 924.12 93.69 924.08 93.51 924.02 92.78 923.64 92.24 923.68 91.61 923.68 91.36 923.93 91.56 925.10 92.00 925.49 92.22 925.93 92.16 926.27 91.98 926.35 91.49 926.22 91.32 926.27 91.32 926.60 91.67 927.82 91.72 928.14 91.66 928.37 91.49 928.59 91.06 928.93 90.69 929.16 90.18 929.34 89.22 929.49 88.84 929.48 88.48 929.36 88.20 929.12 87.77 928.66 87.46 928.27 87.20 928.08 86.73 928.06 86.52 928.00 86.30 927.79 85.91 927.01 85.58 926.65 84.98 926.28 84.46 926.09 83.90 925.98 83.60 925.80 83.25 925.46 82.17 924.55 81.25 924.20 81.09 924.07 80.83 923.59 80.32 922.34 80.06 922.01 79.83 921.48 79.84 921.17 79.73 921.00 79.25 920.63 79.05 920.30 78.75 920.08 78.55 919.72 78.39 919.07 78.19 917.86 78.19 917.62 78.38 916.99 78.71 916.20 78.74 915.97 78.42 915.61 77.87 915.39 77.41 915.03 75.90 913.46 75.20 912.80 74.90 912.60 74.21 911.98 72.95 910.93 72.33 910.40 71.47 909.75 70.87 909.25 69.42 907.99 68.67 907.21 68.46 907.03 67.68 906.51 67.31 906.23 66.25 905.60 65.63 905.17 64.90 904.63 64.58 904.44 64.41 904.46 64.07 905.10 63.82 905.22 63.56 905.09 63.13 904.73 62.81 904.54 62.38 904.41 61.77 904.42 61.53 904.36 60.66 904.29 59.89 903.71 59.52 903.60 59.12 903.57 58.65 903.40 58.38 903.35 58.20 902.75 58.21 902.41 58.03 901.89 58.13 901.55 58.31 901.53 58.32 901.21 58.43 900.97 58.36 900.36 58.22 900.06 58.40 899.78 58.37 899.52 58.55 899.23 58.83 898.93 58.85 898.67 58.71 898.45 58.92 898.31 59.08 897.47 59.20 897.32 59.61 897.10 59.67 896.91 59.67 896.51 60.17 895.90 60.34 895.51 60.53 895.27 61.00 894.93 61.32 894.89 61.64 894.58 61.88 894.49 62.25 893.64 62.60 893.55 62.82 893.43 63.03 893.14 63.24 893.09 63.28 892.56 63.11 892.30 62.84 892.02 62.65 891.55 62.50 891.35 62.77 890.88 62.54 890.52 62.43 890.48 62.22 890.14 62.31 889.97 62.66 889.67 62.66 889.25 62.82 889.04 62.90 888.77 62.96 888.27 63.17 887.80 63.01 887.47 63.26 887.38 63.22 886.95 62.96 886.76 62.70 886.70 62.51 886.41 62.32 886.26 62.41 886.09 62.95 885.75 63.06 885.33 62.66 885.08 62.57 884.71 62.69 884.42 62.57 884.28 62.41 883.66 62.60 883.44 62.88 883.29 63.02 883.02 62.96 882.76 62.77 882.66 62.70 881.97 62.46 881.55 62.09 881.44 61.37 880.77 61.11 880.73 60.96 880.54 60.90 880.26 60.68 880.14 60.53 879.73 60.27 879.48 60.17 879.00 60.16 878.66 60.34 878.47 60.60 878.37 60.54 878.10 60.84 877.98 60.94 877.72 61.29 877.62 61.36 877.38 61.25 876.71 61.55 876.72 61.85 876.45 62.08 875.99 62.02 875.65 61.81 875.48 61.89 875.23 61.78 874.67 61.96 874.47 61.84 874.13 61.76 873.57 61.90 873.24 61.97 872.91 61.82 872.58 61.67 872.41 61.92 872.25 61.95 872.00 61.79 871.51 61.91 871.12 62.16 870.74 62.40 870.75 62.57 870.49 62.45 870.12 62.56 869.85 62.39 869.78 62.31 870.07 62.19 870.14 61.91 870.07 61.42 869.77 61.23 869.77 61.18 869.60 60.92 869.76 60.53 869.51 60.24 869.64 59.92 869.25 59.99 869.08 60.41 869.09 60.16 868.87 60.03 868.39 60.10 868.08 60.09 867.64 60.31 867.70 60.53 867.36 60.50 867.15 60.64 866.86 60.63 866.60 60.72 866.30 60.54 866.27 60.44 866.08 60.79 865.37 61.08 865.17 61.48 864.57 61.63 864.48 61.76 864.02 61.85 863.27 62.10 863.33 62.18 863.51 62.25 863.95 62.19 864.40 62.19 865.20 61.85 865.96 62.03 866.21 62.28 865.04 62.45 864.66 62.57 864.63 62.68 864.05 62.63 863.81 62.42 863.30 62.49 862.40 62.62 862.12 62.81 861.95 62.61 861.76 62.57 860.88 62.76 860.22 63.37 859.32 63.01 859.24 62.75 859.36 62.76 859.59 62.55 859.55 62.55 859.17 62.73 858.88 62.89 858.13 62.89 857.90 63.07 857.73 63.36 857.63 63.26 857.25 63.64 856.85 63.61 856.51 63.64 856.11 63.73 855.90 63.60 855.15 63.67 854.64 63.78 854.33 63.64 854.31 63.26 854.43 63.26 853.91 63.41 853.58 63.33 853.35 63.46 853.13 63.40 852.44 63.23 852.31 63.17 852.01 63.42 851.89 63.27 851.72 63.41 851.54 63.29 851.38 63.31 851.14 63.24 850.66 63.46 850.37 63.42 850.01 63.46 849.58 63.55 849.40 63.53 849.12 63.37 848.72 63.44 848.37 63.51 847.30 63.40 846.91 63.23 846.74 62.76 846.57 61.93 846.59 61.86 846.36 61.42 846.06 61.40 845.73 61.20 845.40 61.21 845.24 61.05 845.06 63.08 845.27 71.50 846.13 71.62 844.98 75.47 845.35 79.58 845.76 78.81 853.70 84.58 854.23 94.84 855.17 95.56 847.27 103.47 848.00 111.40 848.69 112.87 831.53 113.69 832.50 114.83 833.75 115.36 834.21 116.87 835.80 117.44 836.44 117.96 836.96 118.30 836.71 118.88 834.33 118.71 832.28 118.75 832.08 118.56 831.84 118.23 831.97 118.17 832.07 117.89 832.03 117.83 832.13 117.52 832.07 117.45 831.91 117.03 832.12 116.98 831.99 116.49 832.04 116.22 831.97 116.23 831.76 116.47 831.71 116.40 831.42 116.57 831.31 116.75 831.36 116.89 831.15 117.08 831.33 117.26 831.30 117.10 831.04 117.14 830.88 117.41 830.91 117.55 830.57 117.71 830.45 117.90 830.52 118.31 830.50 118.48 830.36 118.43 830.20 118.56 830.02 118.88 830.10 119.11 830.04 119.19 829.78 119.48 829.69 119.41 829.37 119.58 829.32 119.90 829.37 120.18 828.99 120.25 829.25 120.44 829.53 120.63 829.57 120.85 829.45 121.28 829.40 121.52 829.45 122.04 829.32 122.13 829.09 122.42 828.80 122.64 828.91 123.06 828.96 123.22 828.75 123.52 828.61 123.82 828.10 123.75 827.91 124.25 827.83 124.76 827.53 125.07 827.47 125.20 827.27 125.43 827.23 125.59 827.07 125.41 826.82 125.72 826.45 125.88 826.15 126.25 826.08 126.42 825.86 126.66 825.77 126.83 826.05 127.09 826.13 127.15 826.02 127.45 826.00 127.76 825.89 128.10 825.59 128.35 825.73 128.16 825.94 128.16 826.19 128.59 826.18 128.68 826.36 128.62 826.55 128.89 826.71 129.77 826.42 130.02 826.58 130.57 826.68 130.79 826.37 131.26 826.43 131.43 826.35 131.87 826.64 132.08 826.55 132.40 826.21 132.68 826.52 132.86 826.42 133.00 826.58 133.30 826.63 133.69 826.46 133.86 826.67 134.06 826.68 134.33 826.54 134.47 826.17 135.19 825.94 135.38 825.61 135.28 825.17 135.40 824.75 135.43 824.45 135.37 824.14 137.34 822.77 137.53 822.79 137.85 822.68 137.99 822.97 138.25 823.20 138.47 823.23 138.64 823.11 138.78 822.86 139.06 823.00 139.21 822.87 139.52 822.85 139.93 822.92 140.18 822.77 140.42 823.11 140.28 823.44 140.44 823.77 140.27 823.92 139.82 823.69 139.80 824.08 139.91 824.56 140.15 824.44 140.72 824.59 141.02 824.81 140.90 825.31 140.77 825.68 140.97 826.11 140.86 826.39 140.94 826.66 140.64 826.79 140.29 826.71 140.18 827.04 140.45 827.25 140.39 827.45 139.95 827.61 140.21 827.76 140.18 828.23 140.34 828.31 140.64 828.24 140.75 828.55 141.05 828.58 141.42 829.20 141.28 829.49 141.38 829.73 141.37 830.06 141.55 830.25 141.77 830.14 142.07 829.86 142.14 829.63 142.32 829.56 142.21 828.69 142.04 828.14 142.36 827.47 142.55 827.24 142.62 826.41 142.63 825.98 142.90 825.78 142.99 825.50 142.90 825.26 142.94 824.95 142.82 824.60 142.87 824.50 142.59 824.18 142.80 823.89 142.72 823.63 142.96 823.41 143.01 823.13 143.29 822.83 143.39 822.24 143.76 822.10 144.07 821.83 144.23 821.81 144.56 821.61 144.74 821.22 145.06 821.07 145.27 820.74 151.03 821.16 152.80 821.28 152.45 825.89Z\"},\"08\":{\"name\":\"Abitibi-Témiscamingue\",\"path\":\"M157.32 758.28 155.57 782.51 155.23 787.41 154.97 791.05 154.11 803.08 153.98 804.89 153.07 817.68 152.80 821.28 151.03 821.16 145.27 820.74 145.06 821.07 144.74 821.22 144.56 821.61 144.23 821.81 144.07 821.83 143.76 822.10 143.39 822.24 143.29 822.83 143.01 823.13 142.96 823.41 142.72 823.63 142.80 823.89 142.59 824.18 142.87 824.50 142.82 824.60 142.94 824.95 142.90 825.26 142.99 825.50 142.90 825.78 142.63 825.98 142.62 826.41 142.55 827.24 142.36 827.47 142.04 828.14 142.21 828.69 142.32 829.56 142.14 829.63 142.07 829.86 141.77 830.14 141.55 830.25 141.37 830.06 141.38 829.73 141.28 829.49 141.42 829.20 141.05 828.58 140.75 828.55 140.64 828.24 140.34 828.31 140.18 828.23 140.21 827.76 139.95 827.61 140.39 827.45 140.45 827.25 140.18 827.04 140.29 826.71 140.64 826.79 140.94 826.66 140.86 826.39 140.97 826.11 140.77 825.68 140.90 825.31 141.02 824.81 140.72 824.59 140.15 824.44 139.91 824.56 139.80 824.08 139.82 823.69 140.27 823.92 140.44 823.77 140.28 823.44 140.42 823.11 140.18 822.77 139.93 822.92 139.52 822.85 139.21 822.87 139.06 823.00 138.78 822.86 138.64 823.11 138.47 823.23 138.25 823.20 137.99 822.97 137.85 822.68 137.53 822.79 137.34 822.77 135.37 824.14 135.43 824.45 135.40 824.75 135.28 825.17 135.38 825.61 135.19 825.94 134.47 826.17 134.33 826.54 134.06 826.68 133.86 826.67 133.69 826.46 133.30 826.63 133.00 826.58 132.86 826.42 132.68 826.52 132.40 826.21 132.08 826.55 131.87 826.64 131.43 826.35 131.26 826.43 130.79 826.37 130.57 826.68 130.02 826.58 129.77 826.42 128.89 826.71 128.62 826.55 128.68 826.36 128.59 826.18 128.16 826.19 128.16 825.94 128.35 825.73 128.10 825.59 127.76 825.89 127.45 826.00 127.15 826.02 127.09 826.13 126.83 826.05 126.66 825.77 126.42 825.86 126.25 826.08 125.88 826.15 125.72 826.45 125.41 826.82 125.59 827.07 125.43 827.23 125.20 827.27 125.07 827.47 124.76 827.53 124.25 827.83 123.75 827.91 123.82 828.10 123.52 828.61 123.22 828.75 123.06 828.96 122.64 828.91 122.42 828.80 122.13 829.09 122.04 829.32 121.52 829.45 121.28 829.40 120.85 829.45 120.63 829.57 120.44 829.53 120.25 829.25 120.18 828.99 119.90 829.37 119.58 829.32 119.41 829.37 119.48 829.69 119.19 829.78 119.11 830.04 118.88 830.10 118.56 830.02 118.43 830.20 118.48 830.36 118.31 830.50 117.90 830.52 117.71 830.45 117.55 830.57 117.41 830.91 117.14 830.88 117.10 831.04 117.26 831.30 117.08 831.33 116.89 831.15 116.75 831.36 116.57 831.31 116.40 831.42 116.47 831.71 116.23 831.76 116.22 831.97 116.49 832.04 116.98 831.99 117.03 832.12 117.45 831.91 117.52 832.07 117.83 832.13 117.89 832.03 118.17 832.07 118.23 831.97 118.56 831.84 118.75 832.08 118.71 832.28 118.88 834.33 118.30 836.71 117.96 836.96 117.44 836.44 116.87 835.80 115.36 834.21 114.83 833.75 113.69 832.50 112.87 831.53 111.40 848.69 103.47 848.00 95.56 847.27 94.84 855.17 84.58 854.23 78.81 853.70 79.58 845.76 75.47 845.35 71.62 844.98 71.50 846.13 63.08 845.27 61.05 845.06 61.21 845.24 61.20 845.40 61.40 845.73 61.42 846.06 61.86 846.36 61.93 846.59 62.76 846.57 63.23 846.74 63.40 846.91 63.51 847.30 63.44 848.37 63.37 848.72 63.53 849.12 63.55 849.40 63.46 849.58 63.42 850.01 63.46 850.37 63.24 850.66 63.31 851.14 63.29 851.38 63.41 851.54 63.27 851.72 63.42 851.89 63.17 852.01 63.23 852.31 63.40 852.44 63.46 853.13 63.33 853.35 63.41 853.58 63.26 853.91 63.26 854.43 63.64 854.31 63.78 854.33 63.67 854.64 63.60 855.15 63.73 855.90 63.64 856.11 63.61 856.51 63.64 856.85 63.26 857.25 63.36 857.63 63.07 857.73 62.89 857.90 62.89 858.13 62.73 858.88 62.55 859.17 62.55 859.55 62.76 859.59 62.75 859.36 63.01 859.24 63.37 859.32 62.76 860.22 62.57 860.88 62.61 861.76 62.81 861.95 62.62 862.12 62.49 862.40 62.42 863.30 62.63 863.81 62.68 864.05 62.57 864.63 62.45 864.66 62.28 865.04 62.03 866.21 61.85 865.96 62.19 865.20 62.19 864.40 62.25 863.95 62.18 863.51 62.10 863.33 61.85 863.27 61.76 864.02 61.63 864.48 61.48 864.57 61.08 865.17 60.79 865.37 60.44 866.08 60.54 866.27 60.72 866.30 60.63 866.60 60.64 866.86 60.50 867.15 60.53 867.36 60.31 867.70 60.09 867.64 60.10 868.08 60.03 868.39 60.16 868.87 60.41 869.09 59.99 869.08 59.92 869.25 60.24 869.64 60.53 869.51 60.92 869.76 61.18 869.60 61.23 869.77 61.42 869.77 61.91 870.07 62.19 870.14 62.31 870.07 62.39 869.78 62.56 869.85 62.45 870.12 62.57 870.49 62.40 870.75 62.16 870.74 61.91 871.12 61.79 871.51 61.95 872.00 61.92 872.25 61.67 872.41 61.82 872.58 61.97 872.91 61.90 873.24 61.76 873.57 61.84 874.13 61.96 874.47 61.78 874.67 61.89 875.23 61.81 875.48 62.02 875.65 62.08 875.99 61.85 876.45 61.55 876.72 61.25 876.71 61.36 877.38 61.29 877.62 60.94 877.72 60.84 877.98 60.54 878.10 60.60 878.37 60.34 878.47 60.16 878.66 60.17 879.00 60.27 879.48 60.53 879.73 60.68 880.14 60.90 880.26 60.96 880.54 61.11 880.73 61.37 880.77 62.09 881.44 62.46 881.55 62.70 881.97 62.77 882.66 62.96 882.76 63.02 883.02 62.88 883.29 62.60 883.44 62.41 883.66 62.57 884.28 62.69 884.42 62.57 884.71 62.66 885.08 63.06 885.33 62.95 885.75 62.41 886.09 62.32 886.26 62.51 886.41 62.70 886.70 62.96 886.76 63.22 886.95 63.26 887.38 63.01 887.47 63.17 887.80 62.96 888.27 62.90 888.77 62.82 889.04 62.66 889.25 62.66 889.67 62.31 889.97 62.22 890.14 62.43 890.48 62.54 890.52 62.77 890.88 62.50 891.35 62.65 891.55 62.84 892.02 63.11 892.30 63.28 892.56 63.24 893.09 63.03 893.14 62.82 893.43 62.60 893.55 62.25 893.64 61.88 894.49 61.64 894.58 61.32 894.89 61.00 894.93 60.53 895.27 60.34 895.51 60.17 895.90 59.67 896.51 59.67 896.91 59.61 897.10 59.20 897.32 59.08 897.47 58.92 898.31 58.71 898.45 58.85 898.67 58.83 898.93 58.55 899.23 58.37 899.52 58.40 899.78 58.22 900.06 58.36 900.36 58.43 900.97 58.32 901.21 58.31 901.53 58.13 901.55 58.03 901.89 58.21 902.41 58.20 902.75 58.38 903.35 58.13 903.28 57.53 902.97 56.98 902.52 55.94 902.12 55.54 902.13 54.88 901.82 54.54 901.50 54.06 901.27 53.36 900.79 53.00 900.52 52.65 900.51 51.77 900.41 51.52 900.51 51.34 900.89 51.11 900.91 50.74 900.80 50.39 900.64 49.47 899.90 49.08 899.63 48.28 899.16 47.88 898.60 47.22 898.30 46.74 898.30 46.19 898.19 45.39 898.25 44.89 898.40 44.41 898.37 43.83 898.03 43.46 897.92 42.93 898.01 42.08 898.45 41.85 898.61 41.30 898.86 40.98 898.94 40.15 898.58 39.64 898.11 38.85 897.21 38.53 896.75 38.19 896.54 37.87 896.41 37.05 896.19 35.96 896.07 34.67 895.91 34.31 895.93 33.79 895.84 33.33 895.61 32.99 895.37 32.30 895.00 30.61 894.23 30.28 894.12 29.48 894.00 29.07 893.87 28.19 893.86 27.88 893.88 27.27 893.85 26.86 893.76 26.55 893.51 26.20 893.34 26.04 893.14 25.70 892.52 25.67 892.10 25.92 891.39 26.06 890.80 25.87 889.97 25.70 889.90 25.47 889.64 25.08 889.50 24.91 889.35 24.21 888.53 24.18 888.35 23.97 888.22 23.64 887.81 23.39 887.65 22.20 886.72 21.83 886.51 21.53 886.40 21.07 885.88 20.23 885.08 19.90 884.48 19.41 883.91 18.92 882.96 18.73 882.35 18.47 882.03 18.15 881.73 17.87 881.30 17.77 880.90 17.49 880.58 17.19 880.05 17.05 879.41 17.06 879.09 16.98 878.69 17.00 878.39 17.21 877.74 17.24 877.50 16.86 876.97 16.79 876.79 16.79 876.05 16.69 875.33 16.44 875.14 16.29 874.84 15.84 874.56 15.35 873.95 15.27 873.72 14.73 873.30 14.65 873.08 14.77 872.67 14.61 872.39 14.41 872.29 14.10 871.81 14.14 871.58 14.07 871.08 13.99 870.89 14.02 870.61 13.69 870.00 13.65 869.78 13.47 869.44 13.41 868.50 13.21 867.95 12.99 867.16 12.94 866.49 12.61 865.50 12.48 865.23 12.47 864.99 12.18 864.20 12.00 863.92 11.78 863.82 11.31 863.82 10.58 863.50 10.47 863.22 10.15 862.76 10.07 862.51 10.03 862.06 9.72 861.84 9.67 861.35 9.17 860.39 8.63 859.83 8.41 859.45 8.15 858.71 7.72 858.08 7.47 857.59 7.24 856.75 7.10 856.05 6.87 855.44 6.96 855.00 6.96 854.74 6.86 854.25 6.82 853.59 6.63 853.08 5.56 851.76 5.27 851.35 5.03 850.83 4.21 849.40 4.06 849.03 3.93 848.50 3.89 847.96 3.74 847.34 3.87 846.92 3.89 846.42 4.19 845.63 4.31 844.84 4.91 843.21 4.97 842.93 4.96 842.54 4.76 842.18 4.70 841.85 4.73 841.57 4.94 841.05 5.15 840.69 5.26 840.33 5.18 839.81 5.21 839.51 5.15 839.07 5.01 838.74 4.73 838.40 4.67 837.95 4.41 837.79 4.22 837.59 4.05 837.21 3.71 836.75 3.64 836.48 3.98 836.01 3.93 835.85 3.43 835.70 3.15 835.55 3.03 834.81 2.86 834.30 2.48 833.75 2.03 833.27 1.63 832.62 1.44 832.10 1.24 831.44 1.08 830.64 1.01 830.05 1.00 829.21 1.08 828.68 1.23 828.16 1.56 827.39 2.04 826.63 2.22 826.27 2.44 825.66 2.38 824.91 2.55 824.59 2.99 824.33 3.71 824.17 3.97 824.01 4.16 823.78 4.24 823.55 4.19 823.19 4.08 823.08 5.42 812.23 6.27 805.43 6.50 803.56 9.05 782.99 9.65 778.23 10.51 771.26 12.74 753.21 13.23 749.27 13.91 743.75 20.38 744.53 24.15 744.98 25.56 745.16 30.53 745.75 30.48 746.26 35.85 746.91 35.92 746.37 37.39 746.56 41.30 747.01 41.25 747.50 50.32 748.52 53.02 748.82 59.28 749.50 64.16 750.02 68.70 750.50 72.73 750.91 77.22 751.37 81.71 751.82 86.19 752.26 90.68 752.69 95.17 753.12 99.66 753.54 104.15 753.95 108.64 754.36 113.13 754.76 117.62 755.15 122.11 755.53 126.61 755.91 131.10 756.28 135.60 756.64 140.09 756.99 144.59 757.34 149.08 757.68 153.58 758.01 157.32 758.28Z\"},\"09\":{\"name\":\"Côte-Nord\",\"path\":\"M701.43 762.32 691.32 763.56 682.31 764.63 673.29 765.67 664.27 766.68 655.25 767.67 646.22 768.62 637.19 769.55 628.16 770.44 619.13 771.31 610.09 772.15 609.91 770.23 608.77 769.71 606.59 768.75 603.57 767.32 601.74 766.44 600.43 765.75 597.76 764.32 595.00 762.73 592.26 761.07 589.82 759.48 586.96 757.53 584.89 756.00 583.75 755.11 581.74 753.60 581.21 753.23 579.66 752.01 577.49 750.27 575.38 748.55 573.46 746.94 571.58 745.27 570.98 744.78 569.62 743.57 569.29 743.31 565.24 739.96 563.66 738.92 561.56 737.56 558.64 735.85 555.89 734.27 553.20 732.82 551.12 731.74 549.08 730.71 547.02 729.75 544.39 728.58 542.13 727.66 539.71 726.74 537.52 725.97 535.17 725.25 532.80 724.59 530.79 724.07 527.78 723.40 525.12 722.89 522.24 722.45 519.95 722.16 517.00 721.87 515.08 721.76 513.17 721.69 511.03 721.68 509.08 721.74 507.06 721.86 504.88 722.07 502.70 722.35 500.46 722.72 498.48 723.12 495.72 723.89 492.95 724.80 490.98 725.57 489.80 726.08 488.13 726.87 486.95 727.50 485.30 728.44 484.49 728.96 482.06 730.59 481.47 731.01 479.85 732.29 478.86 733.12 477.64 734.25 475.85 736.01 470.22 741.93 462.14 749.68 458.54 753.16 456.72 754.35 455.45 755.04 453.58 755.81 452.18 756.35 451.27 756.65 448.89 757.38 447.33 757.92 445.99 758.45 444.60 759.02 442.96 759.76 440.79 760.88 437.57 762.65 434.95 764.16 428.51 767.80 427.25 768.42 425.14 769.53 422.30 771.13 419.43 772.92 417.44 774.15 414.09 776.49 411.80 778.12 408.27 780.99 405.38 783.51 402.65 785.80 400.52 787.80 397.37 790.77 396.51 791.57 392.73 795.23 390.55 797.49 390.09 798.01 388.25 799.98 385.93 802.36 384.27 804.13 382.27 806.34 382.03 806.63 380.52 808.35 379.27 809.81 378.30 810.98 377.69 811.75 376.58 813.12 375.51 814.42 373.58 816.70 372.86 817.46 368.82 814.06 368.13 813.65 367.16 813.20 366.38 813.00 365.70 812.71 365.36 812.62 364.65 812.48 364.24 812.29 363.95 812.26 363.40 812.36 362.85 812.21 362.11 811.84 361.72 811.51 361.37 811.08 361.08 810.46 360.99 810.01 360.95 809.80 360.52 808.91 360.44 808.57 360.41 808.18 360.28 807.93 359.65 807.62 358.85 807.45 357.96 807.36 357.64 807.20 357.09 806.70 355.78 806.19 355.10 806.15 354.14 806.26 353.42 806.36 354.44 803.94 354.53 803.87 355.33 802.06 355.98 800.66 355.98 796.49 355.98 794.69 355.96 793.02 355.93 789.22 355.93 785.27 355.94 779.11 355.93 773.67 355.90 769.67 355.89 765.41 355.88 751.71 355.91 738.00 355.90 724.29 355.90 721.74 355.50 721.73 355.39 710.58 355.39 696.86 355.39 683.14 355.38 669.42 355.39 664.83 355.38 661.29 355.39 655.70 355.39 628.24 355.37 624.72 355.38 621.38 355.40 618.99 355.42 615.56 355.41 613.68 355.42 612.08 355.41 610.02 355.43 600.76 355.44 587.01 355.45 573.26 355.41 559.50 355.27 554.96 355.27 550.34 355.32 435.39 360.26 435.39 364.24 435.38 368.21 435.36 372.18 435.34 376.16 435.31 380.13 435.28 384.10 435.24 388.06 435.19 392.05 435.13 396.02 435.07 400.00 435.00 403.97 434.93 407.94 434.85 411.92 434.76 415.89 434.67 419.86 434.57 423.83 434.46 427.80 434.35 431.78 434.23 438.35 434.02 438.46 434.35 438.94 434.49 439.05 434.61 438.87 434.83 438.83 435.07 438.64 435.17 438.87 435.61 439.22 435.88 439.14 436.17 439.66 436.59 439.94 436.72 440.00 437.09 440.14 437.16 440.57 437.15 440.54 437.42 440.67 437.63 440.57 437.73 440.94 438.05 440.97 438.32 441.22 438.54 441.23 439.14 441.56 439.24 441.73 439.49 441.98 439.56 442.01 439.87 442.22 440.08 442.07 440.40 442.28 440.59 442.71 440.68 443.10 441.11 443.27 441.61 443.55 441.73 443.52 441.92 443.74 442.05 443.80 442.23 443.68 442.37 443.93 443.04 444.22 442.94 444.40 443.08 444.43 443.33 444.65 443.37 444.89 443.23 445.08 443.44 445.34 443.49 445.36 443.65 445.16 443.89 445.07 444.25 445.16 444.49 445.08 444.68 445.46 445.37 445.77 445.47 445.95 445.79 446.15 445.75 446.51 446.10 446.73 446.22 446.58 446.63 446.92 446.82 447.27 446.83 447.26 447.16 447.57 447.32 447.80 447.30 447.94 447.44 448.24 447.54 448.32 447.88 448.52 448.15 448.69 448.13 448.93 448.32 448.92 448.50 449.20 448.89 449.41 449.00 449.61 449.25 449.60 449.40 449.86 449.51 449.85 449.65 450.22 450.01 450.30 450.28 450.56 450.42 450.38 450.75 450.06 450.91 449.89 451.43 450.15 451.44 450.23 451.62 450.07 451.73 450.11 452.03 449.88 452.03 449.82 452.16 449.56 452.12 448.93 452.30 448.74 452.55 448.39 452.73 448.44 453.07 448.63 453.23 448.51 453.54 448.24 453.54 447.96 453.93 448.02 454.21 448.17 454.32 448.14 454.56 447.77 454.83 447.48 454.59 447.41 454.79 446.98 455.38 446.64 455.46 446.35 455.27 446.21 455.10 445.79 455.24 445.19 454.91 445.04 455.03 445.14 455.54 445.27 455.76 445.20 456.13 445.33 456.72 445.19 456.90 445.01 456.91 444.53 456.62 444.25 456.65 443.77 456.55 443.56 456.64 443.54 456.87 443.75 457.09 443.74 457.29 443.99 457.53 443.96 458.08 443.70 458.25 443.25 458.36 443.51 458.64 443.89 458.69 444.13 458.53 444.26 458.69 444.10 459.28 444.35 459.46 444.41 459.63 444.62 459.74 445.00 459.65 445.21 459.72 445.52 459.98 445.60 460.27 445.58 460.49 445.35 460.60 445.25 460.75 444.94 460.76 444.82 460.91 444.99 461.17 445.00 461.48 444.84 461.86 444.53 461.85 444.34 461.70 444.23 461.86 444.30 462.23 444.25 462.38 443.66 462.31 443.39 462.11 443.21 461.86 443.16 461.50 443.28 461.18 442.98 460.93 442.86 460.72 442.50 460.87 442.23 461.38 441.91 461.46 441.74 461.26 441.84 461.05 441.65 460.65 441.40 460.75 441.17 460.75 440.92 460.64 440.89 460.27 440.58 460.04 440.33 460.11 440.18 459.99 440.22 459.78 440.09 459.61 439.65 459.56 439.52 459.43 439.80 459.06 439.39 458.76 439.02 458.77 438.67 458.46 438.74 458.12 438.52 457.89 438.35 457.89 438.24 457.69 437.98 457.60 437.61 457.24 437.44 457.30 437.01 457.17 436.66 457.23 436.67 457.46 436.78 457.66 436.40 457.66 435.93 457.78 435.94 458.01 436.16 458.10 436.10 458.44 436.21 458.59 436.11 458.83 436.38 458.97 436.38 459.15 436.87 459.30 437.37 459.91 437.45 460.65 437.10 460.76 437.09 461.00 436.94 461.21 437.00 461.37 436.51 461.53 436.54 461.73 436.88 462.02 437.02 462.57 436.89 462.85 436.59 462.88 436.14 462.85 435.93 462.70 435.72 462.70 435.69 462.41 435.26 462.54 435.06 462.77 434.79 462.56 434.80 462.34 434.51 462.20 434.40 462.27 434.06 462.25 434.00 462.46 434.11 462.66 433.88 462.95 433.81 463.18 433.37 463.08 433.07 463.23 432.71 463.29 432.56 463.18 432.38 462.86 432.33 462.53 432.09 462.20 432.06 461.80 432.15 461.60 431.89 461.45 431.71 462.00 431.50 462.05 431.38 462.38 431.35 463.05 431.67 463.59 431.22 463.78 431.52 464.12 431.53 464.37 431.22 464.88 431.01 464.85 430.73 465.08 430.16 465.21 429.74 464.82 429.72 464.73 430.12 464.34 429.46 464.06 429.28 464.23 429.34 464.56 429.33 464.92 429.13 464.99 428.83 465.25 428.65 465.22 428.52 465.00 428.02 465.23 427.89 465.40 427.83 465.95 428.07 466.10 428.24 466.47 428.51 466.72 428.96 466.72 428.81 466.95 428.84 467.23 428.96 467.45 429.22 467.50 429.29 467.73 429.48 467.98 429.77 467.91 429.93 468.12 429.77 468.26 429.77 468.47 429.57 468.70 429.72 469.13 429.68 469.31 429.39 469.65 429.37 469.84 429.14 469.94 429.05 470.08 429.17 470.44 429.41 470.34 429.77 470.34 429.49 470.76 429.63 471.06 429.89 471.03 430.24 471.13 430.35 471.39 430.55 471.31 430.92 471.46 431.18 471.73 431.18 471.96 431.64 472.18 431.69 472.41 431.50 472.70 431.57 473.27 431.55 473.64 431.85 473.92 431.84 474.30 431.58 474.55 431.47 474.87 431.17 474.88 431.17 475.19 431.39 475.35 431.41 475.65 431.53 475.80 431.58 476.23 431.82 476.30 432.05 476.51 431.95 476.76 432.08 476.93 432.53 477.11 433.03 477.12 433.37 477.35 433.66 478.06 433.19 478.20 433.17 478.36 433.66 478.54 433.50 478.75 433.48 479.00 433.21 479.11 433.05 478.90 432.78 479.00 432.44 478.97 432.30 479.14 432.36 479.31 432.61 479.45 432.65 479.62 432.35 479.86 432.62 480.06 432.68 480.30 432.89 480.36 432.87 480.64 432.51 480.71 432.24 480.69 431.81 480.87 431.22 480.84 430.82 480.71 430.76 480.83 430.50 480.89 430.27 481.05 430.11 481.27 429.63 481.25 429.39 481.03 429.18 481.07 429.03 480.92 428.68 481.12 428.46 481.48 428.33 481.50 428.05 482.02 427.76 482.16 427.59 482.42 427.44 482.44 427.51 482.73 427.83 482.89 427.94 483.06 427.70 483.35 427.87 483.60 427.70 483.92 427.98 484.11 428.26 484.04 428.37 483.78 428.62 483.88 428.98 483.90 429.22 484.42 429.23 484.67 428.75 484.93 428.29 484.98 428.42 485.55 428.64 485.73 428.57 485.94 428.35 486.03 428.37 486.51 428.04 486.70 427.95 486.95 428.35 487.42 428.00 487.56 427.68 487.61 427.68 487.91 427.18 488.08 427.18 488.38 427.44 488.67 427.44 488.88 427.82 488.74 428.13 488.98 428.46 488.84 428.49 489.26 428.32 489.36 428.70 489.71 428.96 489.66 429.02 489.40 429.42 489.56 430.13 490.25 430.20 490.45 430.53 490.33 430.90 490.60 431.17 490.66 431.76 490.65 431.98 491.05 432.35 491.52 432.59 491.59 432.58 491.80 432.71 492.11 432.35 492.19 432.16 492.31 432.07 492.59 432.15 492.88 432.49 493.15 433.25 492.94 433.37 493.28 433.68 493.36 434.02 493.27 434.41 493.58 434.63 493.57 434.94 493.67 434.77 493.93 434.61 494.51 434.44 494.56 434.56 494.84 434.93 495.05 434.76 495.16 434.82 495.39 434.47 495.68 434.63 496.02 434.42 496.34 434.91 496.67 435.06 496.67 435.20 496.33 435.33 496.27 435.57 496.42 435.55 496.64 436.03 496.97 436.05 497.24 436.19 497.35 435.82 497.58 435.90 497.88 436.17 498.03 436.44 497.84 436.78 497.85 437.27 498.19 437.47 498.19 437.63 498.01 438.09 498.14 438.21 498.31 437.99 498.55 437.99 498.87 437.84 499.10 437.55 499.27 437.62 499.58 437.11 499.69 437.00 499.80 436.96 500.08 436.22 500.44 436.10 500.58 435.73 500.71 435.15 500.78 434.91 500.76 434.91 501.01 435.38 501.07 435.67 501.23 436.15 501.26 436.40 501.55 435.90 501.87 435.62 501.92 435.55 502.09 434.92 502.33 434.92 502.49 435.34 502.65 435.69 502.61 436.38 502.61 437.04 502.47 437.52 502.65 437.72 502.79 438.21 502.78 437.97 503.17 437.98 503.41 437.75 503.59 437.58 503.96 437.95 504.25 438.14 504.33 438.40 504.76 438.69 504.76 439.03 505.00 439.51 504.97 439.80 505.12 439.91 505.28 440.12 505.11 440.15 504.75 439.98 504.55 439.54 504.56 439.61 504.14 440.03 504.29 440.40 504.23 440.82 504.26 441.08 504.61 440.68 504.76 440.59 505.19 440.87 505.64 440.98 506.01 441.52 506.14 441.75 506.06 441.79 506.59 441.69 506.88 441.46 507.22 441.24 507.36 441.17 507.73 441.65 507.73 441.60 508.09 441.96 508.29 441.97 508.57 442.09 508.96 441.96 509.21 442.14 509.41 442.17 509.63 441.99 509.90 442.06 510.38 442.32 510.58 442.53 510.62 442.73 510.80 442.89 511.09 443.37 511.15 443.58 511.45 443.77 511.52 443.95 511.78 444.56 511.76 444.69 511.82 444.65 512.06 444.42 512.29 444.53 512.61 444.35 513.04 444.56 513.36 444.62 513.76 445.15 514.10 445.43 513.83 445.42 513.66 445.70 513.42 445.94 513.39 446.16 513.10 446.37 513.24 446.60 513.54 446.72 513.57 447.07 513.87 447.20 514.16 447.51 514.57 447.67 514.68 447.77 514.37 448.15 514.34 448.41 514.47 448.42 514.20 448.33 513.84 448.65 513.56 448.69 513.25 449.10 513.37 449.16 513.56 449.40 513.91 449.77 514.22 450.15 514.27 450.21 514.43 450.57 514.58 450.89 514.36 451.07 514.41 451.20 514.71 451.49 514.77 451.60 514.61 451.85 514.64 452.10 514.49 452.30 514.12 452.53 514.01 453.08 514.22 453.25 514.60 453.41 514.35 453.83 514.48 454.15 514.96 454.28 515.44 454.66 515.61 454.80 516.15 454.95 516.28 455.23 516.33 455.77 516.25 455.73 516.61 455.53 516.71 455.45 517.09 455.25 517.18 455.09 517.50 455.22 517.99 455.79 517.92 456.10 517.70 456.29 517.68 456.46 517.41 456.84 517.39 457.28 517.68 457.36 517.99 457.27 518.39 457.59 518.37 457.67 518.60 457.36 519.02 457.21 519.53 457.47 519.82 457.45 520.10 457.61 520.34 457.84 520.53 458.22 520.56 458.38 520.28 458.61 520.33 458.84 520.68 459.12 520.88 458.90 521.25 458.61 521.34 458.59 521.71 458.41 522.00 458.14 522.24 457.82 522.21 457.76 521.97 457.46 522.10 457.44 522.31 457.30 522.46 456.94 522.56 456.86 522.88 456.95 523.23 456.89 523.45 456.59 523.52 456.55 523.72 456.36 523.98 455.92 524.03 455.71 523.41 455.21 523.45 455.02 523.67 454.98 523.86 455.15 523.95 455.47 523.94 455.59 524.25 455.01 524.75 454.49 525.15 454.55 525.72 454.67 526.06 454.85 526.20 455.09 526.15 455.16 525.93 455.35 525.83 455.59 525.83 455.95 526.31 456.19 526.31 456.35 526.44 456.62 526.50 456.83 526.64 456.96 527.02 456.89 527.60 457.07 527.84 457.12 528.21 456.97 528.39 456.69 528.57 456.80 528.94 456.64 529.48 456.37 529.68 456.38 529.86 456.61 530.00 456.40 530.22 456.59 530.74 456.25 531.19 456.32 531.45 456.50 531.45 456.74 531.64 456.69 532.07 456.53 532.27 456.51 532.54 456.69 532.76 457.09 532.94 456.81 533.24 457.14 533.71 456.95 534.11 456.54 534.09 456.43 534.27 455.98 534.35 455.61 534.55 455.36 535.14 455.34 535.50 455.50 535.76 455.75 535.79 455.78 536.00 455.98 536.11 456.65 536.05 456.81 536.14 457.32 536.12 457.49 536.23 457.28 536.39 457.20 536.73 456.85 536.76 456.40 536.93 456.18 537.29 456.16 537.47 456.26 537.77 456.23 538.05 456.36 538.39 456.58 538.35 456.71 538.44 456.57 538.70 456.55 539.04 456.34 539.28 456.15 539.17 455.51 539.41 455.37 539.57 455.41 539.72 455.19 539.81 454.90 539.70 454.49 539.99 454.27 540.03 454.14 539.77 453.53 539.89 453.23 539.77 453.18 539.62 453.50 539.02 453.32 538.85 453.28 538.45 453.15 538.12 453.45 538.02 453.47 537.86 453.86 537.67 453.92 537.21 453.60 537.04 453.63 536.40 453.41 536.28 453.12 536.65 453.20 536.77 453.04 537.06 452.78 537.02 452.67 537.18 452.28 537.33 452.26 537.54 452.00 537.75 452.09 538.01 451.99 538.37 451.84 538.43 451.61 538.27 451.50 537.82 451.40 537.15 451.05 537.11 450.94 536.94 450.70 537.02 450.58 536.78 450.87 536.58 450.98 536.43 450.44 536.22 450.28 536.01 449.77 536.04 449.54 536.00 449.35 536.10 448.80 536.01 448.40 536.04 448.12 535.98 447.76 535.72 447.67 535.53 447.41 535.43 447.23 535.10 447.06 534.97 447.06 534.59 446.88 534.46 446.62 534.41 446.31 534.65 446.14 535.01 446.13 535.23 445.79 535.40 446.06 535.81 446.09 536.22 446.17 536.41 446.03 536.59 445.42 536.85 445.34 537.05 445.14 537.19 445.02 537.49 444.64 537.60 444.53 537.86 444.36 537.99 444.09 537.85 443.65 538.38 443.35 538.66 443.37 538.99 443.13 539.21 443.01 539.43 443.01 539.69 442.91 539.99 443.11 540.13 443.08 540.59 443.22 540.84 443.16 540.96 443.42 541.45 443.34 541.78 443.49 541.97 443.74 542.10 443.66 542.30 443.86 542.63 444.08 542.66 443.88 543.04 444.05 543.26 444.12 543.58 444.51 543.93 444.22 544.04 444.07 544.33 444.42 544.78 444.46 545.06 444.67 545.27 444.84 545.00 445.14 544.88 445.36 544.99 445.61 544.98 445.55 545.21 445.73 545.35 445.92 545.11 446.19 544.92 446.40 544.60 446.55 544.62 446.67 544.96 447.34 544.92 447.51 545.07 447.90 545.04 448.03 544.92 448.20 545.15 448.06 545.30 447.59 545.47 447.45 545.75 447.29 545.87 447.11 546.19 446.87 546.40 446.64 546.44 446.47 546.26 446.17 546.48 445.83 546.06 444.90 546.68 444.76 546.88 444.83 547.45 444.61 547.69 444.36 547.80 444.42 548.26 444.60 548.33 444.89 548.62 444.90 548.94 445.12 549.18 444.95 549.56 444.99 549.78 444.79 549.91 444.81 550.09 445.22 550.53 445.38 550.91 445.58 550.81 445.80 550.83 445.95 550.52 446.18 550.45 446.56 550.46 446.69 550.70 447.28 550.82 447.74 551.09 448.15 551.92 448.13 552.25 448.42 552.30 448.55 552.46 448.52 552.86 448.81 552.90 449.02 552.81 449.17 552.88 449.48 553.20 449.68 553.28 449.90 553.16 450.05 553.26 450.43 553.75 450.61 554.12 450.82 554.18 450.86 553.95 451.02 553.81 451.05 553.22 451.11 552.90 451.02 552.51 451.15 552.12 451.27 552.03 451.48 552.20 451.82 552.20 452.01 551.92 452.15 551.55 452.43 551.55 452.79 551.32 453.01 550.98 453.18 551.16 453.58 550.76 454.05 550.73 454.50 551.27 454.29 551.58 454.63 552.22 454.61 552.88 454.50 552.99 454.40 553.39 454.10 553.69 454.45 554.44 454.35 554.73 454.38 555.11 454.26 555.31 454.27 555.55 454.14 555.77 454.03 556.17 454.29 556.21 454.43 556.35 454.78 556.23 454.98 556.29 455.06 556.72 455.24 556.76 455.21 556.99 455.29 557.46 455.41 557.69 455.60 557.34 455.88 557.38 455.66 557.80 455.80 557.95 456.14 557.62 456.32 557.31 456.31 557.08 456.46 557.01 456.73 557.14 456.86 556.73 456.98 556.79 457.02 557.16 457.33 557.32 457.57 557.18 457.69 557.25 458.04 557.08 458.03 557.44 458.18 557.63 458.31 558.17 458.48 558.40 458.78 558.49 458.95 558.67 458.99 558.92 459.25 559.54 459.41 559.66 459.49 559.99 459.63 559.95 459.67 560.28 459.92 560.89 459.94 561.37 460.35 561.46 460.82 561.21 460.89 561.44 461.55 561.51 461.52 561.06 461.42 560.66 461.01 560.19 460.63 559.27 460.50 559.22 460.03 558.66 459.93 558.48 460.18 558.34 460.92 559.02 461.13 559.15 461.34 558.90 461.07 558.54 461.18 558.31 461.08 557.69 461.22 557.36 461.06 557.21 460.72 557.09 460.69 556.98 460.82 556.58 460.99 556.39 461.16 556.37 461.38 556.68 461.44 557.01 461.73 557.22 461.95 557.64 461.97 558.01 462.10 558.32 462.28 558.52 462.30 558.86 462.63 559.41 462.95 559.33 463.14 559.53 463.29 559.93 463.26 560.30 463.48 560.53 463.45 560.80 463.55 561.19 463.73 561.30 463.77 561.49 464.31 561.86 464.61 561.79 464.70 561.63 464.59 561.31 464.66 561.19 464.45 560.78 464.21 560.55 464.19 560.10 464.75 560.01 464.86 559.90 464.87 559.57 464.62 559.32 464.67 558.93 464.54 558.70 464.64 558.01 464.62 557.70 464.68 557.41 464.51 557.13 464.56 556.83 464.36 556.53 464.24 556.47 463.97 555.91 463.75 555.73 463.77 555.56 463.64 555.34 463.58 554.90 463.37 554.66 463.44 554.41 463.79 554.39 463.94 554.72 464.42 555.43 464.57 555.54 464.98 556.18 465.24 556.15 465.48 556.24 465.91 556.62 466.30 556.34 466.45 556.43 466.81 556.21 466.71 556.06 466.81 555.42 466.78 555.07 467.27 554.82 467.34 555.12 467.48 555.31 467.82 555.17 468.14 555.27 468.07 554.74 467.75 554.19 467.43 553.84 467.54 553.45 467.43 553.27 467.42 552.84 467.50 552.35 467.83 552.00 467.95 551.71 468.16 551.52 467.99 551.28 467.72 551.02 467.65 550.43 467.90 550.58 467.96 550.14 467.61 549.89 467.68 549.62 467.29 549.33 467.33 549.19 467.63 549.30 467.97 548.99 468.32 548.93 468.37 548.85 468.23 548.54 467.91 548.25 467.95 547.90 467.80 547.78 467.71 547.32 468.03 547.36 468.24 547.12 468.06 546.89 468.07 546.54 468.15 546.43 468.18 546.06 468.29 545.70 469.08 545.87 469.25 545.98 469.39 546.34 469.74 546.39 470.14 546.72 470.52 546.70 470.83 546.33 471.32 546.34 471.54 546.07 471.73 546.07 471.57 545.74 471.57 545.40 471.70 545.19 471.97 545.24 471.93 544.98 472.05 544.92 472.16 545.21 472.25 545.75 472.34 545.88 472.65 545.99 472.77 545.58 473.02 545.44 472.78 544.99 473.06 544.78 472.93 544.69 472.96 544.44 472.80 544.35 472.57 544.06 472.83 543.92 472.92 543.48 472.72 543.43 472.58 543.26 472.64 543.06 472.87 543.05 473.09 543.40 473.41 543.66 473.51 543.64 473.61 543.18 473.44 542.92 473.50 542.74 473.37 542.31 473.19 541.99 473.47 541.77 473.23 541.41 473.21 540.86 473.28 540.77 473.70 540.97 473.58 540.43 473.62 540.23 474.04 540.50 474.25 540.70 474.49 540.39 474.62 540.61 475.35 541.39 475.52 541.65 475.85 541.91 476.28 542.05 476.64 542.09 476.75 541.78 476.90 541.77 477.31 542.30 477.57 542.48 477.66 542.79 477.53 542.95 477.71 543.15 477.91 543.83 478.08 544.10 478.48 544.37 478.46 544.89 478.39 545.09 478.52 545.78 478.48 546.15 478.64 546.50 478.87 546.73 479.14 547.18 479.36 547.16 479.59 547.34 479.76 547.71 480.31 548.55 480.30 549.21 480.53 549.68 480.84 549.77 480.87 550.09 480.42 550.04 479.95 550.44 479.73 550.42 479.63 550.57 479.75 550.75 480.06 550.96 480.32 551.28 480.13 551.71 479.75 551.81 479.59 551.57 479.19 551.41 479.01 551.12 478.50 550.55 478.40 550.36 477.89 550.43 477.69 550.74 477.07 550.41 476.88 550.18 476.85 549.81 476.59 549.66 476.24 549.70 475.88 549.95 475.60 550.37 475.59 551.01 475.66 551.40 475.78 551.63 476.07 551.98 476.29 552.01 476.30 552.19 476.54 552.45 476.76 552.57 476.92 552.96 476.93 553.19 477.10 553.40 476.79 553.77 476.79 554.14 476.94 554.24 477.23 554.17 477.38 554.04 477.72 554.02 477.89 553.80 478.12 554.18 478.17 554.52 478.04 554.91 478.35 555.37 478.40 555.55 478.60 555.71 478.82 556.03 478.87 556.53 478.77 556.84 478.77 557.10 479.01 557.32 479.07 557.50 479.41 557.56 479.43 557.76 479.58 557.83 479.54 558.05 479.04 558.38 479.01 558.75 478.84 558.88 478.60 559.22 478.82 559.97 478.68 560.17 478.71 560.39 478.94 560.65 479.12 560.67 479.77 561.35 479.65 561.46 479.83 561.65 479.97 562.02 480.24 562.03 480.08 562.54 479.87 562.55 479.88 562.76 480.08 562.86 480.34 562.68 480.54 562.82 480.86 562.87 480.72 563.28 480.90 563.49 480.73 563.78 480.74 564.14 480.59 564.34 480.66 564.53 480.45 564.66 479.98 564.49 479.80 564.29 479.55 564.23 479.55 563.94 479.35 563.57 479.19 563.55 479.03 563.28 479.00 562.93 478.67 562.71 478.51 562.22 478.36 561.98 477.77 561.41 477.54 560.90 477.41 560.85 477.31 560.60 477.08 560.44 476.81 560.56 476.48 560.97 476.43 561.21 476.47 561.62 476.29 561.91 476.06 562.13 476.20 562.34 476.20 562.64 475.43 562.87 475.37 563.33 475.48 563.71 475.65 563.89 475.89 563.97 475.87 564.39 476.00 564.64 476.01 564.91 476.23 565.26 476.33 565.15 476.54 565.29 476.63 565.51 477.16 566.04 477.59 566.79 477.49 567.21 477.80 567.65 477.74 568.02 477.98 568.59 477.88 568.80 477.68 568.54 477.52 568.65 477.07 568.61 476.99 568.70 477.47 569.18 477.78 569.43 477.98 569.51 478.25 569.94 478.27 570.64 478.55 570.91 478.47 571.20 478.66 571.44 478.70 571.99 478.54 572.22 478.37 572.13 477.98 571.57 477.86 571.32 477.61 571.22 477.39 571.33 477.48 571.98 477.63 572.57 478.32 573.53 478.75 574.09 478.71 574.51 478.47 574.67 478.24 575.12 478.63 575.68 479.27 575.92 479.36 576.30 479.29 576.63 479.34 576.85 479.26 577.21 479.39 577.69 479.29 578.18 479.02 578.49 478.96 578.66 478.67 578.55 478.41 578.22 478.09 577.57 477.80 577.18 477.72 576.99 477.53 577.14 477.55 577.63 477.00 577.29 476.79 576.76 476.68 577.00 476.05 577.18 475.88 577.35 476.21 577.95 476.22 578.52 475.84 578.40 475.74 578.49 475.90 578.90 475.58 578.98 475.32 578.77 475.28 578.53 474.90 578.66 474.70 578.36 474.40 578.55 474.65 578.89 474.74 579.15 474.51 579.15 474.39 579.35 474.52 579.46 474.82 579.94 474.64 580.17 474.60 580.53 474.97 580.91 475.07 581.23 475.30 581.43 475.74 581.48 475.89 581.82 475.61 581.90 475.29 582.30 475.64 582.39 475.74 582.56 475.96 582.64 476.21 582.54 476.49 583.01 476.61 583.44 476.23 583.49 476.04 583.38 475.77 583.54 475.61 583.76 475.37 583.90 475.46 584.18 475.80 584.26 475.92 584.37 475.98 584.64 476.33 585.36 476.74 585.84 477.07 585.80 477.23 585.52 477.57 585.30 477.69 585.47 477.69 586.11 478.00 585.97 478.07 586.22 478.29 586.19 478.39 586.36 478.43 586.67 478.81 587.10 478.88 587.65 479.17 587.84 479.43 588.43 478.97 588.72 478.85 588.92 478.60 589.00 478.63 589.17 478.86 589.63 479.13 589.62 479.42 589.83 479.84 589.64 480.31 589.58 480.38 590.16 480.66 590.60 480.79 590.58 481.09 590.03 481.29 590.11 481.52 589.83 482.16 589.62 482.41 589.49 482.43 588.82 482.22 588.57 482.21 587.84 481.71 587.06 481.64 586.68 481.36 586.04 481.50 585.98 481.46 585.61 481.28 585.33 481.18 584.97 481.24 584.80 481.04 584.52 481.07 584.33 480.93 584.04 480.98 583.72 481.10 583.65 480.98 583.20 480.70 582.57 480.56 582.38 480.58 582.07 480.51 581.78 480.62 581.72 480.90 581.96 481.29 582.08 481.50 582.07 481.50 581.77 481.15 581.54 481.18 581.30 481.49 581.04 481.21 580.68 481.56 580.65 481.67 580.77 482.14 580.61 482.56 580.77 482.73 580.95 482.71 581.25 482.95 581.70 482.75 581.97 482.79 582.24 482.97 582.64 483.21 582.97 483.33 583.24 483.50 583.16 483.88 583.34 484.10 583.55 484.38 583.95 484.54 584.28 484.37 584.68 484.55 584.90 484.53 585.21 484.83 585.34 484.98 585.28 485.09 585.49 485.46 585.77 485.60 585.60 485.62 585.25 485.73 584.65 485.99 584.78 486.18 584.69 486.29 584.96 486.67 584.96 486.87 585.27 486.96 585.58 487.20 585.98 487.54 585.96 487.76 586.04 487.88 586.30 488.07 586.40 488.29 587.41 488.69 587.68 488.64 587.98 488.75 588.06 488.94 588.73 489.09 588.95 489.15 589.28 489.01 589.70 489.14 589.96 489.03 590.13 489.13 590.40 489.10 590.60 488.83 590.89 488.68 591.36 488.55 591.44 488.53 591.96 488.65 592.07 488.47 592.47 488.69 592.42 488.94 592.05 489.28 591.87 489.69 592.04 489.98 592.47 490.37 592.42 490.97 592.55 491.04 592.70 491.28 592.70 491.40 592.92 491.24 593.22 491.33 593.43 491.77 593.32 492.01 593.95 492.12 594.12 492.54 594.28 492.80 593.88 492.69 593.66 492.73 593.32 492.94 593.10 492.96 592.87 492.79 592.52 492.49 592.43 492.46 592.32 492.71 591.76 492.57 591.21 492.96 591.26 493.10 591.51 493.24 591.55 493.54 591.37 493.66 591.71 494.08 591.72 494.49 591.93 494.66 592.34 494.98 592.44 495.11 592.80 495.21 592.77 495.48 592.17 495.14 591.64 495.50 591.13 495.76 590.99 495.86 590.51 496.01 590.39 496.30 590.58 496.37 590.46 496.71 590.49 496.86 590.34 497.13 590.34 497.50 590.52 497.66 590.70 498.00 590.07 498.27 590.03 498.34 590.20 498.25 590.67 498.41 590.87 498.78 590.93 499.14 591.18 499.23 590.56 499.54 590.44 499.72 590.80 499.98 590.66 500.17 590.80 500.17 591.02 500.57 591.77 500.68 592.15 500.81 592.16 500.99 591.83 501.08 591.46 501.35 591.26 502.05 591.07 502.38 590.78 502.35 590.59 502.64 590.03 502.92 590.00 503.02 590.29 502.96 590.49 503.10 590.85 503.10 591.13 503.31 591.22 503.30 591.52 503.68 591.85 503.86 591.95 503.59 592.25 503.74 592.56 503.74 592.83 503.60 592.91 503.69 593.13 503.94 593.27 503.85 593.59 503.62 593.68 503.42 593.87 503.33 594.16 503.16 594.34 502.77 594.40 502.86 594.64 503.16 594.67 503.31 594.87 503.20 595.29 503.17 595.77 502.95 595.88 503.02 596.25 503.36 596.78 503.49 596.76 503.92 597.09 504.31 596.77 504.31 596.57 504.03 596.21 504.20 595.96 504.09 595.84 504.46 595.46 504.48 595.25 504.63 595.07 504.59 594.66 504.49 594.51 504.65 594.34 504.58 594.02 504.83 593.90 505.50 594.41 505.68 594.44 506.00 594.36 506.07 594.54 506.83 594.22 506.98 594.26 507.19 594.01 507.39 593.94 507.20 593.72 507.16 593.48 507.55 593.19 507.36 592.92 507.32 592.69 507.50 592.55 507.68 592.16 507.75 591.82 507.93 591.68 508.01 591.47 507.96 591.26 508.41 591.07 508.39 590.64 508.26 590.27 508.34 589.94 508.61 589.62 508.55 589.44 508.83 589.25 509.13 588.93 509.12 588.56 509.03 588.37 509.19 588.14 509.23 587.78 509.06 587.60 509.18 587.49 509.66 587.54 509.91 587.36 509.93 586.92 509.56 586.79 509.47 586.65 509.02 586.76 508.82 586.61 509.09 586.16 509.28 585.74 509.55 585.56 510.31 585.31 510.55 585.13 510.70 584.88 510.95 584.86 511.20 584.93 511.38 584.60 511.65 584.44 511.86 584.48 512.13 583.99 512.61 583.91 512.87 583.76 513.14 583.85 513.26 583.48 513.65 583.46 513.80 583.32 513.35 582.88 513.56 582.64 513.90 582.51 514.26 582.47 514.54 582.67 514.90 582.07 515.27 581.93 515.43 581.95 515.58 581.78 515.61 581.44 515.78 581.02 515.75 580.67 515.82 580.51 516.08 580.63 516.36 580.34 516.59 580.62 516.91 580.57 516.90 580.73 516.59 581.12 516.57 581.30 516.85 581.45 517.10 581.28 517.31 581.34 517.57 581.66 517.84 581.55 517.96 581.26 518.18 581.42 518.13 582.23 517.92 583.04 517.93 583.27 517.84 583.68 518.04 584.33 518.09 584.73 518.36 584.78 518.70 584.53 518.84 584.32 519.08 584.41 519.12 584.61 519.37 584.91 519.29 585.05 519.00 585.22 519.00 585.32 519.30 585.89 519.47 586.47 519.51 586.98 519.74 587.23 519.98 587.29 520.53 587.57 520.56 587.84 520.74 588.17 520.46 588.42 520.15 588.22 519.98 588.37 520.18 589.42 520.66 589.77 521.04 589.80 521.36 589.47 521.38 589.32 521.68 588.97 521.77 588.39 521.73 588.12 521.86 587.56 522.01 587.09 522.02 586.65 521.85 586.38 522.27 586.30 522.41 586.88 522.94 587.14 523.09 587.28 523.27 587.78 523.48 587.89 524.02 587.68 524.52 587.67 524.81 588.00 525.06 588.39 525.41 588.61 525.94 589.06 526.37 589.03 526.86 589.32 527.25 590.15 527.47 590.43 527.42 590.74 527.59 591.04 527.80 591.26 527.90 591.48 528.30 591.51 528.50 591.77 528.76 591.91 528.84 592.07 528.73 592.39 529.00 592.66 529.22 592.62 529.88 592.68 530.11 592.63 530.48 592.76 530.62 592.88 530.87 592.79 531.25 592.98 531.28 593.33 531.58 593.30 531.64 593.46 531.48 593.77 531.79 593.98 531.86 594.31 532.04 594.56 532.33 594.55 532.28 594.74 532.09 594.84 532.11 595.06 531.74 595.85 531.25 596.21 531.79 596.58 531.77 596.81 531.92 596.85 532.07 597.10 532.37 597.18 532.33 597.67 532.57 597.85 532.77 598.35 533.38 598.87 533.66 599.18 533.71 599.63 533.88 599.67 534.24 599.95 534.50 600.04 534.86 600.37 535.13 600.55 535.35 600.88 535.65 600.94 535.87 600.87 536.24 601.16 536.09 601.56 535.54 601.89 535.64 602.14 535.54 602.52 535.56 602.77 535.30 603.04 534.89 603.10 534.77 603.17 534.77 603.60 534.99 603.71 535.10 604.15 535.22 604.28 534.90 604.82 534.52 604.99 534.39 605.31 534.18 605.46 534.34 605.93 534.38 606.20 534.11 606.20 533.98 606.33 534.09 606.86 534.36 606.89 534.51 607.05 534.63 607.64 534.83 607.90 535.23 607.80 535.35 607.60 535.56 607.53 535.83 607.71 535.88 607.90 536.23 608.00 536.54 607.88 537.01 608.04 536.95 608.27 536.58 608.54 536.77 608.84 537.00 609.06 536.80 609.23 536.86 609.41 537.14 609.47 537.24 609.60 537.10 609.83 537.69 610.00 537.48 610.37 537.55 610.57 537.94 610.30 538.00 610.91 538.36 610.84 538.90 610.59 539.37 610.53 539.37 610.73 539.23 610.86 539.13 611.17 539.38 611.34 539.50 611.59 539.45 611.96 539.70 612.29 540.04 612.24 540.04 612.50 540.25 612.77 540.19 613.06 540.36 613.26 540.32 613.58 539.94 613.66 539.93 613.86 540.18 614.03 540.04 614.29 540.05 614.52 540.41 614.75 540.61 614.70 540.75 614.30 541.07 614.76 541.17 615.25 541.40 615.37 541.52 615.81 541.71 615.81 542.05 616.35 542.24 616.43 542.43 617.23 542.58 617.41 542.79 617.34 542.77 616.74 543.08 616.75 543.20 616.44 543.59 615.85 543.95 615.56 544.19 615.49 544.94 615.00 545.15 614.74 545.35 614.65 545.45 614.45 545.60 614.50 545.93 614.25 545.88 614.10 545.94 613.77 546.23 613.02 546.36 612.76 546.18 612.40 546.34 612.23 546.47 611.55 546.94 611.58 547.50 612.11 547.90 612.24 548.02 612.21 548.45 611.80 548.77 611.69 549.05 611.76 549.49 612.05 549.54 611.69 549.81 611.35 549.93 611.04 549.77 610.88 549.86 610.73 549.70 610.53 549.79 609.98 549.97 609.85 550.39 609.99 550.79 609.91 550.51 609.74 550.40 609.58 550.46 609.38 550.68 609.38 550.78 609.19 550.61 608.79 550.86 608.72 551.08 608.50 551.32 607.83 551.29 607.43 550.82 607.58 550.62 607.57 550.48 607.17 550.28 607.09 550.29 606.79 550.19 606.64 550.29 606.34 550.23 605.91 550.03 605.80 550.20 605.57 550.00 605.12 550.12 604.88 550.42 604.72 550.20 604.61 550.07 604.24 549.77 604.22 549.68 604.02 549.39 603.80 548.97 603.66 548.75 603.26 548.75 602.54 548.53 602.23 548.21 602.13 548.15 601.47 547.99 601.21 548.17 600.86 548.13 599.76 548.41 599.71 548.22 599.37 548.35 598.88 548.22 598.37 547.73 597.75 547.65 597.57 547.88 597.42 548.31 597.28 548.17 597.03 547.94 596.94 547.88 596.73 548.10 596.58 548.16 596.38 547.91 596.13 547.94 595.90 548.11 595.70 548.07 595.30 547.78 595.24 547.54 595.10 547.42 594.79 547.79 594.68 548.13 594.50 547.93 594.09 547.58 593.85 547.33 593.60 547.76 593.34 548.22 593.20 548.48 593.31 548.89 593.29 548.85 593.76 549.02 593.87 549.07 594.06 549.28 594.09 549.45 594.40 549.75 594.34 549.93 594.49 549.96 594.72 550.37 595.03 550.56 594.77 550.88 594.70 551.10 594.99 551.26 595.01 551.41 594.83 551.86 594.75 551.84 594.35 551.65 594.32 551.59 594.10 551.31 593.87 550.97 593.03 550.74 592.67 550.47 592.52 550.43 592.04 550.18 591.89 550.12 591.65 549.90 591.35 550.13 591.14 550.11 590.93 549.92 590.85 549.79 590.64 549.71 590.21 549.49 589.71 549.58 589.42 549.31 589.08 549.56 589.05 549.63 589.28 549.85 589.11 550.07 589.07 550.34 589.29 550.52 589.13 550.77 589.06 550.76 588.83 550.57 588.41 550.50 588.08 550.66 587.95 550.42 587.48 550.42 587.26 550.54 587.02 550.44 586.63 550.82 586.55 550.87 586.28 550.64 585.85 550.39 585.53 550.45 585.32 550.75 585.21 550.96 585.71 551.28 585.69 551.71 585.75 551.97 585.94 552.03 586.15 552.23 586.26 552.38 586.17 553.18 586.69 553.28 586.83 553.48 586.80 553.55 586.64 553.30 586.48 553.20 586.17 553.18 585.82 553.29 585.52 553.52 585.51 553.50 585.15 553.25 585.02 553.05 584.73 552.71 584.59 552.38 584.13 552.14 583.68 552.22 583.52 552.16 583.13 551.98 582.61 551.76 582.46 551.58 582.16 551.54 581.53 551.41 581.36 551.24 580.91 551.08 581.11 550.83 581.14 551.00 580.77 550.98 580.60 551.17 580.49 551.11 580.32 550.85 580.10 550.77 579.92 551.04 579.59 550.99 579.30 550.80 579.15 550.50 579.23 550.31 578.76 549.97 578.42 549.92 578.27 550.03 578.05 550.38 578.05 550.40 577.58 550.72 577.41 550.83 577.66 551.02 577.68 551.07 577.87 551.39 577.80 551.43 577.40 551.03 577.18 550.63 576.79 550.62 576.68 550.82 576.40 550.79 576.22 551.16 576.06 551.36 576.19 551.51 576.46 551.68 576.55 551.78 577.05 551.87 577.26 552.05 577.25 551.95 576.46 552.16 576.32 552.49 576.48 552.74 576.29 552.76 576.05 552.60 575.74 552.39 575.60 552.38 575.32 551.98 575.24 551.83 575.01 552.13 574.70 552.43 574.74 552.81 574.87 552.68 574.59 552.55 574.02 552.58 573.64 552.46 573.13 552.58 573.08 552.94 573.38 553.15 573.36 553.30 573.11 553.54 573.06 553.63 572.79 553.53 572.56 553.56 572.36 553.84 572.00 553.80 571.73 554.13 571.66 554.14 571.41 553.86 570.98 554.31 570.79 554.21 570.38 554.01 570.16 553.68 570.12 553.25 569.65 553.23 569.51 553.45 569.06 553.11 568.98 553.15 568.57 553.08 568.29 552.82 567.84 552.87 567.58 552.78 567.13 552.62 566.79 552.66 566.62 552.54 566.05 552.20 565.73 552.29 565.35 552.29 565.10 552.43 564.82 551.58 564.23 551.50 564.03 551.75 563.95 551.69 563.57 551.36 563.45 551.29 563.29 551.02 563.03 550.84 563.02 550.59 562.73 550.30 562.53 550.18 562.12 549.43 561.51 549.71 561.41 550.16 561.61 550.50 561.67 550.55 561.59 550.19 561.25 550.15 560.97 550.35 560.90 550.37 560.65 550.52 560.61 551.24 561.22 551.38 561.16 551.39 560.85 551.53 560.63 551.42 560.35 551.62 560.28 551.75 559.93 551.35 559.66 551.28 559.49 551.35 559.19 551.11 559.02 551.42 558.83 551.61 558.83 551.65 558.38 551.83 557.85 551.63 557.62 551.59 557.28 551.33 557.34 551.10 556.94 550.92 556.43 551.03 556.17 551.35 556.07 551.59 556.23 552.11 555.98 552.08 555.71 552.32 555.70 552.55 555.54 552.42 554.92 552.31 554.64 551.97 554.45 551.82 554.17 551.58 553.92 551.81 553.78 551.85 553.57 551.59 553.26 551.85 553.04 552.12 553.02 552.39 552.85 552.59 552.92 552.99 552.77 553.09 552.85 553.48 552.60 553.75 552.69 553.80 552.49 554.24 552.70 554.23 553.06 554.76 553.27 555.37 552.93 555.12 552.48 555.39 552.29 555.82 552.52 556.19 552.26 556.42 552.50 556.62 552.58 556.72 552.91 556.94 553.01 557.48 552.85 557.66 552.70 558.41 552.58 558.64 552.61 558.95 552.33 559.18 552.22 559.10 552.00 558.83 551.79 559.12 551.62 558.93 551.38 558.91 551.15 559.05 551.07 559.36 551.09 559.79 551.34 560.10 551.41 560.24 551.20 559.98 550.87 559.66 550.70 559.90 550.55 560.18 550.67 560.57 549.94 560.76 550.11 561.02 550.07 561.22 549.94 561.41 550.20 561.74 550.28 562.11 550.50 562.29 550.71 562.56 550.64 562.80 550.33 563.15 550.32 563.35 550.17 563.71 550.11 563.81 549.74 564.09 549.74 564.26 549.84 564.45 549.72 564.66 550.03 564.98 549.87 565.13 549.97 565.57 549.70 565.52 549.49 565.12 549.35 565.08 548.97 565.24 548.88 565.61 548.97 565.67 548.71 565.48 548.43 565.58 548.09 566.16 547.97 566.32 547.86 566.18 547.37 566.50 547.49 566.58 547.69 567.25 547.47 567.54 547.47 567.74 547.06 567.89 546.86 568.04 546.49 567.95 546.25 568.11 546.13 567.73 545.96 567.60 545.81 567.31 545.84 566.60 545.42 566.83 545.08 566.95 545.05 567.14 545.24 567.56 545.19 567.80 545.55 568.03 545.59 568.22 545.50 568.62 545.62 568.81 545.80 568.99 545.48 568.96 544.93 568.58 544.93 568.42 544.56 568.64 544.43 568.48 544.08 568.34 544.00 568.40 543.69 568.55 543.33 569.14 543.21 569.11 542.80 568.80 542.37 568.83 541.94 568.92 541.80 568.90 541.39 569.14 541.25 569.11 541.07 569.52 540.69 569.86 540.66 570.04 540.46 569.75 540.20 569.97 539.88 570.09 539.96 570.46 539.99 570.60 540.12 570.81 539.87 570.99 539.78 571.28 539.45 571.44 539.50 571.65 539.34 571.70 539.11 571.99 539.07 572.09 539.36 572.55 539.15 572.79 539.25 573.05 539.16 573.40 539.41 573.64 539.39 573.95 539.54 573.88 539.83 574.03 539.98 574.04 540.18 573.88 540.63 573.36 540.90 573.20 541.20 573.01 541.83 573.34 541.79 573.33 542.12 573.51 542.50 573.70 542.72 573.81 543.05 574.13 542.77 574.20 542.53 574.55 542.64 574.66 542.95 574.86 542.46 575.08 542.48 575.23 542.37 575.35 542.64 575.81 542.51 575.92 542.65 575.87 542.93 575.74 543.13 575.79 543.40 575.96 543.42 576.36 543.75 576.19 543.91 576.14 544.20 576.32 544.30 576.53 544.24 576.67 544.57 576.92 544.66 576.68 544.96 576.49 545.03 576.41 545.27 577.10 545.55 577.30 545.44 577.45 545.20 577.77 545.34 577.89 545.48 578.01 545.90 578.42 545.94 578.60 545.76 578.83 545.94 579.02 546.23 578.86 546.49 579.03 546.88 579.56 547.12 579.61 547.53 579.92 547.92 579.97 548.07 579.94 548.48 579.67 548.64 579.34 548.37 579.01 548.45 579.15 548.80 579.29 548.87 579.45 549.25 580.07 549.58 580.32 549.66 580.46 549.89 580.58 550.29 581.05 550.79 581.71 551.23 582.06 551.21 582.48 551.10 582.69 550.65 582.86 549.85 583.09 549.53 583.17 549.21 583.38 548.97 583.36 548.63 583.53 548.14 583.49 547.80 583.74 546.93 583.73 546.76 584.12 546.54 583.94 546.02 584.05 545.80 584.25 545.67 584.38 545.76 584.62 546.21 584.83 546.38 585.22 546.25 585.41 546.74 585.93 546.97 586.18 546.89 586.32 546.96 586.61 546.92 586.90 546.77 587.37 546.71 587.46 546.96 587.77 547.37 587.87 547.69 588.02 547.74 588.28 547.62 588.33 547.32 588.65 547.39 588.92 547.27 589.43 547.67 589.44 547.87 589.65 548.00 589.89 547.92 590.19 547.92 590.38 548.22 590.89 548.32 591.53 548.10 591.73 547.90 591.85 547.58 591.67 547.44 591.69 546.93 591.54 546.79 591.53 546.55 591.82 546.23 592.06 546.31 592.27 546.52 592.59 546.60 592.73 546.49 593.05 546.55 593.14 546.23 593.46 546.20 593.64 545.94 593.83 545.91 594.10 546.01 594.45 546.01 594.83 545.75 595.56 545.56 596.28 545.60 596.53 545.79 596.71 546.07 597.21 545.86 597.65 545.56 598.12 546.11 598.43 546.18 598.71 546.02 599.03 546.34 599.21 546.42 599.55 546.32 599.72 546.40 600.37 546.53 600.67 546.46 600.45 546.21 600.35 545.89 599.80 545.60 599.85 545.46 600.20 545.46 600.18 545.16 599.84 544.95 599.60 544.93 599.56 544.49 599.88 544.50 600.10 544.63 600.87 544.74 600.99 545.01 601.16 545.16 601.33 545.10 601.53 545.23 601.82 545.03 602.18 544.93 602.40 544.96 602.73 544.51 602.29 544.42 602.01 544.19 602.47 543.77 602.43 543.65 601.83 543.76 601.56 543.64 601.58 543.40 601.03 543.25 600.59 543.25 600.67 542.78 600.45 542.72 600.72 542.28 600.66 542.14 600.11 542.04 600.03 541.75 599.76 541.98 599.30 541.94 598.97 541.74 598.87 541.34 599.01 541.30 599.34 541.03 599.56 541.04 600.04 540.42 599.79 540.23 599.62 540.25 598.98 540.59 598.97 540.37 598.70 540.05 598.24 539.96 598.26 539.67 598.53 539.60 598.77 539.29 598.70 539.17 598.29 538.98 598.03 539.05 597.97 538.74 598.13 538.45 598.51 538.32 598.83 538.02 598.73 537.71 599.14 537.83 599.64 537.88 599.91 537.64 600.34 537.61 600.74 537.66 600.94 538.01 601.20 538.08 601.78 538.07 602.00 538.21 602.06 538.61 602.27 538.84 602.58 539.28 602.45 539.49 602.68 539.67 603.14 539.48 603.31 539.31 603.44 539.05 603.59 538.95 603.46 538.75 603.58 538.59 604.05 538.41 604.52 538.36 604.82 538.94 604.81 539.28 605.23 539.91 605.49 540.05 605.54 540.17 605.86 540.26 605.99 539.88 606.24 539.90 606.48 539.82 606.80 539.84 606.72 539.38 607.02 539.52 607.08 540.15 607.34 540.53 607.56 540.77 607.59 541.05 607.28 541.33 607.28 541.79 606.92 541.90 606.68 542.12 606.61 542.44 606.65 542.68 606.33 542.73 606.00 542.61 605.62 542.66 605.68 543.08 605.88 543.33 605.93 543.68 606.14 543.81 606.59 543.96 606.69 544.23 607.07 544.39 606.95 544.55 606.91 544.83 606.62 545.06 606.88 545.24 606.97 545.39 607.45 545.78 607.83 545.88 608.18 546.05 608.59 546.18 609.02 546.19 609.65 546.16 610.16 546.30 610.68 546.56 610.57 546.92 610.65 547.12 611.10 547.26 611.44 547.28 611.65 547.45 611.87 547.51 612.62 547.55 612.73 547.34 612.33 547.01 612.43 546.73 612.63 546.55 612.98 546.52 613.07 546.40 613.81 546.35 614.26 546.36 614.54 546.47 614.79 546.77 614.87 546.95 615.17 547.10 615.47 547.02 615.93 547.02 616.35 546.91 617.14 547.03 617.20 546.84 617.02 546.32 617.02 546.05 617.16 545.84 617.33 545.76 617.59 545.49 617.60 545.12 617.66 544.97 617.61 544.52 618.43 544.67 618.88 544.99 619.03 545.02 620.04 545.42 620.40 545.76 620.46 545.93 621.07 545.94 621.44 546.16 622.16 546.25 622.64 546.51 622.95 546.76 623.17 546.82 623.54 547.01 623.96 547.34 624.21 547.44 624.45 547.68 624.58 547.66 625.05 547.91 625.27 548.24 625.48 548.28 626.21 548.25 626.39 548.33 626.44 548.54 626.29 548.83 626.49 549.38 626.51 549.76 627.43 550.36 627.94 550.53 628.11 550.75 628.05 551.10 628.15 551.47 628.35 551.62 628.73 551.55 628.98 551.61 629.28 551.92 629.58 551.91 630.01 552.07 630.44 552.14 631.01 552.08 631.43 552.27 632.04 552.35 632.74 552.76 632.84 553.13 632.97 553.37 633.39 553.45 633.37 553.82 633.53 554.15 633.70 554.30 634.07 554.12 634.31 554.09 634.71 554.32 635.04 554.15 635.33 554.20 635.43 554.43 635.80 554.43 636.10 554.70 636.31 554.75 636.46 554.62 636.70 554.61 637.01 554.49 637.16 554.70 637.57 554.94 638.03 555.02 638.23 555.00 638.65 554.76 638.91 554.80 639.39 555.00 639.90 555.12 640.38 555.31 640.74 555.09 641.09 555.33 641.41 555.39 641.60 555.66 641.85 555.72 642.15 555.63 642.28 555.99 642.41 556.18 642.69 556.35 642.72 556.64 642.96 556.92 642.52 557.27 642.54 557.42 642.22 557.54 642.41 557.77 642.45 558.06 642.63 558.29 642.33 558.54 642.35 558.76 642.92 558.93 643.37 558.58 643.72 558.21 643.97 557.71 644.38 557.77 644.72 557.41 645.02 557.30 645.70 557.25 645.87 557.32 646.25 557.22 646.53 556.59 646.73 556.48 646.92 556.71 646.92 557.10 647.18 557.24 647.57 556.86 647.38 556.71 647.54 556.25 647.89 556.04 648.59 555.93 648.81 556.00 649.39 556.04 649.88 556.18 650.16 556.13 650.40 556.22 650.52 556.04 650.70 556.21 651.05 556.39 651.49 556.44 651.58 556.81 652.25 557.21 652.76 557.39 653.17 557.65 653.46 558.38 653.84 558.42 653.99 558.53 654.28 559.07 654.64 559.23 654.87 559.15 655.33 559.18 655.59 559.13 655.87 559.17 656.00 558.98 656.24 559.11 656.53 559.44 657.02 559.79 657.15 559.96 657.05 560.23 657.32 560.30 657.71 560.58 657.62 560.92 657.89 561.15 657.99 561.58 658.31 561.86 658.81 562.05 659.97 562.58 660.18 562.53 660.37 562.72 660.77 562.64 661.24 562.90 661.54 562.85 661.81 563.04 662.37 563.06 662.81 562.93 663.28 562.94 663.80 563.05 663.70 563.45 663.85 563.54 664.14 563.42 664.80 563.37 665.02 563.19 665.20 563.17 665.59 562.86 666.09 563.15 666.32 563.12 666.47 562.94 666.69 562.94 666.84 563.08 667.38 563.24 667.48 563.49 667.90 563.97 668.21 563.99 668.50 563.87 668.68 563.91 669.43 564.41 669.58 564.67 669.73 564.78 670.64 564.98 671.18 564.63 671.32 564.44 671.54 564.30 671.91 564.38 672.12 564.19 672.30 564.22 672.85 564.11 673.50 563.79 673.55 563.64 673.36 563.43 672.89 563.31 672.92 563.17 673.43 563.04 673.54 562.86 673.55 562.57 673.38 562.29 672.89 562.07 672.64 562.04 672.47 561.87 672.41 561.39 672.12 561.12 672.02 560.83 671.79 560.57 671.69 560.27 671.65 559.65 671.87 559.36 672.10 559.27 672.18 558.92 672.45 558.72 672.82 558.63 672.77 558.27 672.43 557.93 672.49 557.87 673.25 557.83 673.14 557.66 672.88 557.63 672.61 557.40 672.96 557.15 673.22 557.11 673.76 557.17 673.98 557.13 674.15 556.83 674.07 556.51 674.16 556.19 674.71 556.21 675.24 556.06 675.62 556.08 676.06 555.86 676.35 556.04 676.78 556.02 677.10 555.94 677.53 556.04 678.04 555.88 678.31 555.85 678.95 555.64 679.26 555.64 679.53 555.90 679.96 555.91 680.66 555.72 681.01 555.56 682.00 555.50 682.69 555.39 682.83 555.32 682.98 555.04 683.42 554.98 683.66 555.11 683.89 555.07 683.88 554.80 684.13 554.07 684.24 553.91 684.74 553.66 685.09 553.65 685.33 553.58 686.22 553.41 686.59 553.18 686.70 552.96 686.66 552.69 686.96 552.46 687.34 552.35 687.45 552.06 687.64 551.95 688.14 551.51 688.01 551.24 688.10 550.97 688.22 550.90 688.70 550.90 689.18 550.99 689.41 551.20 689.89 551.14 690.39 551.33 690.83 551.40 691.56 551.33 691.84 551.49 692.17 551.57 692.17 551.93 692.32 552.18 692.55 552.36 692.30 552.48 692.06 552.31 691.80 552.35 691.69 552.65 691.27 553.15 691.38 553.51 691.72 553.76 691.98 554.07 692.69 554.08 693.73 554.64 694.42 554.84 694.99 554.65 695.41 554.63 696.07 554.16 696.31 553.83 696.63 553.71 697.09 552.95 696.92 552.85 696.83 552.57 696.52 552.53 696.15 552.41 695.51 552.47 695.18 552.36 694.95 551.85 694.78 551.65 694.73 551.38 694.59 551.07 694.21 550.97 693.76 550.99 693.60 550.81 693.22 550.68 693.05 550.35 692.92 550.34 692.74 550.04 692.55 549.90 692.31 549.85 692.32 549.65 691.76 549.48 691.38 549.41 691.17 549.18 691.06 548.95 690.91 548.95 690.76 548.73 690.49 548.71 690.48 548.36 690.34 548.05 690.09 547.86 690.13 547.61 690.38 547.59 690.58 547.36 691.45 547.77 691.90 548.21 692.15 548.22 692.60 548.44 692.78 548.47 693.06 548.33 693.34 548.32 693.58 548.07 693.71 547.73 693.76 547.38 694.31 547.46 694.53 547.57 694.85 547.61 694.88 547.83 695.33 547.95 695.61 547.62 695.84 547.61 696.27 547.39 696.55 547.43 696.77 547.28 696.83 547.06 696.98 546.95 697.00 546.72 696.81 546.59 696.83 546.25 696.70 546.08 696.21 546.00 695.89 545.74 695.52 545.53 695.43 545.35 695.58 545.01 695.29 544.93 694.96 545.00 694.41 544.82 694.08 544.79 693.93 544.68 693.73 544.70 693.36 544.55 693.47 544.36 693.68 544.30 693.86 543.98 693.88 543.73 694.31 543.78 694.49 543.98 694.72 544.06 695.17 543.86 695.31 543.53 695.33 542.92 695.04 542.80 695.01 542.50 695.31 542.23 695.35 541.96 695.74 541.70 695.92 541.42 696.18 541.13 696.46 540.92 696.97 540.91 697.28 540.82 697.48 540.68 698.41 540.63 698.74 540.43 699.27 540.54 699.49 540.65 699.56 540.85 699.95 541.02 700.17 541.78 700.35 541.90 700.86 541.95 701.30 542.15 701.61 542.14 701.69 542.31 701.65 542.58 701.73 542.74 701.71 543.04 702.00 543.13 702.59 543.10 703.22 543.25 704.04 543.77 703.84 544.30 703.77 544.73 704.26 544.81 704.69 545.13 704.85 545.31 705.24 545.36 704.90 545.73 704.90 546.05 705.69 546.16 705.87 546.33 706.08 546.34 706.38 546.05 706.52 545.69 706.80 545.40 706.78 545.11 706.49 544.71 706.61 544.38 706.35 544.12 706.30 543.86 706.48 543.19 706.82 542.98 706.85 542.65 707.06 542.67 707.32 542.79 707.74 542.68 707.89 542.49 708.05 542.46 708.17 542.27 708.78 542.16 709.08 542.19 709.42 542.03 709.66 542.22 709.37 542.47 709.28 542.68 709.50 542.84 710.07 542.86 710.76 542.97 711.11 542.84 711.28 542.60 711.64 542.39 711.85 542.20 712.24 542.17 712.47 541.81 712.88 541.54 713.00 541.33 713.23 541.52 713.07 541.95 713.31 542.36 713.64 542.14 713.84 542.12 714.02 542.41 713.98 542.82 714.26 543.10 714.31 543.25 714.58 543.50 714.64 543.70 714.83 543.92 715.04 543.98 715.70 544.40 715.60 544.66 715.66 544.86 715.87 545.13 716.21 545.23 716.53 545.25 716.94 545.02 717.37 545.09 717.64 545.06 717.84 545.24 718.17 545.26 718.40 545.56 718.49 545.86 718.82 546.14 718.96 546.32 719.34 546.47 719.37 546.61 719.62 546.73 719.83 546.61 719.85 546.38 720.06 545.95 720.73 545.80 720.91 545.61 721.02 545.15 721.15 545.07 721.63 545.13 722.17 544.96 722.43 544.97 722.69 545.21 723.38 545.43 723.49 545.61 723.34 545.98 723.86 546.44 724.65 546.90 724.75 547.09 725.11 547.11 725.81 547.49 726.03 547.44 726.19 547.51 726.29 547.83 726.77 547.90 727.18 548.04 727.69 547.75 727.89 547.52 728.13 547.65 728.33 548.02 728.61 548.26 729.08 548.27 729.29 548.21 729.47 547.67 729.60 547.47 729.90 547.26 729.62 546.37 729.45 546.00 729.49 545.93 729.90 545.88 730.18 546.08 730.46 545.88 730.75 545.96 730.80 546.09 730.68 546.34 730.81 546.56 731.31 546.74 731.42 546.93 731.63 547.05 731.90 546.98 732.00 546.79 732.42 546.95 732.78 546.73 733.02 546.65 733.26 546.75 733.46 546.64 733.77 546.94 734.25 547.16 734.63 546.75 735.05 546.78 735.34 546.70 735.95 547.21 736.16 547.54 736.35 547.55 736.59 547.40 736.69 547.22 737.03 547.00 737.11 546.67 737.07 546.48 736.72 546.42 736.55 546.19 736.54 545.99 736.40 545.86 736.11 546.05 735.93 546.07 735.70 545.91 735.41 545.58 735.41 545.32 735.67 545.17 735.80 544.97 735.70 544.81 735.51 544.78 735.03 544.46 735.00 544.16 734.86 544.01 734.60 543.91 734.62 543.69 734.44 543.41 734.76 543.05 734.57 542.57 734.53 542.14 734.74 541.96 734.78 541.77 735.23 541.61 735.29 541.29 735.39 541.23 735.60 541.58 736.29 541.93 736.47 541.76 737.26 541.60 737.45 541.19 737.77 540.86 738.10 540.60 738.59 540.60 738.78 540.69 739.22 540.49 739.60 540.53 739.05 539.79 738.52 539.67 738.45 539.57 738.63 539.31 738.92 539.21 739.06 539.07 739.03 538.82 738.81 538.79 738.46 538.53 738.15 538.47 738.01 538.36 737.90 538.00 737.50 537.41 737.47 537.09 737.57 536.94 737.38 536.82 737.40 536.55 737.83 536.53 738.30 536.85 738.68 536.91 738.76 536.64 738.79 536.23 739.06 535.96 739.34 535.95 739.60 536.23 739.79 536.26 739.92 535.88 740.29 535.84 740.98 536.03 741.45 535.83 741.50 535.57 741.70 535.56 741.79 535.16 741.55 535.08 741.52 534.68 741.24 534.52 741.47 534.30 741.49 534.16 741.32 533.97 740.95 533.95 740.82 533.64 741.15 533.04 741.58 532.91 741.65 532.44 741.93 532.38 742.58 532.56 743.08 532.59 743.24 532.95 743.83 533.02 744.31 532.97 745.14 533.28 745.29 533.56 745.63 533.76 745.86 534.19 746.37 534.39 746.74 534.77 747.26 535.02 747.87 535.19 747.86 535.35 748.13 535.62 748.52 535.86 749.09 535.98 749.21 536.29 748.78 536.39 748.59 536.36 748.25 536.46 747.98 536.71 748.04 537.16 748.21 537.25 748.57 537.04 748.98 537.06 749.72 537.48 750.08 537.53 750.35 537.50 750.97 537.60 750.87 537.93 751.13 537.98 751.44 538.32 751.36 538.57 751.75 538.60 752.22 538.48 752.72 538.55 752.78 538.84 752.60 539.02 752.89 539.23 753.27 539.12 753.51 539.29 753.71 539.06 753.62 538.77 753.81 538.44 754.09 538.34 754.24 539.05 754.39 539.26 754.60 539.96 754.52 540.24 754.58 540.91 754.88 541.30 755.26 541.46 755.56 541.65 755.98 542.08 755.97 542.21 755.70 542.39 755.52 542.67 755.54 542.81 755.85 542.92 756.33 542.96 756.73 543.07 757.02 543.04 757.48 543.60 757.68 543.98 757.97 544.16 757.94 544.44 758.38 544.54 758.50 544.77 758.55 545.07 758.71 545.16 758.81 545.61 759.04 545.82 759.48 545.45 759.73 545.46 759.92 545.67 760.12 545.46 760.24 545.81 760.41 546.03 760.96 546.10 761.31 546.01 761.72 546.10 761.90 546.02 761.98 545.73 762.32 545.62 762.64 545.72 762.75 545.95 762.93 545.96 762.89 545.39 762.77 545.17 762.81 544.92 762.73 544.69 762.42 544.44 762.97 544.14 762.96 543.88 763.35 543.67 763.33 543.38 763.59 543.37 763.83 543.14 763.79 543.00 764.07 542.94 764.13 542.71 763.94 542.28 763.52 542.18 763.49 541.80 763.68 541.55 763.65 541.39 763.35 541.44 763.12 541.34 762.89 541.45 762.64 541.26 762.85 541.11 762.95 540.81 763.28 540.65 763.45 540.47 763.86 540.35 764.08 540.50 763.99 540.73 764.11 540.90 764.61 541.01 764.75 541.43 765.06 541.37 765.35 541.58 765.91 541.49 766.63 541.72 766.47 541.99 766.45 542.32 766.29 542.69 766.10 542.84 766.00 543.22 765.98 543.86 765.84 544.00 765.68 544.52 765.34 544.59 765.37 544.87 765.85 544.85 766.13 544.77 766.43 545.04 766.61 545.09 766.56 545.48 766.67 545.71 766.88 545.91 767.10 545.94 766.99 546.16 767.03 546.60 767.47 546.89 767.30 547.21 767.30 547.62 767.93 547.96 768.20 548.15 768.47 548.25 768.62 548.42 768.88 548.87 769.64 549.31 769.74 549.77 769.93 550.27 770.25 550.24 770.72 550.31 771.07 550.17 771.32 550.20 771.53 550.46 772.24 551.11 772.61 551.11 773.07 551.25 773.52 551.81 773.73 552.35 774.36 552.66 774.23 553.34 774.42 553.43 774.68 553.75 775.06 553.92 775.30 554.17 775.56 554.31 775.92 554.40 776.33 554.69 776.84 554.78 776.92 555.36 777.04 555.57 777.05 555.88 777.22 555.92 777.63 555.84 777.80 555.87 778.01 556.11 778.03 556.56 778.17 556.77 778.68 557.14 779.23 557.98 779.48 558.23 779.69 558.60 780.18 559.21 780.41 559.71 780.39 560.20 780.54 560.66 780.50 561.03 780.42 561.22 780.53 561.51 781.03 561.47 781.22 561.59 781.37 561.83 781.00 562.23 781.10 562.39 781.40 562.45 781.93 562.34 782.13 562.50 782.68 562.62 782.96 562.85 783.46 562.77 783.74 562.66 783.83 562.45 783.78 562.14 784.01 561.96 784.21 561.64 784.40 561.52 784.35 561.26 784.19 561.03 784.37 560.76 784.50 560.13 785.11 559.99 785.47 560.02 786.20 560.52 786.76 560.51 786.98 560.37 787.25 560.62 787.40 560.64 787.47 561.32 787.64 561.65 787.96 561.80 788.17 561.80 788.54 561.42 788.94 561.39 789.22 561.44 789.18 561.06 789.65 560.97 789.99 560.77 790.39 560.81 790.61 560.74 790.70 560.44 790.60 560.14 790.78 559.97 790.93 559.68 791.29 559.48 791.43 559.32 791.52 558.82 791.71 558.52 792.05 558.53 792.21 558.76 792.16 559.00 792.22 559.17 792.45 559.20 792.80 558.84 792.99 558.52 793.39 558.29 793.56 558.35 793.75 558.56 794.02 558.70 794.21 559.08 794.53 559.15 794.94 559.38 795.03 559.55 794.90 559.93 795.00 560.13 795.39 560.29 795.19 560.73 795.42 561.11 795.44 561.30 795.63 561.88 795.85 562.16 796.08 562.19 796.23 562.33 796.48 562.95 796.82 563.25 797.08 563.35 797.43 563.77 797.51 564.01 797.46 564.32 797.72 564.73 797.52 564.99 797.38 565.03 797.06 564.88 796.82 564.70 796.46 564.58 796.12 564.89 795.56 564.63 795.21 564.11 794.99 564.07 794.64 564.18 794.53 564.35 794.04 564.79 794.00 564.89 794.09 565.28 794.29 565.44 794.43 565.86 794.30 566.07 794.16 566.74 793.92 567.04 793.78 567.34 793.90 567.54 794.18 567.67 794.31 568.08 794.24 568.47 793.85 568.53 793.60 568.49 793.48 568.64 793.48 568.97 793.71 569.17 794.22 569.87 794.44 570.34 794.59 570.94 794.44 571.37 794.48 571.72 793.99 572.08 793.95 572.45 794.20 572.94 794.18 573.24 794.24 573.64 793.97 574.12 794.06 574.39 793.88 574.71 793.48 574.78 799.00 607.47 798.65 607.73 779.37 622.05 767.40 647.52 747.15 690.79 715.14 735.93 700.36 756.11 701.43 762.32ZM444.66 433.80 451.63 433.54 455.60 433.38 459.54 433.22 459.45 433.36 459.70 433.71 460.15 434.07 460.11 434.28 460.25 434.69 460.04 434.84 460.91 435.53 461.16 435.63 461.00 435.98 461.85 436.84 462.18 437.49 461.82 437.85 461.99 438.25 461.83 438.45 461.79 438.65 461.92 438.87 462.65 439.27 462.81 439.66 463.06 439.91 462.90 440.11 462.97 440.57 463.19 440.79 463.10 441.14 463.21 441.25 463.49 441.26 463.87 441.56 463.75 441.79 463.99 442.21 464.07 442.50 464.47 442.69 464.73 442.96 465.18 443.30 464.84 443.39 464.68 443.81 464.18 444.15 464.23 444.56 464.37 444.80 463.99 444.83 463.67 444.52 463.50 444.60 463.53 444.78 463.40 444.99 463.58 445.35 463.36 445.40 463.50 445.65 463.30 445.98 462.88 445.92 462.73 445.72 462.41 445.44 462.25 445.21 461.81 444.79 460.81 444.06 460.67 443.83 460.16 443.55 460.08 443.71 460.45 443.95 460.96 444.51 460.97 444.88 461.06 445.07 460.79 445.19 460.88 445.42 460.92 445.90 461.07 446.31 461.32 446.41 461.47 446.61 461.67 446.46 461.88 446.67 462.15 447.08 462.55 447.27 462.62 447.53 463.01 447.85 463.01 448.55 462.89 448.97 462.79 448.99 462.22 448.50 461.95 448.04 461.81 447.65 461.68 447.50 461.48 447.88 461.19 447.73 460.77 447.33 460.43 446.79 460.11 446.58 460.00 446.81 460.07 447.23 459.40 446.45 459.41 445.98 459.21 445.85 458.76 445.97 458.42 445.54 457.99 445.31 457.85 445.12 457.53 445.07 457.33 444.74 457.06 444.50 456.66 444.33 456.56 444.07 456.04 443.72 455.83 443.70 455.46 444.30 455.23 444.16 454.94 444.11 454.81 444.22 454.91 444.41 454.66 444.62 454.35 444.62 454.11 444.53 454.08 444.25 453.78 444.01 453.81 443.71 453.71 443.56 453.23 443.25 452.90 442.93 452.54 442.70 452.45 442.54 452.10 442.22 451.43 441.76 451.29 441.71 451.02 441.37 450.90 441.39 450.53 441.18 450.57 441.06 450.34 440.67 450.46 440.28 450.01 439.66 449.51 439.15 449.28 439.08 449.01 438.60 448.76 438.29 448.55 438.29 448.27 437.86 447.96 437.50 447.55 437.23 447.27 436.81 447.26 436.62 447.07 436.46 446.93 436.50 446.59 436.23 446.38 436.15 446.22 435.87 446.19 435.64 445.95 435.47 445.86 435.28 445.39 434.76 444.98 434.84 444.85 434.71 444.87 434.51 444.63 434.34 444.49 434.04 444.66 433.80ZM475.12 432.51 479.42 432.30 483.36 432.10 487.35 431.89 491.32 431.67 495.29 431.45 499.26 431.22 503.22 430.98 507.19 430.74 511.16 430.49 515.12 430.24 519.09 429.98 523.05 429.71 527.01 429.44 530.98 429.16 534.94 428.87 538.90 428.58 542.87 428.28 546.83 427.97 550.79 427.66 554.75 427.34 560.92 426.83 561.03 427.00 560.98 427.29 560.86 427.48 560.45 427.57 560.50 428.04 560.27 428.24 559.57 428.32 559.17 428.20 559.12 428.31 559.44 428.87 559.63 429.04 559.45 429.27 559.76 429.26 559.95 429.47 560.35 429.52 560.31 429.76 559.99 429.84 559.83 429.99 559.54 430.11 560.08 430.27 560.16 430.44 560.05 430.63 560.53 430.78 560.54 430.90 560.29 431.08 560.03 430.98 559.62 430.98 559.52 431.17 558.96 431.27 559.30 431.54 559.61 431.64 559.67 432.03 559.94 432.25 559.75 432.53 559.39 432.42 559.10 432.24 559.03 432.07 558.84 432.04 558.62 432.22 558.25 432.32 557.80 431.89 557.78 432.10 558.07 432.42 557.98 432.54 557.65 432.46 557.49 432.31 557.09 432.22 556.94 431.83 556.91 431.52 556.80 431.27 556.54 431.27 556.20 431.39 555.54 431.10 555.87 430.85 555.84 430.65 555.55 430.61 555.38 430.70 555.06 430.52 554.49 430.41 554.13 430.27 553.80 430.25 553.72 429.88 553.60 429.86 553.37 430.11 553.12 430.30 552.62 430.48 552.45 430.67 552.72 430.92 552.63 431.15 552.88 431.13 553.17 431.28 553.72 431.33 552.77 432.21 552.21 432.19 552.29 432.53 552.62 432.73 552.75 432.87 552.27 433.17 552.23 433.38 552.46 433.70 552.23 433.78 551.86 433.72 551.81 433.84 552.04 434.20 552.11 434.45 552.29 434.70 552.08 435.15 552.59 435.67 553.06 436.02 552.91 436.23 553.13 436.42 553.22 436.62 553.20 436.92 553.53 437.14 553.57 437.55 552.87 437.95 552.58 437.91 552.28 437.77 552.22 438.02 552.45 438.00 552.52 438.22 552.27 438.26 551.66 438.18 551.60 438.38 551.90 438.44 552.09 438.67 551.78 438.75 551.36 438.70 551.13 438.75 550.81 438.67 550.73 438.79 550.86 439.03 551.19 439.13 551.23 439.44 551.02 439.47 550.60 439.32 550.33 439.45 550.60 439.64 550.85 439.68 550.84 439.98 550.54 440.02 550.15 439.94 550.14 440.10 550.57 440.37 551.15 440.36 551.44 440.50 551.57 440.78 551.43 441.09 551.53 441.30 551.73 441.27 551.94 441.05 552.21 441.15 552.49 441.44 552.85 441.38 553.17 441.71 553.15 441.89 553.45 442.07 553.51 442.24 553.81 442.42 554.27 442.59 554.47 442.83 554.58 442.82 554.96 443.11 554.88 443.62 555.23 443.90 555.42 443.84 555.65 444.00 555.75 444.43 555.64 444.61 555.47 444.52 555.30 444.60 555.46 444.80 555.32 444.96 555.63 445.17 555.61 445.43 555.85 445.63 556.13 445.61 556.32 445.48 556.58 445.53 556.56 445.74 557.10 446.11 556.99 446.47 557.26 446.57 557.28 446.85 557.46 447.04 557.50 447.42 557.62 447.51 557.61 447.85 557.70 448.05 557.01 447.93 556.69 448.07 556.31 447.84 556.16 447.82 556.11 447.59 555.55 447.37 555.37 447.44 554.93 447.11 554.55 446.91 554.22 446.90 554.32 447.19 554.25 447.34 553.73 447.50 553.90 447.72 553.84 448.00 553.54 448.04 553.49 448.22 553.00 448.33 553.03 448.56 552.44 448.29 552.29 448.52 552.38 448.73 552.69 449.00 552.29 449.16 552.03 449.15 551.78 449.40 551.94 449.77 551.52 449.76 551.35 449.60 550.50 449.59 550.41 449.42 549.86 449.18 549.66 448.95 549.43 448.96 549.25 449.26 549.20 449.53 548.78 449.79 548.70 450.09 548.44 450.09 548.10 449.97 547.74 449.70 547.52 449.68 547.15 449.94 547.12 450.09 546.86 450.30 546.71 450.09 546.55 450.05 546.40 449.77 546.08 449.54 545.88 449.21 545.52 449.04 545.42 448.69 545.23 448.58 544.83 448.57 544.70 448.50 544.68 448.05 544.89 447.99 544.83 447.76 544.82 447.25 544.46 446.96 544.23 446.67 543.73 446.68 543.50 446.53 543.54 446.38 542.86 445.92 542.81 445.65 542.24 445.34 542.32 445.14 542.30 444.82 542.52 444.67 542.49 444.48 542.02 444.60 541.78 444.51 541.75 444.25 541.96 444.09 542.24 443.99 542.08 443.71 541.76 443.59 541.46 443.60 541.32 443.88 540.49 444.26 540.35 443.91 540.12 443.82 539.92 443.61 539.53 443.53 539.42 443.70 538.94 443.62 538.40 443.24 538.24 442.61 538.54 442.11 538.55 441.90 538.33 441.72 538.07 441.61 537.69 441.62 537.47 441.56 537.42 441.27 536.99 441.21 536.61 441.06 536.08 441.04 535.70 441.11 535.45 441.07 535.24 440.65 534.91 440.61 534.61 440.77 534.07 440.79 533.36 440.65 532.85 440.66 532.56 440.54 532.15 440.55 532.28 440.90 532.58 440.91 532.60 441.15 532.48 441.46 532.74 441.57 532.75 441.85 532.45 441.96 532.53 442.25 532.69 442.44 532.85 442.96 532.63 443.11 531.88 443.21 531.30 442.83 531.12 442.52 530.90 442.43 530.29 442.36 530.23 442.98 530.01 443.10 530.60 443.47 530.94 443.51 531.09 443.89 531.12 444.14 530.89 444.47 530.45 444.79 530.46 445.20 530.15 445.21 529.73 444.85 529.51 444.80 529.08 444.57 528.80 444.21 528.44 444.45 528.06 444.57 527.64 444.53 526.83 444.21 526.45 443.96 526.29 444.11 526.29 444.62 526.13 444.74 525.68 444.87 525.45 444.86 524.76 444.96 524.59 444.85 524.58 444.36 524.37 444.33 524.30 444.59 524.04 444.64 523.66 444.86 523.34 444.72 522.82 444.63 522.73 444.45 522.74 444.13 522.65 443.83 522.40 443.35 522.60 443.27 522.85 443.41 522.98 443.32 522.89 442.94 522.94 442.77 523.22 442.88 523.37 442.73 523.74 442.66 523.52 442.50 523.17 442.07 523.12 441.84 522.86 441.57 522.99 441.41 523.28 441.34 523.24 441.16 523.03 440.99 523.16 440.88 523.37 440.95 523.64 440.60 523.61 440.42 523.81 440.29 523.63 440.05 523.67 439.87 523.40 439.62 523.17 439.09 522.88 438.68 522.57 438.50 522.33 438.74 522.36 439.06 522.06 439.07 521.64 438.43 521.35 438.44 521.33 438.73 521.16 439.13 520.92 438.96 520.75 438.55 520.38 438.88 519.89 438.70 519.93 438.37 520.21 438.28 520.00 438.08 519.98 437.93 520.14 437.67 520.16 437.32 520.46 436.80 520.09 436.50 520.03 436.31 519.58 435.90 519.15 436.00 518.97 435.83 518.82 435.85 518.50 435.55 518.37 435.09 518.14 435.07 518.12 434.61 517.54 434.50 517.45 434.37 516.74 433.98 516.46 433.89 516.02 433.90 515.72 433.83 515.58 433.89 515.44 434.15 515.17 434.34 514.71 434.17 514.40 433.91 513.89 433.33 513.79 432.89 513.38 432.97 513.18 433.08 512.88 432.98 512.89 432.78 512.77 432.58 512.75 432.21 512.28 432.46 511.51 432.74 511.45 432.91 511.58 433.63 511.40 434.41 511.26 434.67 510.51 434.65 510.08 434.40 509.81 434.49 509.82 434.65 510.02 435.12 510.00 435.49 509.91 435.87 509.67 436.37 509.58 436.87 509.30 437.22 509.24 437.50 509.42 438.02 509.31 438.67 509.33 438.95 509.04 439.07 508.58 439.10 508.13 439.22 507.37 439.34 506.62 439.58 506.47 439.66 506.45 439.96 506.60 440.66 506.43 440.87 506.37 441.08 506.20 441.21 506.03 441.15 505.78 440.36 505.56 440.02 505.42 439.57 505.11 439.48 504.82 439.49 504.91 440.28 504.69 440.50 504.63 440.93 504.48 441.03 503.64 440.65 503.32 440.61 503.23 441.14 502.94 441.19 502.67 441.06 502.48 440.70 502.52 440.06 502.44 439.86 501.98 439.90 501.21 439.72 501.03 440.10 500.76 440.27 500.35 440.40 500.26 440.66 500.60 441.61 500.81 441.82 501.12 442.28 501.41 442.45 501.65 442.46 501.93 442.73 502.15 443.27 502.21 444.01 502.36 445.04 501.89 445.06 501.59 445.33 501.72 445.85 500.88 446.25 500.32 445.86 499.86 445.88 499.55 445.98 498.97 446.31 498.74 446.34 497.69 445.96 497.10 445.87 496.79 446.01 496.68 446.36 496.46 446.33 496.07 445.83 495.85 445.26 495.75 445.14 495.26 445.39 495.35 445.89 495.25 446.17 495.05 446.49 495.04 446.97 494.59 447.52 494.59 447.78 494.44 447.82 494.13 447.52 493.71 447.43 493.48 447.14 493.30 446.63 493.27 446.25 493.08 445.78 492.76 445.39 492.51 445.16 492.55 444.93 492.47 444.71 492.30 444.71 491.63 443.49 491.42 443.42 491.20 443.13 490.92 442.64 490.74 442.57 490.47 442.18 489.88 441.81 489.56 441.50 489.16 441.26 488.98 441.06 488.93 440.86 488.71 440.48 488.53 440.31 488.39 439.94 488.48 439.58 488.83 439.49 488.72 439.10 488.94 438.68 488.85 438.23 488.69 438.11 488.40 438.05 488.06 437.89 488.31 437.57 488.28 437.22 488.56 437.03 488.55 436.47 488.32 436.22 488.17 435.90 487.86 436.14 487.49 436.21 486.83 435.98 486.44 435.76 486.10 435.42 485.69 435.36 485.51 435.62 485.21 435.66 484.87 435.79 484.76 436.07 484.30 435.91 484.10 436.06 483.82 436.08 483.65 435.94 483.31 435.82 483.27 435.68 482.92 435.41 482.67 435.31 482.47 435.44 482.14 435.47 481.99 435.58 482.08 435.84 482.24 436.02 482.30 436.24 482.61 436.63 482.44 436.76 482.02 436.40 481.62 436.13 481.40 436.11 481.17 435.58 480.87 435.27 480.51 434.98 480.29 434.67 479.95 434.52 479.68 434.07 479.63 433.89 479.38 433.73 479.12 433.75 478.89 433.40 478.69 433.34 478.30 433.08 478.44 433.58 477.80 433.77 477.71 433.59 477.41 433.48 477.11 433.44 477.01 433.60 476.68 433.61 476.31 433.25 475.91 433.13 475.91 433.50 475.84 433.92 475.68 434.04 475.49 433.76 475.43 433.53 475.37 432.72 475.15 432.68 475.12 432.51ZM455.70 416.41 455.90 416.59 455.93 416.73 456.18 417.15 458.11 419.06 458.50 419.37 458.46 419.51 458.37 421.77 458.75 422.13 458.70 422.30 458.36 422.02 458.34 422.51 458.45 422.57 458.65 422.93 458.71 423.34 458.71 424.06 458.29 423.93 458.21 425.84 459.42 429.52 458.97 430.93 458.43 430.97 449.56 420.88 449.33 420.87 448.78 420.32 448.72 419.74 448.41 419.05 448.51 418.98 448.89 419.47 449.12 419.61 453.15 419.47 453.07 417.35 453.52 417.33 453.01 416.87 452.99 416.60 453.72 417.17 454.02 417.31 456.11 417.23 455.70 416.41Z\"}}});"],"sourceRoot":""}